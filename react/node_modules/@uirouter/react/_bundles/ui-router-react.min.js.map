{
  "version": 3,
  "sources": [
    "webpack://UIRouterReact/webpack/universalModuleDefinition",
    "webpack://UIRouterReact/webpack/bootstrap",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/common.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/predicates.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/hof.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/coreservices.js",
    "webpack://UIRouterReact/external {\"root\":\"React\",\"amd\":\"react\",\"commonjs2\":\"react\",\"commonjs\":\"react\"}",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/rejectFactory.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/glob.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/queue.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/strings.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/common/trace.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramType.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/params/param.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/params/paramTypes.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/params/stateParams.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathNode.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/targetState.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/path/pathUtils.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/interface.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolvable.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/resolve/resolveContext.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateBuilder.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/interface.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateObject.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateMatcher.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateQueueManager.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateRegistry.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionHook.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookRegistry.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/hookBuilder.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transition.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcher.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlMatcherFactory.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRule.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRouter.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlRules.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/view/view.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/globals.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlConfig.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/url/urlService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/router.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/coreResolvables.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/redirectTo.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/onEnterExitRetain.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/resolve.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/views.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/updateGlobals.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/url.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/lazyLoad.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionEventType.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/ignoredTransition.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/hooks/invalidTransition.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/transition/transitionService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/state/stateService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/q.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/injector.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/utils.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/baseLocationService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/hashLocationService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/pushStateLocationService.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/memoryLocationConfig.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/browserLocationConfig.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/vanilla/plugins.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/interface.js",
    "@uirouter/react/node_modules/@uirouter/core/lib-esm/index.js",
    "@uirouter/react/src/index.ts",
    "@uirouter/react/src/components/UIRouter.tsx",
    "@uirouter/react/node_modules/prop-types/index.js",
    "@uirouter/react/src/components/UIView.tsx",
    "@uirouter/react/src/reactViews.tsx",
    "@uirouter/react/src/components/components.ts",
    "@uirouter/react/node_modules/classnames/index.js",
    "@uirouter/react/src/components/UISrefActive.tsx",
    "webpack://UIRouterReact/(webpack)/buildin/global.js",
    "@uirouter/react/node_modules/prop-types/factoryWithThrowingShims.js",
    "@uirouter/react/node_modules/prop-types/lib/ReactPropTypesSecret.js",
    "@uirouter/react/src/components/UISref.tsx",
    "@uirouter/react/src/core.ts"
  ],
  "names": [
    "root",
    "factory",
    "exports",
    "module",
    "require",
    "define",
    "amd",
    "window",
    "__WEBPACK_EXTERNAL_MODULE__4__",
    "installedModules",
    "__webpack_require__",
    "moduleId",
    "i",
    "l",
    "modules",
    "call",
    "m",
    "c",
    "d",
    "name",
    "getter",
    "o",
    "Object",
    "defineProperty",
    "enumerable",
    "get",
    "r",
    "Symbol",
    "toStringTag",
    "value",
    "t",
    "mode",
    "__esModule",
    "ns",
    "create",
    "key",
    "bind",
    "n",
    "object",
    "property",
    "prototype",
    "hasOwnProperty",
    "p",
    "s",
    "_coreservices__WEBPACK_IMPORTED_MODULE_2__",
    "self",
    "global",
    "undefined",
    "angular",
    "fromJson",
    "JSON",
    "parse",
    "toJson",
    "stringify",
    "forEach",
    "obj",
    "cb",
    "_this",
    "_predicates__WEBPACK_IMPORTED_MODULE_0__",
    "keys",
    "extend",
    "assign",
    "_extend",
    "equals",
    "_equals",
    "identity",
    "x",
    "noop",
    "createProxyFunctions",
    "source",
    "target",
    "fnNames",
    "latebind",
    "bindFunction",
    "fnName",
    "reduce",
    "acc",
    "apply",
    "arguments",
    "inherit",
    "parent",
    "extra",
    "inArray",
    "_hof__WEBPACK_IMPORTED_MODULE_1__",
    "_inArray",
    "array",
    "indexOf",
    "removeFrom",
    "_removeFrom",
    "idx",
    "splice",
    "pushTo",
    "_pushTo",
    "arr",
    "val",
    "push",
    "deregAll",
    "functions",
    "slice",
    "fn",
    "defaults",
    "opts",
    "defaultsList",
    "_i",
    "length",
    "defaultVals",
    "concat",
    "reverse",
    "pick",
    "mergeR",
    "memo",
    "item",
    "ancestors",
    "first",
    "second",
    "path",
    "propNames",
    "objCopy",
    "_prop",
    "omit",
    "filter",
    "pluck",
    "collection",
    "propName",
    "map",
    "callback",
    "result",
    "accept",
    "find",
    "mapObj",
    "values",
    "allTrueR",
    "elem",
    "anyTrueR",
    "unnestR",
    "flattenR",
    "pushR",
    "uniqR",
    "token",
    "unnest",
    "flatten",
    "assertPredicate",
    "assertFn",
    "assertMap",
    "predicateOrMap",
    "errMsg",
    "Error",
    "pairs",
    "arrayTuples",
    "args",
    "maxArrayLen",
    "min",
    "Math",
    "_loop_1",
    "applyPairs",
    "keyValTuple",
    "tail",
    "copy",
    "src",
    "dest",
    "toObj",
    "j",
    "o1",
    "o2",
    "t1",
    "a1",
    "a2",
    "tup",
    "b",
    "getTime",
    "toString",
    "silenceUncaughtInPromise",
    "promise",
    "catch",
    "e",
    "silentRejection",
    "error",
    "$q",
    "reject",
    "_hof__WEBPACK_IMPORTED_MODULE_0__",
    "toStr",
    "tis",
    "isUndefined",
    "isDefined",
    "isNull",
    "isNullOrUndefined",
    "isFunction",
    "isNumber",
    "isString",
    "isObject",
    "isArray",
    "Array",
    "isDate",
    "isRegExp",
    "isInjectable",
    "head",
    "isPromise",
    "curry",
    "initial_args",
    "func_args_length",
    "curried",
    "compose",
    "start",
    "this",
    "pipe",
    "funcs",
    "__webpack_exports__",
    "pattern",
    "prop",
    "propEq",
    "_val",
    "split",
    "not",
    "and",
    "fn1",
    "fn2",
    "or",
    "all",
    "any",
    "is",
    "ctor",
    "constructor",
    "eq",
    "other",
    "v",
    "invoke",
    "struct",
    "services",
    "makeStub",
    "service",
    "methods",
    "fnname",
    "$injector",
    "RejectType",
    "Glob",
    "text",
    "glob",
    "regexpString",
    "seg",
    "join",
    "regexp",
    "RegExp",
    "exec",
    "fromString",
    "matches",
    "test",
    "queue_Queue",
    "Queue",
    "_items",
    "_limit",
    "_evictListeners",
    "onEvict",
    "common",
    "enqueue",
    "items",
    "evict",
    "shift",
    "dequeue",
    "size",
    "clear",
    "current",
    "remove",
    "peekTail",
    "peekHead",
    "rejectFactory_id",
    "rejectFactory_Rejection",
    "Rejection",
    "type",
    "message",
    "detail",
    "$id",
    "isRejectionPromise",
    "then",
    "hof",
    "_transitionRejection",
    "superseded",
    "options",
    "rejection",
    "SUPERSEDED",
    "redirected",
    "invalid",
    "INVALID",
    "ignored",
    "IGNORED",
    "aborted",
    "ABORTED",
    "errored",
    "ERROR",
    "normalize",
    "toPromise",
    "maxLength",
    "max",
    "str",
    "substr",
    "padString",
    "kebobString",
    "camelCase",
    "replace",
    "$1",
    "toLowerCase",
    "functionToString",
    "fnStr",
    "fnToString",
    "namedFunctionMatch",
    "match",
    "_fn",
    "predicates",
    "isRejection",
    "stringifyPattern",
    "seen",
    "format",
    "beforeAfterSubstr",
    "char",
    "hostRegex",
    "stripLastPathElement",
    "splitHash",
    "splitQuery",
    "splitEqual",
    "trimHashVal",
    "splitOnDelim",
    "delim",
    "re",
    "joinNeighborsR",
    "uiViewString",
    "uiview",
    "state",
    "creationContext",
    "id",
    "$type",
    "fqn",
    "normalizedCat",
    "input",
    "Category",
    "consoleLog",
    "Function",
    "console",
    "log",
    "consoletable",
    "table",
    "_tid",
    "_rid",
    "transLbl",
    "trans",
    "trace_Trace",
    "Trace",
    "_enabled",
    "approximateDigests",
    "_set",
    "enabled",
    "categories",
    "k",
    "parseInt",
    "isNaN",
    "category",
    "enable",
    "disable",
    "traceTransitionStart",
    "TRANSITION",
    "traceTransitionIgnored",
    "traceHookInvocation",
    "step",
    "HOOK",
    "event",
    "context",
    "registeredHook",
    "traceHookResult",
    "hookResult",
    "transitionOptions",
    "traceResolvePath",
    "when",
    "RESOLVE",
    "traceResolvableResolved",
    "resolvable",
    "data",
    "traceError",
    "reason",
    "traceSuccess",
    "finalState",
    "traceUIViewEvent",
    "viewData",
    "UIVIEW",
    "traceUIViewConfigUpdated",
    "traceUIViewFill",
    "html",
    "traceViewSync",
    "VIEWCONFIG",
    "uivheader",
    "mapping",
    "_a",
    "_b",
    "uiView",
    "viewConfig",
    "uiv",
    "cfg",
    "viewDecl",
    "$context",
    "$name",
    "sort",
    "a",
    "localeCompare",
    "traceViewServiceEvent",
    "view",
    "$uiViewName",
    "$uiViewContextAnchor",
    "viewConfigString",
    "traceViewServiceUIViewEvent",
    "trace",
    "paramType_ParamType",
    "ParamType",
    "def",
    "encode",
    "decode",
    "$subPattern",
    "sub",
    "$normalize",
    "$asArray",
    "isSearch",
    "arrayWrap",
    "arrayHandler",
    "allTruthyMode",
    "arrayUnwrap",
    "arrayEqualsHandler",
    "val1",
    "val2",
    "left",
    "right",
    "paramTypeFn",
    "wrapperFn",
    "dynamic",
    "raw",
    "$arrayMode",
    "DefType",
    "hasOwn",
    "isShorthand",
    "getParamDeclaration",
    "paramName",
    "location",
    "noReloadOnSearch",
    "reloadOnSearch",
    "SEARCH",
    "defaultConfig",
    "paramConfig",
    "getStaticDefaultValue",
    "$$fn",
    "unwrapShorthand",
    "params",
    "makeDefaultType",
    "param_Param",
    "Param",
    "urlConfig",
    "config",
    "urlType",
    "paramTypes",
    "CONFIG",
    "PATH",
    "getType",
    "arrayDefaults",
    "arrayParamNomenclature",
    "arrayMode",
    "isOptional",
    "squash",
    "defaultPolicy",
    "getSquashPolicy",
    "defaultSquashPolicy",
    "from",
    "to",
    "configuredKeys",
    "getReplace",
    "paramValues",
    "params_1",
    "param",
    "changed",
    "values1",
    "values2",
    "validates",
    "isDefaultValue",
    "tuple",
    "replaceSpecialValues",
    "_defaultValueCache",
    "defaultValue",
    "coreservices",
    "getDefaultValue",
    "normalized",
    "encoded",
    "paramTypes_ParamTypes",
    "ParamTypes",
    "typeQueue",
    "defaultTypes",
    "types",
    "definition",
    "dispose",
    "definitionFn",
    "_flushTypeQueue",
    "valToString",
    "defaultTypeBase",
    "String",
    "string",
    "query",
    "hash",
    "int",
    "bool",
    "Boolean",
    "date",
    "getFullYear",
    "getMonth",
    "getDate",
    "capture",
    "Date",
    "valueOf",
    "json",
    "stateParams_StateParams",
    "StateParams",
    "$inherit",
    "newParams",
    "$current",
    "$to",
    "parentParams",
    "parents",
    "inherited",
    "inheritList",
    "pathNode_PathNode",
    "PathNode",
    "stateOrNode",
    "node",
    "paramSchema",
    "resolvables",
    "views",
    "parameters",
    "res",
    "clone",
    "applyRawParams",
    "pDef",
    "paramDef",
    "parameter",
    "paramsFn",
    "diff",
    "targetState_TargetState",
    "TargetState",
    "_stateRegistry",
    "_identifier",
    "_params",
    "_options",
    "_definition",
    "matcher",
    "relative",
    "identifier",
    "$state",
    "exists",
    "valid",
    "base",
    "stateName",
    "withState",
    "withParams",
    "withOptions",
    "newOpts",
    "isDef",
    "pathUtils_PathUtils",
    "PathUtils",
    "makeTargetState",
    "registry",
    "buildPath",
    "targetState",
    "toParams",
    "buildToPath",
    "fromPath",
    "toPath",
    "inheritParams",
    "applyViewConfigs",
    "$view",
    "states",
    "viewDecls",
    "subPath",
    "viewConfigs",
    "createViewConfig",
    "toKeys",
    "noInherit",
    "toNode",
    "toParamVals",
    "incomingParamVals",
    "fromParamVals",
    "ownParamVals",
    "treeChanges",
    "reloadState",
    "node1",
    "node2",
    "retained",
    "exiting",
    "entering",
    "keep",
    "nonDynamicParams",
    "retainedWithToParams",
    "retainedNode",
    "cloned",
    "matching",
    "pathA",
    "pathB",
    "done",
    "nodeA",
    "nodeB",
    "predicate",
    "elementIdx",
    "resolvePolicies",
    "LAZY",
    "EAGER",
    "async",
    "WAIT",
    "NOWAIT",
    "RXWAIT",
    "defaultResolvePolicy",
    "resolvable_Resolvable",
    "Resolvable",
    "arg1",
    "resolveFn",
    "deps",
    "policy",
    "resolved",
    "literal",
    "getPolicy",
    "thisPolicy",
    "statePolicy",
    "resolvePolicy",
    "resolve",
    "resolveContext",
    "findNode",
    "maybeWaitForRx",
    "observable$",
    "cached",
    "cache",
    "take",
    "getDependencies",
    "resolvedDeps",
    "resolvedValue",
    "fromData",
    "whens",
    "ALL_WHENS",
    "EAGER_WHENS",
    "NATIVE_INJECTOR_TOKEN",
    "resolveContext_ResolveContext",
    "ResolveContext",
    "_path",
    "getTokens",
    "getResolvable",
    "subContext",
    "addResolvables",
    "newResolvables",
    "resolvePath",
    "matchedWhens",
    "matchesPolicy",
    "acceptedVals",
    "whenOrAsync",
    "promises",
    "nodeResolvables",
    "nowait",
    "wait",
    "getResult",
    "injector",
    "_injector",
    "resolveContext_UIInjectorImpl",
    "availableResolvables",
    "_node",
    "fromInjector",
    "getNative",
    "UIInjectorImpl",
    "native",
    "getAsync",
    "nameBuilder",
    "selfBuilder",
    "$$state",
    "dataBuilder",
    "getUrlBuilder",
    "$urlMatcherFactoryProvider",
    "stateObject",
    "url",
    "parsed",
    "charAt",
    "substring",
    "parseUrl",
    "compile",
    "isMatcher",
    "navigable",
    "append",
    "getNavigableBuilder",
    "isRoot",
    "getParamsBuilder",
    "paramFactory",
    "urlParams",
    "nonUrlParams",
    "fromConfig",
    "pathBuilder",
    "includesBuilder",
    "includes",
    "resolvablesBuilder",
    "resolveObj",
    "getToken",
    "provide",
    "literal2Resolvable",
    "useFactory",
    "dependencies",
    "useClass",
    "useValue",
    "useExisting",
    "tuple2Resolvable",
    "annotate",
    "strictDi",
    "item2Resolvable",
    "decl",
    "TransitionHookPhase",
    "TransitionHookScope",
    "stateBuilder_StateBuilder",
    "StateBuilder",
    "urlMatcherFactory",
    "builders",
    "parentName",
    "builder",
    "build",
    "chain",
    "parentFn",
    "_state",
    "segments",
    "pop",
    "stateObject_StateObject",
    "StateObject",
    "stateDecl",
    "isStateClass",
    "__stateObjectCache",
    "nameGlob",
    "ref",
    "matchingKeys",
    "isState",
    "stateMatcher_StateMatcher",
    "StateMatcher",
    "_states",
    "isRelative",
    "stateOrName",
    "matchGlob",
    "isStr",
    "baseState",
    "splitName",
    "pathLength",
    "relName",
    "stateQueueManager_StateQueueManager",
    "StateQueueManager",
    "router",
    "listeners",
    "queue",
    "register",
    "flush",
    "registered",
    "orphans",
    "previousQueueLength",
    "getState",
    "notifyListeners",
    "listener",
    "name_1",
    "orphanIdx",
    "existingState",
    "existingFutureState",
    "stateRegistry",
    "deregister",
    "attachRoute",
    "prev",
    "abstract",
    "rulesApi",
    "urlService",
    "rules",
    "rule",
    "urlRuleFactory",
    "stateRegistry_StateRegistry",
    "StateRegistry",
    "stateQueue",
    "_registerRoot",
    "_root",
    "#",
    "onStatesChanged",
    "stateDefinition",
    "_deregisterTree",
    "getChildren",
    "_children",
    "children",
    "deregistered",
    "removeRule",
    "deregisteredStates",
    "found",
    "decorator",
    "func",
    "defaultOptions",
    "transition",
    "traceData",
    "transitionHook_TransitionHook",
    "TransitionHook",
    "stateContext",
    "isSuperseded",
    "hookPhase",
    "RUN",
    "isActive",
    "eventType",
    "hooks",
    "waitFor",
    "nextHook",
    "invokeHook",
    "invokeHooks",
    "doneCallback",
    "remainingHooks",
    "runAllHooks",
    "hook",
    "logError",
    "err",
    "stateService",
    "defaultErrorHandler",
    "_deregistered",
    "notCurrent",
    "getNotCurrentRejection",
    "handleError",
    "getErrorHandler",
    "handleResult",
    "getResultHandler",
    "synchronous",
    "invokeLimit",
    "invokeCount",
    "handleHookResult",
    "isTargetState",
    "_disposed",
    "_aborted",
    "HANDLE_RESULT",
    "LOG_REJECTED_RESULT",
    "LOG_ERROR",
    "REJECT_ERROR",
    "THROW_ERROR",
    "matchState",
    "criterion",
    "toMatch",
    "globStrings",
    "hookRegistry_RegisteredHook",
    "RegisteredHook",
    "tranSvc",
    "matchCriteria",
    "removeHookFromRegistry",
    "priority",
    "_matchingNodes",
    "nodes",
    "_getDefaultMatchCriteria",
    "_pluginapi",
    "_getPathTypes",
    "_getMatchingNodes",
    "criteria",
    "mn",
    "pathtype",
    "isStateHook",
    "scope",
    "STATE",
    "every",
    "makeEvent",
    "transitionService",
    "_registeredHooks",
    "removeHookFn",
    "hookRegistrationFn",
    "matchObject",
    "hookBuilder_HookBuilder",
    "HookBuilder",
    "buildHooksForPhase",
    "phase",
    "_getEvents",
    "buildHooks",
    "hookType",
    "matchingHooks",
    "getMatchingHooks",
    "baseHookOptions",
    "criteriaMatchPath",
    "transitionHook",
    "reverseDepthSort",
    "factor",
    "depthDelta",
    "tupleSort",
    "reverseSort",
    "isCreate",
    "CREATE",
    "$transitions",
    "reg",
    "getHooks",
    "stateSelf",
    "transition_Transition",
    "Transition",
    "_deferred",
    "defer",
    "_hookBuilder",
    "globals",
    "_targetState",
    "_transitionCount",
    "_treeChanges",
    "createTransitionHookRegFns",
    "onCreateHooks",
    "onBefore",
    "onStart",
    "onExit",
    "onRetain",
    "onEnter",
    "onFinish",
    "onSuccess",
    "onError",
    "hookName",
    "enteringStates",
    "$from",
    "compare",
    "pathname",
    "freeze",
    "paramsChanged",
    "fromParams",
    "allParamDescriptors",
    "pathNode",
    "changedValues",
    "descriptor",
    "pathName",
    "getResolveTokens",
    "addResolvable",
    "topath",
    "targetNode",
    "redirectedFrom",
    "originalTransition",
    "rf",
    "redirect",
    "redirects",
    "redirectOpts",
    "newOptions",
    "newTransition",
    "originalEnteringNodes",
    "redirectEnteringNodes",
    "_changedParams",
    "tc",
    "reload",
    "nodeSchemas",
    "toValues",
    "fromValues",
    "schema",
    "toVals",
    "fromVals",
    "changes",
    "_ignoredReason",
    "pending",
    "same",
    "newTC",
    "pendTC",
    "run",
    "getHooksFor",
    "allBeforeHooks",
    "BEFORE",
    "lastStartedTransitionId",
    "transitionHistory",
    "allRunHooks",
    "success",
    "SUCCESS",
    "_error",
    "abort",
    "paramDefs",
    "invalidParams",
    "invalidValues",
    "fromStateOrName",
    "toStateOrName",
    "avoidEmptyHash",
    "diToken",
    "quoteRegExp",
    "surroundPattern",
    "splitOnSlash",
    "urlMatcher_defaultConfig",
    "strict",
    "caseInsensitive",
    "urlMatcher_UrlMatcher",
    "UrlMatcher",
    "_cache",
    "_segments",
    "_compiled",
    "matchArray",
    "details",
    "segment",
    "placeholder",
    "searchPlaceholder",
    "patterns",
    "last",
    "checkParamErrors",
    "nameValidator",
    "matchDetails",
    "index",
    "lastIndex",
    "search",
    "fromSearch",
    "_pattern",
    "encodeDashes",
    "encodeURIComponent",
    "charCodeAt",
    "toUpperCase",
    "pathSegmentsAndParams",
    "staticSegments",
    "pathParams",
    "queryParams",
    "weights",
    "weightsA",
    "weightsB",
    "padVal",
    "len",
    "padArrays",
    "cmp",
    "_pairs",
    "reverseString",
    "allReversed",
    "allParams",
    "searchParams",
    "nPathSegments",
    "urlm",
    "findParam",
    "urlMatchers",
    "getDetails",
    "isValid",
    "pathString",
    "queryString",
    "paramDetails",
    "__assign",
    "urlMatcherFactory_ParamFactory",
    "ParamFactory",
    "urlMatcherFactory_UrlMatcherFactory",
    "UrlMatcherFactory",
    "strictMode",
    "globalConfig",
    "_isStrictMode",
    "_isCaseInsensitive",
    "$get",
    "urlRule_UrlRuleFactory",
    "UrlRuleFactory",
    "what",
    "handler",
    "makeRule",
    "_what",
    "fromUrlMatcher",
    "fromState",
    "fromRegExp",
    "urlRule_BaseUrlRule",
    "urlMatcher",
    "_handler",
    "matchPriority",
    "optional",
    "href",
    "transitionTo",
    "sticky",
    "Number",
    "isUrlRule",
    "defaultRuleSortFn",
    "urlRouter_UrlRouter",
    "UrlRouter",
    "sync",
    "evt",
    "listen",
    "deferIntercept",
    "urlParts",
    "initial",
    "otherwise",
    "compareFn",
    "update",
    "read",
    "$url",
    "locationService",
    "absolute",
    "isHtml5",
    "html5Mode",
    "hashPrefix",
    "baseHref",
    "appendBasePath",
    "slash",
    "cfgPort",
    "port",
    "protocol",
    "host",
    "interceptDeferred",
    "configurable",
    "view_ViewService",
    "ViewService",
    "_uiViews",
    "_viewConfigs",
    "_viewConfigFactories",
    "_listeners",
    "_rootViewContext",
    "_viewConfigFactory",
    "_registeredUIView",
    "_registeredUIViews",
    "_activeViewConfigs",
    "_onSync",
    "normalizeUIViewTarget",
    "rawViewName",
    "viewAtContext",
    "uiViewName",
    "uiViewContextAnchor",
    "relativeViewNameSugar",
    "anchor",
    "_rootContext",
    "viewType",
    "cfgFactory",
    "cfgs",
    "deactivateViewConfig",
    "activateViewConfig",
    "uiViewsByFqn",
    "viewConfigDepth",
    "count",
    "depthCompare",
    "depthFn",
    "posNeg",
    "uiViewTuples",
    "stateDepth",
    "matchingConfigs",
    "matchedViewConfigs",
    "unmatchedConfigTuples",
    "configUpdated",
    "allTuples",
    "registerUIView",
    "uiViews",
    "available",
    "active",
    "vc",
    "vcSegments",
    "uivSegments",
    "negOffset",
    "fqnToFirstSegment",
    "uiViewContext",
    "globals_UIRouterGlobals",
    "UIRouterGlobals",
    "successfulTransitions",
    "getHandlerFn",
    "prioritySort",
    "URLMATCHER",
    "REGEXP",
    "RAW",
    "OTHER",
    "typeSort",
    "urlMatcherSort",
    "useMatchPriority",
    "idSort",
    "urlRules_UrlRules",
    "UrlRules",
    "_sortFn",
    "_rules",
    "_id",
    "_otherwiseFn",
    "handlerFn",
    "_sorted",
    "ensureSorted",
    "sorted",
    "stableSort",
    "group",
    "_group",
    "arrOfWrapper",
    "wrapperA",
    "wrapperB",
    "cmpDiff",
    "wrapper",
    "urlConfig_UrlConfig",
    "UrlConfig",
    "_defaultSquashPolicy",
    "locationConfig",
    "newprefix",
    "urlService_UrlService",
    "UrlService",
    "newurl",
    "onChange",
    "parts",
    "defaultPrevented",
    "best",
    "go",
    "applyResult",
    "_stopListeningFn",
    "weight",
    "_routerInstance",
    "locationServiceStub",
    "locationConfigStub",
    "router_UIRouter",
    "UIRouter",
    "_disposables",
    "viewService",
    "transitionService_TransitionService",
    "urlRouter",
    "stateService_StateService",
    "_plugins",
    "disposable",
    "plugin",
    "pluginInstance",
    "getPlugin",
    "pluginName",
    "addCoreResolvables",
    "TRANSITION_TOKENS",
    "isTransition",
    "treeChangesCleanup",
    "replaceTransitionWithNull",
    "redirectToHook",
    "redirectTo",
    "makeEnterExitRetainHook",
    "hookFn",
    "onExitHook",
    "onRetainHook",
    "onEnterHook",
    "eagerResolvePath",
    "lazyResolveState",
    "resolveRemaining",
    "loadEnteringViews",
    "enteringViews",
    "load",
    "activateViews",
    "exitingViews",
    "updateGlobalState",
    "clearCurrentTransition",
    "updateUrl",
    "$urlRouter",
    "urlOptions",
    "lazyLoadHook",
    "lazyLoad",
    "lazyLoadState",
    "orig",
    "lazyLoadFn",
    "transitionEventType_TransitionEventType",
    "hookOrder",
    "ignoredHook",
    "ignoredReason",
    "invalidTransitionHook",
    "defaultTransOpts",
    "notify",
    "custom",
    "TransitionService",
    "_router",
    "_eventTypes",
    "_criteriaPaths",
    "_deregisterHookFns",
    "_defineCorePaths",
    "_defineCoreEvents",
    "_registerCoreTransitionHooks",
    "onCreate",
    "hooksArray",
    "Phase",
    "TH",
    "paths",
    "_defineEvent",
    "_definePathType",
    "cmpByPhase",
    "hookScope",
    "fns",
    "addCoreResolves",
    "registerIgnoredTransitionHook",
    "registerInvalidTransitionHook",
    "registerRedirectToHook",
    "registerOnExitHook",
    "registerOnRetainHook",
    "registerOnEnterHook",
    "eagerResolve",
    "registerEagerResolvePath",
    "lazyResolve",
    "registerLazyResolveState",
    "resolveAll",
    "registerResolveRemaining",
    "loadViews",
    "registerLoadEnteringViews",
    "registerActivateViews",
    "updateGlobals",
    "registerUpdateGlobalState",
    "registerUpdateUrl",
    "registerLazyLoadHook",
    "StateService",
    "invalidCallbacks",
    "_defaultErrorHandler",
    "$error$",
    "stack",
    "boundFns",
    "_handleInvalidTargetState",
    "toState",
    "latestThing",
    "latest",
    "callbackQueue",
    "checkForRedirect",
    "invokeNextCallback",
    "nextCallback",
    "onInvalid",
    "defautGoOpts",
    "transOpts",
    "getCurrentPath",
    "latestSuccess",
    "currentPath",
    "rejectedTransitionHandler",
    "isLatest",
    "errorHandler",
    "transitionToPromise",
    "include",
    "defaultHrefOpts",
    "lossy",
    "nav",
    "q_$q",
    "Promise",
    "deferred",
    "injector_globals",
    "STRIP_COMMENTS",
    "ARGUMENT_NAMES",
    "injector_$injector",
    "has",
    "locals",
    "ensureExist",
    "$inject",
    "keyValsToObjectR",
    "accum",
    "getParams",
    "utils_parseUrl",
    "orEmptyString",
    "beforehash",
    "buildUrl",
    "loc",
    "searchObject",
    "locationPluginFactory",
    "serviceClass",
    "configurationClass",
    "uiRouter",
    "configuration",
    "extendStatics",
    "baseLocationService_BaseLocationServices",
    "BaseLocationServices",
    "fireAfterUpdate",
    "_listener",
    "_get",
    "_location",
    "_history",
    "history",
    "__extends",
    "setPrototypeOf",
    "__proto__",
    "__",
    "hashLocationService_HashLocationService",
    "_super",
    "HashLocationService",
    "addEventListener",
    "title",
    "removeEventListener",
    "memoryLocationService_extends",
    "MemoryLocationService",
    "_url",
    "pushStateLocationService_extends",
    "pushStateLocationService_PushStateLocationService",
    "PushStateLocationService",
    "_config",
    "_getBasePrefix",
    "basePrefix",
    "exactBaseHrefMatch",
    "startsWithBase",
    "fullUrl",
    "replaceState",
    "pushState",
    "memoryLocationConfig_MemoryLocationConfig",
    "_baseHref",
    "_port",
    "_protocol",
    "_host",
    "_hashPrefix",
    "newval",
    "browserLocationConfig_BrowserLocationConfig",
    "BrowserLocationConfig",
    "_isHtml5",
    "hostname",
    "getBaseHref",
    "baseTag",
    "document",
    "getElementsByTagName",
    "servicesPlugin",
    "hashLocationPlugin",
    "pushStateLocationPlugin",
    "memoryLocationPlugin",
    "UIRouterPluginBase",
    "__export",
    "core_1",
    "UIRouterReact",
    "StartMethodCalledMoreThanOnceError",
    "components_1",
    "React",
    "react_1",
    "PropTypes",
    "index_1",
    "UIRouterProvider",
    "createContext",
    "Provider",
    "UIRouterConsumer",
    "Consumer",
    "InstanceOrPluginsMissingError",
    "UIRouterInstanceUndefinedError",
    "props",
    "plugins",
    "render",
    "createElement",
    "propTypes",
    "arrayOf",
    "element",
    "isRequired",
    "Component",
    "UIRouter_1",
    "TransitionPropCollisionError",
    "UIViewProvider",
    "UIViewConsumer",
    "View",
    "loaded",
    "component",
    "uiViewAddress",
    "componentInstance",
    "registerUiCanExitHook",
    "_c",
    "className",
    "style",
    "childProps",
    "child",
    "isValidElement",
    "cloneElement",
    "ChildOrRenderFunction",
    "componentWillMount",
    "parentUIView",
    "uiViewData",
    "viewConfigUpdated",
    "setState",
    "componentWillUnmount",
    "newConfig",
    "resolves",
    "viewContext",
    "injector_1",
    "stringTokens",
    "now",
    "newComponent",
    "removeHook",
    "uiCanExit",
    "transitions",
    "UIView",
    "displayName",
    "__internalViewComponent",
    "reactViewsBuilder",
    "viewsDefinitionObject",
    "$default",
    "ReactViewConfig",
    "__WEBPACK_AMD_DEFINE_RESULT__",
    "classNames",
    "classes",
    "arg",
    "argType",
    "inner",
    "default",
    "_classNames",
    "UIView_1",
    "StateNameMustBeAStringError",
    "UISrefActiveProvider",
    "UISrefActiveConsumer",
    "SrefActive",
    "activeClasses",
    "addStateInfo",
    "stateParams",
    "activeClass",
    "class",
    "addState",
    "addStateInfoToParentActive",
    "updateActiveClasses",
    "parentDeregister_1",
    "stateHash",
    "createStateHash",
    "stateInfo",
    "getActiveClasses",
    "exact",
    "UISrefActive",
    "g",
    "eval",
    "ReactPropTypesSecret",
    "emptyFunction",
    "shim",
    "componentName",
    "propFullName",
    "secret",
    "getShim",
    "ReactPropTypes",
    "number",
    "symbol",
    "instanceOf",
    "objectOf",
    "oneOf",
    "oneOfType",
    "shape",
    "checkPropTypes",
    "UISrefActive_1",
    "Sref",
    "getOptions",
    "defOpts",
    "handleClick",
    "childOnClick",
    "onClick",
    "button",
    "metaKey",
    "ctrlKey",
    "preventDefault",
    "childrenProps",
    "UISref",
    "reactViews_1",
    "viewConfigFactory",
    "started"
  ],
  "mappings": "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",
  "file": "ui-router-react.min.js",
  "sourcesContent": [
    "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"UIRouterReact\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"UIRouterReact\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"UIRouterReact\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__4__) {\nreturn ",
    " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n",
    "/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred @publicapi @module common\n */ /** */\nimport { isFunction, isString, isArray, isRegExp, isDate } from './predicates';\nimport { all, any, prop, curry, not } from './hof';\nimport { services } from './coreservices';\nexport var root = (typeof self === 'object' && self.self === self && self) ||\n    (typeof global === 'object' && global.global === global && global) ||\n    this;\nvar angular = root.angular || {};\nexport var fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport var toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport var forEach = angular.forEach || _forEach;\nexport var extend = Object.assign || _extend;\nexport var equals = angular.equals || _equals;\nexport function identity(x) {\n    return x;\n}\nexport function noop() { }\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nexport function createProxyFunctions(source, target, bind, fnNames, latebind) {\n    if (latebind === void 0) { latebind = false; }\n    var bindFunction = function (fnName) { return source()[fnName].bind(bind()); };\n    var makeLateRebindFn = function (fnName) {\n        return function lateRebindFunction() {\n            target[fnName] = bindFunction(fnName);\n            return target[fnName].apply(null, arguments);\n        };\n    };\n    fnNames = fnNames || Object.keys(source());\n    return fnNames.reduce(function (acc, name) {\n        acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n        return acc;\n    }, target);\n}\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport var inherit = function (parent, extra) { return extend(Object.create(parent), extra); };\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport var inArray = curry(_inArray);\nexport function _inArray(array, obj) {\n    return array.indexOf(obj) !== -1;\n}\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport var removeFrom = curry(_removeFrom);\nexport function _removeFrom(array, obj) {\n    var idx = array.indexOf(obj);\n    if (idx >= 0)\n        array.splice(idx, 1);\n    return array;\n}\n/** pushes a values to an array and returns the value */\nexport var pushTo = curry(_pushTo);\nexport function _pushTo(arr, val) {\n    return arr.push(val), val;\n}\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexport var deregAll = function (functions) {\n    return functions.slice().forEach(function (fn) {\n        typeof fn === 'function' && fn();\n        removeFrom(functions, fn);\n    });\n};\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts) {\n    var defaultsList = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        defaultsList[_i - 1] = arguments[_i];\n    }\n    var defaultVals = extend.apply(void 0, [{}].concat(defaultsList.reverse()));\n    return extend(defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport var mergeR = function (memo, item) { return extend(memo, item); };\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first, second) {\n    var path = [];\n    // tslint:disable-next-line:forin\n    for (var n in first.path) {\n        if (first.path[n] !== second.path[n])\n            break;\n        path.push(first.path[n]);\n    }\n    return path;\n}\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj, propNames) {\n    var objCopy = {};\n    for (var _prop in obj) {\n        if (propNames.indexOf(_prop) !== -1) {\n            objCopy[_prop] = obj[_prop];\n        }\n    }\n    return objCopy;\n}\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj, propNames) {\n    return Object.keys(obj)\n        .filter(not(inArray(propNames)))\n        .reduce(function (acc, key) { return ((acc[key] = obj[key]), acc); }, {});\n}\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection, propName) {\n    return map(collection, prop(propName));\n}\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter(collection, callback) {\n    var arr = isArray(collection), result = arr ? [] : {};\n    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return (result[key] = x); };\n    forEach(collection, function (item, i) {\n        if (callback(item, i))\n            accept(item, i);\n    });\n    return result;\n}\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection, callback) {\n    var result;\n    forEach(collection, function (item, i) {\n        if (result)\n            return;\n        if (callback(item, i))\n            result = item;\n    });\n    return result;\n}\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport var mapObj = map;\n/** Maps an array or object properties using a callback function */\nexport function map(collection, callback, target) {\n    target = target || (isArray(collection) ? [] : {});\n    forEach(collection, function (item, i) { return (target[i] = callback(item, i)); });\n    return target;\n}\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport var values = function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); };\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport var allTrueR = function (memo, elem) { return memo && elem; };\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport var anyTrueR = function (memo, elem) { return memo || elem; };\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport var unnestR = function (memo, elem) { return memo.concat(elem); };\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport var flattenR = function (memo, elem) {\n    return isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n};\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr, obj) {\n    arr.push(obj);\n    return arr;\n}\n/** Reduce function that filters out duplicates */\nexport var uniqR = function (acc, token) { return (inArray(acc, token) ? acc : pushR(acc, token)); };\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport var unnest = function (arr) { return arr.reduce(unnestR, []); };\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport var flatten = function (arr) { return arr.reduce(flattenR, []); };\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport var assertPredicate = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport var assertMap = assertFn;\nexport function assertFn(predicateOrMap, errMsg) {\n    if (errMsg === void 0) { errMsg = 'assert failure'; }\n    return function (obj) {\n        var result = predicateOrMap(obj);\n        if (!result) {\n            throw new Error(isFunction(errMsg) ? errMsg(obj) : errMsg);\n        }\n        return result;\n    };\n}\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport var pairs = function (obj) { return Object.keys(obj).map(function (key) { return [key, obj[key]]; }); };\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    if (args.length === 0)\n        return [];\n    var maxArrayLen = args.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n    var result = [];\n    var _loop_1 = function (i) {\n        // This is a hot function\n        // Unroll when there are 1-4 arguments\n        switch (args.length) {\n            case 1:\n                result.push([args[0][i]]);\n                break;\n            case 2:\n                result.push([args[0][i], args[1][i]]);\n                break;\n            case 3:\n                result.push([args[0][i], args[1][i], args[2][i]]);\n                break;\n            case 4:\n                result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n                break;\n            default:\n                result.push(args.map(function (array) { return array[i]; }));\n                break;\n        }\n    };\n    for (var i = 0; i < maxArrayLen; i++) {\n        _loop_1(i);\n    }\n    return result;\n}\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo, keyValTuple) {\n    var key, value;\n    if (isArray(keyValTuple))\n        key = keyValTuple[0], value = keyValTuple[1];\n    if (!isString(key))\n        throw new Error('invalid parameters to applyPairs');\n    memo[key] = value;\n    return memo;\n}\n/** Get the last element of an array */\nexport function tail(arr) {\n    return (arr.length && arr[arr.length - 1]) || undefined;\n}\n/**\n * shallow copy from src to dest\n */\nexport function copy(src, dest) {\n    if (dest)\n        Object.keys(dest).forEach(function (key) { return delete dest[key]; });\n    if (!dest)\n        dest = {};\n    return extend(dest, src);\n}\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj, cb, _this) {\n    if (isArray(obj))\n        return obj.forEach(cb, _this);\n    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });\n}\nexport function _extend(toObj) {\n    for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj)\n            continue;\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; j++) {\n            toObj[keys[j]] = obj[keys[j]];\n        }\n    }\n    return toObj;\n}\nfunction _equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    var t1 = typeof o1, t2 = typeof o2;\n    if (t1 !== t2 || t1 !== 'object')\n        return false;\n    var tup = [o1, o2];\n    if (all(isArray)(tup))\n        return _arraysEq(o1, o2);\n    if (all(isDate)(tup))\n        return o1.getTime() === o2.getTime();\n    if (all(isRegExp)(tup))\n        return o1.toString() === o2.toString();\n    if (all(isFunction)(tup))\n        return true; // meh\n    var predicates = [isFunction, isArray, isDate, isRegExp];\n    if (predicates.map(any).reduce(function (b, fn) { return b || !!fn(tup); }, false))\n        return false;\n    var keys = {};\n    // tslint:disable-next-line:forin\n    for (var key in o1) {\n        if (!_equals(o1[key], o2[key]))\n            return false;\n        keys[key] = true;\n    }\n    for (var key in o2) {\n        if (!keys[key])\n            return false;\n    }\n    return true;\n}\nfunction _arraysEq(a1, a2) {\n    if (a1.length !== a2.length)\n        return false;\n    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);\n}\n// issue #2676\nexport var silenceUncaughtInPromise = function (promise) { return promise.catch(function (e) { return 0; }) && promise; };\nexport var silentRejection = function (error) { return silenceUncaughtInPromise(services.$q.reject(error)); };\n//# sourceMappingURL=common.js.map",
    "/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */ /** */\nimport { and, not, pipe, prop, or } from './hof';\nvar toStr = Object.prototype.toString;\nvar tis = function (t) { return function (x) { return typeof x === t; }; };\nexport var isUndefined = tis('undefined');\nexport var isDefined = not(isUndefined);\nexport var isNull = function (o) { return o === null; };\nexport var isNullOrUndefined = or(isNull, isUndefined);\nexport var isFunction = tis('function');\nexport var isNumber = tis('number');\nexport var isString = tis('string');\nexport var isObject = function (x) { return x !== null && typeof x === 'object'; };\nexport var isArray = Array.isArray;\nexport var isDate = (function (x) { return toStr.call(x) === '[object Date]'; });\nexport var isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val) {\n    if (isArray(val) && val.length) {\n        var head = val.slice(0, -1), tail = val.slice(-1);\n        return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n    }\n    return isFunction(val);\n}\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport var isPromise = and(isObject, pipe(prop('then'), isFunction));\n//# sourceMappingURL=predicates.js.map",
    "/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn) {\n    var initial_args = [].slice.apply(arguments, [1]);\n    var func_args_length = fn.length;\n    function curried(args) {\n        if (args.length >= func_args_length)\n            return fn.apply(null, args);\n        return function () {\n            return curried(args.concat([].slice.apply(arguments)));\n        };\n    }\n    return curried(initial_args);\n}\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start, result = args[start].apply(this, arguments);\n        while (i--)\n            result = args[i].call(this, result);\n        return result;\n    };\n}\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe() {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        funcs[_i] = arguments[_i];\n    }\n    return compose.apply(null, [].slice.call(arguments).reverse());\n}\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport var prop = function (name) { return function (obj) { return obj && obj[name]; }; };\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport var propEq = curry(function (name, _val, obj) { return obj && obj[name] === _val; });\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport var parse = function (name) { return pipe.apply(null, name.split('.').map(prop)); };\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport var not = function (fn) { return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return !fn.apply(null, args);\n}; };\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) && fn2.apply(null, args);\n    };\n}\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1, fn2) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return fn1.apply(null, args) || fn2.apply(null, args);\n    };\n}\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport var all = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); }; };\n// tslint:disable-next-line:variable-name\nexport var any = function (fn1) { return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); }; };\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport var is = function (ctor) { return function (obj) {\n    return (obj != null && obj.constructor === ctor) || obj instanceof ctor;\n}; };\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport var eq = function (value) { return function (other) { return value === other; }; };\n/** Given a value, returns a function which returns the value */\nexport var val = function (v) { return function () { return v; }; };\nexport function invoke(fnName, args) {\n    return function (obj) { return obj[fnName].apply(obj, args); };\n}\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct) {\n    return function (x) {\n        for (var i = 0; i < struct.length; i++) {\n            if (struct[i][0](x))\n                return struct[i][1](x);\n        }\n    };\n}\n//# sourceMappingURL=hof.js.map",
    "var noImpl = function (fnname) { return function () {\n    throw new Error(\"No implementation for \" + fnname + \". The framework specific code did not implement this method.\");\n}; };\nexport var makeStub = function (service, methods) {\n    return methods.reduce(function (acc, key) { return ((acc[key] = noImpl(service + \".\" + key + \"()\")), acc); }, {});\n};\nvar services = {\n    $q: undefined,\n    $injector: undefined,\n};\nexport { services };\n//# sourceMappingURL=coreservices.js.map",
    "module.exports = __WEBPACK_EXTERNAL_MODULE__4__;",
    "/** @publicapi @module transition */ /** */\n'use strict';\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\nvar RejectType;\n(function (RejectType) {\n    /**\n     * A new transition superseded this one.\n     *\n     * While this transition was running, a new transition started.\n     * This transition is cancelled because it was superseded by new transition.\n     */\n    RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n    /**\n     * The transition was aborted\n     *\n     * The transition was aborted by a hook which returned `false`\n     */\n    RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n    /**\n     * The transition was invalid\n     *\n     * The transition was never started because it was invalid\n     */\n    RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n    /**\n     * The transition was ignored\n     *\n     * The transition was ignored because it would have no effect.\n     *\n     * Either:\n     *\n     * - The transition is targeting the current state and parameter values\n     * - The transition is targeting the same state and parameter values as the currently running transition.\n     */\n    RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n    /**\n     * The transition errored.\n     *\n     * This generally means a hook threw an error or returned a rejected promise\n     */\n    RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n})(RejectType || (RejectType = {}));\nexport { RejectType };\n/** @hidden */\nvar id = 0;\nvar Rejection = /** @class */ (function () {\n    function Rejection(type, message, detail) {\n        /** @hidden */\n        this.$id = id++;\n        this.type = type;\n        this.message = message;\n        this.detail = detail;\n    }\n    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n    Rejection.isRejectionPromise = function (obj) {\n        return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n    };\n    /** Returns a Rejection due to transition superseded */\n    Rejection.superseded = function (detail, options) {\n        var message = 'The transition has been superseded by a different transition';\n        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n        if (options && options.redirected) {\n            rejection.redirected = true;\n        }\n        return rejection;\n    };\n    /** Returns a Rejection due to redirected transition */\n    Rejection.redirected = function (detail) {\n        return Rejection.superseded(detail, { redirected: true });\n    };\n    /** Returns a Rejection due to invalid transition */\n    Rejection.invalid = function (detail) {\n        var message = 'This transition is invalid';\n        return new Rejection(RejectType.INVALID, message, detail);\n    };\n    /** Returns a Rejection due to ignored transition */\n    Rejection.ignored = function (detail) {\n        var message = 'The transition was ignored';\n        return new Rejection(RejectType.IGNORED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.aborted = function (detail) {\n        var message = 'The transition has been aborted';\n        return new Rejection(RejectType.ABORTED, message, detail);\n    };\n    /** Returns a Rejection due to aborted transition */\n    Rejection.errored = function (detail) {\n        var message = 'The transition errored';\n        return new Rejection(RejectType.ERROR, message, detail);\n    };\n    /**\n     * Returns a Rejection\n     *\n     * Normalizes a value as a Rejection.\n     * If the value is already a Rejection, returns it.\n     * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n     *\n     * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n     */\n    Rejection.normalize = function (detail) {\n        return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n    };\n    Rejection.prototype.toString = function () {\n        var detailString = function (d) { return (d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d)); };\n        var detail = detailString(this.detail);\n        var _a = this, $id = _a.$id, type = _a.type, message = _a.message;\n        return \"Transition Rejection($id: \" + $id + \" type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n    };\n    Rejection.prototype.toPromise = function () {\n        return extend(silentRejection(this), { _transitionRejection: this });\n    };\n    return Rejection;\n}());\nexport { Rejection };\n//# sourceMappingURL=rejectFactory.js.map",
    "/** @publicapi @module core */\n/**\n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nvar Glob = /** @class */ (function () {\n    function Glob(text) {\n        this.text = text;\n        this.glob = text.split('.');\n        var regexpString = this.text\n            .split('.')\n            .map(function (seg) {\n            if (seg === '**')\n                return '(?:|(?:\\\\.[^.]*)*)';\n            if (seg === '*')\n                return '\\\\.[^.]*';\n            return '\\\\.' + seg;\n        })\n            .join('');\n        this.regexp = new RegExp('^' + regexpString + '$');\n    }\n    /** Returns true if the string has glob-like characters in it */\n    Glob.is = function (text) {\n        return !!/[!,*]+/.exec(text);\n    };\n    /** Returns a glob from the string, or null if the string isn't Glob-like */\n    Glob.fromString = function (text) {\n        return Glob.is(text) ? new Glob(text) : null;\n    };\n    Glob.prototype.matches = function (name) {\n        return this.regexp.test('.' + name);\n    };\n    return Glob;\n}());\nexport { Glob };\n//# sourceMappingURL=glob.js.map",
    "/** @publicapi @module common */ /** */\nimport { pushTo } from './common';\nvar Queue = /** @class */ (function () {\n    function Queue(_items, _limit) {\n        if (_items === void 0) { _items = []; }\n        if (_limit === void 0) { _limit = null; }\n        this._items = _items;\n        this._limit = _limit;\n        this._evictListeners = [];\n        this.onEvict = pushTo(this._evictListeners);\n    }\n    Queue.prototype.enqueue = function (item) {\n        var items = this._items;\n        items.push(item);\n        if (this._limit && items.length > this._limit)\n            this.evict();\n        return item;\n    };\n    Queue.prototype.evict = function () {\n        var item = this._items.shift();\n        this._evictListeners.forEach(function (fn) { return fn(item); });\n        return item;\n    };\n    Queue.prototype.dequeue = function () {\n        if (this.size())\n            return this._items.splice(0, 1)[0];\n    };\n    Queue.prototype.clear = function () {\n        var current = this._items;\n        this._items = [];\n        return current;\n    };\n    Queue.prototype.size = function () {\n        return this._items.length;\n    };\n    Queue.prototype.remove = function (item) {\n        var idx = this._items.indexOf(item);\n        return idx > -1 && this._items.splice(idx, 1)[0];\n    };\n    Queue.prototype.peekTail = function () {\n        return this._items[this._items.length - 1];\n    };\n    Queue.prototype.peekHead = function () {\n        if (this.size())\n            return this._items[0];\n    };\n    return Queue;\n}());\nexport { Queue };\n//# sourceMappingURL=queue.js.map",
    "/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max, str) {\n    if (str.length <= max)\n        return str;\n    return str.substr(0, max - 3) + '...';\n}\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length, str) {\n    while (str.length < length)\n        str += ' ';\n    return str;\n}\nexport function kebobString(camelCase) {\n    return camelCase\n        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char\n        .replace(/([A-Z])/g, function ($1) { return '-' + $1.toLowerCase(); }); // replace rest\n}\nexport function functionToString(fn) {\n    var fnStr = fnToString(fn);\n    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n    var fnName = fn['name'] || '';\n    if (fnName && toStr.match(/function \\(/)) {\n        return 'function ' + fnName + toStr.substr(9);\n    }\n    return toStr;\n}\nexport function fnToString(fn) {\n    var _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n    return (_fn && _fn.toString()) || 'undefined';\n}\nvar isRejection = Rejection.isRejectionPromise;\nvar hasToString = function (obj) {\n    return isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n};\nvar stringifyPattern = pattern([\n    [isUndefined, val('undefined')],\n    [isNull, val('null')],\n    [isPromise, val('[Promise]')],\n    [isRejection, function (x) { return x._transitionRejection.toString(); }],\n    [hasToString, function (x) { return x.toString(); }],\n    [isInjectable, functionToString],\n    [val(true), identity],\n]);\nexport function stringify(o) {\n    var seen = [];\n    function format(value) {\n        if (isObject(value)) {\n            if (seen.indexOf(value) !== -1)\n                return '[circular ref]';\n            seen.push(value);\n        }\n        return stringifyPattern(value);\n    }\n    if (isUndefined(o)) {\n        // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n        // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n        // manually stringifying it.\n        return format(o);\n    }\n    return JSON.stringify(o, function (key, value) { return format(value); }).replace(/\\\\\"/g, '\"');\n}\n/** Returns a function that splits a string on a character or substring */\nexport var beforeAfterSubstr = function (char) { return function (str) {\n    if (!str)\n        return ['', ''];\n    var idx = str.indexOf(char);\n    if (idx === -1)\n        return [str, ''];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n}; };\nexport var hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport var stripLastPathElement = function (str) { return str.replace(/\\/[^/]*$/, ''); };\nexport var splitHash = beforeAfterSubstr('#');\nexport var splitQuery = beforeAfterSubstr('?');\nexport var splitEqual = beforeAfterSubstr('=');\nexport var trimHashVal = function (str) { return (str ? str.replace(/^#/, '') : ''); };\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim) {\n    var re = new RegExp('(' + delim + ')', 'g');\n    return function (str) { return str.split(re).filter(identity); };\n}\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc, x) {\n    if (isString(tail(acc)) && isString(x))\n        return acc.slice(0, -1).concat(tail(acc) + x);\n    return pushR(acc, x);\n}\n//# sourceMappingURL=strings.js.map",
    "/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"@uirouter/core\";\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"@uirouter/core\").trace;\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"@uirouter/core\"].trace;\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @publicapi @module trace\n */\n/* tslint:disable:no-console */\nimport { parse } from '../common/hof';\nimport { isFunction, isNumber } from '../common/predicates';\nimport { stringify, functionToString, maxLength, padString } from './strings';\n/** @hidden */\nfunction uiViewString(uiview) {\n    if (!uiview)\n        return 'ui-view (defunct)';\n    var state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';\n    return \"[ui-view#\" + uiview.id + \" \" + uiview.$type + \":\" + uiview.fqn + \" (\" + uiview.name + \"@\" + state + \")]\";\n}\n/** @hidden */\nvar viewConfigString = function (viewConfig) {\n    var view = viewConfig.viewDecl;\n    var state = view.$context.name || '(root)';\n    return \"[View#\" + viewConfig.$id + \" from '\" + state + \"' state]: target ui-view: '\" + view.$uiViewName + \"@\" + view.$uiViewContextAnchor + \"'\";\n};\n/** @hidden */\nfunction normalizedCat(input) {\n    return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n/** @hidden */\nvar consoleLog = Function.prototype.bind.call(console.log, console);\n/** @hidden */\nvar consoletable = isFunction(console.table) ? console.table.bind(console) : consoleLog.bind(console);\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nvar Category;\n(function (Category) {\n    Category[Category[\"RESOLVE\"] = 0] = \"RESOLVE\";\n    Category[Category[\"TRANSITION\"] = 1] = \"TRANSITION\";\n    Category[Category[\"HOOK\"] = 2] = \"HOOK\";\n    Category[Category[\"UIVIEW\"] = 3] = \"UIVIEW\";\n    Category[Category[\"VIEWCONFIG\"] = 4] = \"VIEWCONFIG\";\n})(Category || (Category = {}));\nexport { Category };\n/** @hidden */\nvar _tid = parse('$id');\n/** @hidden */\nvar _rid = parse('router.$id');\n/** @hidden */\nvar transLbl = function (trans) { return \"Transition #\" + _tid(trans) + \"-\" + _rid(trans); };\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nvar Trace = /** @class */ (function () {\n    /** @hidden */\n    function Trace() {\n        /** @hidden */\n        this._enabled = {};\n        this.approximateDigests = 0;\n    }\n    /** @hidden */\n    Trace.prototype._set = function (enabled, categories) {\n        var _this = this;\n        if (!categories.length) {\n            categories = Object.keys(Category)\n                .map(function (k) { return parseInt(k, 10); })\n                .filter(function (k) { return !isNaN(k); })\n                .map(function (key) { return Category[key]; });\n        }\n        categories.map(normalizedCat).forEach(function (category) { return (_this._enabled[category] = enabled); });\n    };\n    Trace.prototype.enable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(true, categories);\n    };\n    Trace.prototype.disable = function () {\n        var categories = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            categories[_i] = arguments[_i];\n        }\n        this._set(false, categories);\n    };\n    /**\n     * Retrieves the enabled stateus of a [[Category]]\n     *\n     * ```js\n     * trace.enabled(\"VIEWCONFIG\"); // true or false\n     * ```\n     *\n     * @returns boolean true if the category is enabled\n     */\n    Trace.prototype.enabled = function (category) {\n        return !!this._enabled[normalizedCat(category)];\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionStart = function (trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": Started  -> \" + stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceTransitionIgnored = function (trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": Ignored  <> \" + stringify(trans));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookInvocation = function (step, trans, options) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        var event = parse('traceData.hookType')(options) || 'internal', context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown', name = functionToString(step.registeredHook.callback);\n        console.log(transLbl(trans) + \":   Hook -> \" + event + \" context: \" + context + \", \" + maxLength(200, name));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceHookResult = function (hookResult, trans, transitionOptions) {\n        if (!this.enabled(Category.HOOK))\n            return;\n        console.log(transLbl(trans) + \":   <- Hook returned: \" + maxLength(200, stringify(hookResult)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvePath = function (path, when, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        console.log(transLbl(trans) + \":         Resolving \" + path + \" (\" + when + \")\");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {\n        if (!this.enabled(Category.RESOLVE))\n            return;\n        console.log(transLbl(trans) + \":               <- Resolved  \" + resolvable + \" to: \" + maxLength(200, stringify(resolvable.data)));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceError = function (reason, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": <- Rejected \" + stringify(trans) + \", reason: \" + reason);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceSuccess = function (finalState, trans) {\n        if (!this.enabled(Category.TRANSITION))\n            return;\n        console.log(transLbl(trans) + \": <- Success  \" + stringify(trans) + \", final state: \" + finalState.name);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {\n        if (extra === void 0) { extra = ''; }\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        console.log(\"ui-view: \" + padString(30, event) + \" \" + uiViewString(viewData) + extra);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent('Updating', viewData, \" with ViewConfig from context='\" + context + \"'\");\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceUIViewFill = function (viewData, html) {\n        if (!this.enabled(Category.UIVIEW))\n            return;\n        this.traceUIViewEvent('Fill', viewData, \" with: \" + maxLength(200, html));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewSync = function (pairs) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        var uivheader = 'uiview component fqn';\n        var cfgheader = 'view config state (view name)';\n        var mapping = pairs\n            .map(function (_a) {\n            var uiView = _a.uiView, viewConfig = _a.viewConfig;\n            var _b;\n            var uiv = uiView && uiView.fqn;\n            var cfg = viewConfig && viewConfig.viewDecl.$context.name + \": (\" + viewConfig.viewDecl.$name + \")\";\n            return _b = {}, _b[uivheader] = uiv, _b[cfgheader] = cfg, _b;\n        })\n            .sort(function (a, b) { return (a[uivheader] || '').localeCompare(b[uivheader] || ''); });\n        consoletable(mapping);\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + viewConfigString(viewConfig));\n    };\n    /** @internalapi called by ui-router code */\n    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {\n        if (!this.enabled(Category.VIEWCONFIG))\n            return;\n        console.log(\"VIEWCONFIG: \" + event + \" \" + uiViewString(viewData));\n    };\n    return Trace;\n}());\nexport { Trace };\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from \"@uirouter/core\";\n * trace.enable(1, 5);\n * ```\n */\nvar trace = new Trace();\nexport { trace };\n//# sourceMappingURL=trace.js.map",
    "/** @publicapi @module params */ /** */\nimport { extend, filter, map } from '../common/common';\nimport { isArray, isDefined } from '../common/predicates';\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n * @internalapi\n */\nvar ParamType = /** @class */ (function () {\n    /**\n     * @param def  A configuration object which contains the custom type definition.  The object's\n     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n     * @returns a new ParamType object\n     */\n    function ParamType(def) {\n        /** @inheritdoc */\n        this.pattern = /.*/;\n        /** @inheritdoc */\n        this.inherit = true;\n        extend(this, def);\n    }\n    // consider these four methods to be \"abstract methods\" that should be overridden\n    /** @inheritdoc */\n    ParamType.prototype.is = function (val, key) {\n        return true;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.encode = function (val, key) {\n        return val;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.decode = function (val, key) {\n        return val;\n    };\n    /** @inheritdoc */\n    ParamType.prototype.equals = function (a, b) {\n        // tslint:disable-next-line:triple-equals\n        return a == b;\n    };\n    ParamType.prototype.$subPattern = function () {\n        var sub = this.pattern.toString();\n        return sub.substr(1, sub.length - 2);\n    };\n    ParamType.prototype.toString = function () {\n        return \"{ParamType:\" + this.name + \"}\";\n    };\n    /** Given an encoded string, or a decoded object, returns a decoded object */\n    ParamType.prototype.$normalize = function (val) {\n        return this.is(val) ? val : this.decode(val);\n    };\n    /**\n     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n     * e.g.:\n     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n     * - url: \"/path?queryParam=1&queryParam=2\n     * - $stateParams.queryParam will be [1, 2]\n     * if `mode` is \"auto\", then\n     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n     */\n    ParamType.prototype.$asArray = function (mode, isSearch) {\n        if (!mode)\n            return this;\n        if (mode === 'auto' && !isSearch)\n            throw new Error(\"'auto' array mode is for query parameters only\");\n        return new ArrayType(this, mode);\n    };\n    return ParamType;\n}());\nexport { ParamType };\n/**\n * Wraps up a `ParamType` object to handle array values.\n * @internalapi\n */\nfunction ArrayType(type, mode) {\n    var _this = this;\n    // Wrap non-array value as array\n    function arrayWrap(val) {\n        return isArray(val) ? val : isDefined(val) ? [val] : [];\n    }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n        switch (val.length) {\n            case 0:\n                return undefined;\n            case 1:\n                return mode === 'auto' ? val[0] : val;\n            default:\n                return val;\n        }\n    }\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n        return function handleArray(val) {\n            if (isArray(val) && val.length === 0)\n                return val;\n            var arr = arrayWrap(val);\n            var result = map(arr, callback);\n            return allTruthyMode === true ? filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);\n        };\n    }\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n        return function handleArray(val1, val2) {\n            var left = arrayWrap(val1), right = arrayWrap(val2);\n            if (left.length !== right.length)\n                return false;\n            for (var i = 0; i < left.length; i++) {\n                if (!callback(left[i], right[i]))\n                    return false;\n            }\n            return true;\n        };\n    }\n    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {\n        var paramTypeFn = type[name].bind(type);\n        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n        _this[name] = wrapperFn(paramTypeFn);\n    });\n    extend(this, {\n        dynamic: type.dynamic,\n        name: type.name,\n        pattern: type.pattern,\n        inherit: type.inherit,\n        raw: type.raw,\n        is: arrayHandler(type.is.bind(type), true),\n        $arrayMode: mode,\n    });\n}\n//# sourceMappingURL=paramType.js.map",
    "/** @publicapi @module params */ /** */\nimport { extend, filter, map, allTrueR, find } from '../common/common';\nimport { prop } from '../common/hof';\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from '../common/predicates';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\n/** @hidden */\nvar hasOwn = Object.prototype.hasOwnProperty;\n/** @hidden */\nvar isShorthand = function (cfg) {\n    return ['value', 'type', 'squash', 'array', 'dynamic'].filter(hasOwn.bind(cfg || {})).length === 0;\n};\n/** @internalapi */\nvar DefType;\n(function (DefType) {\n    DefType[DefType[\"PATH\"] = 0] = \"PATH\";\n    DefType[DefType[\"SEARCH\"] = 1] = \"SEARCH\";\n    DefType[DefType[\"CONFIG\"] = 2] = \"CONFIG\";\n})(DefType || (DefType = {}));\nexport { DefType };\n/** @internalapi */\nfunction getParamDeclaration(paramName, location, state) {\n    var noReloadOnSearch = (state.reloadOnSearch === false && location === DefType.SEARCH) || undefined;\n    var dynamic = find([state.dynamic, noReloadOnSearch], isDefined);\n    var defaultConfig = isDefined(dynamic) ? { dynamic: dynamic } : {};\n    var paramConfig = unwrapShorthand(state && state.params && state.params[paramName]);\n    return extend(defaultConfig, paramConfig);\n}\n/** @hidden */\nfunction unwrapShorthand(cfg) {\n    cfg = isShorthand(cfg) ? { value: cfg } : cfg;\n    getStaticDefaultValue['__cacheable'] = true;\n    function getStaticDefaultValue() {\n        return cfg.value;\n    }\n    var $$fn = isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue;\n    return extend(cfg, { $$fn: $$fn });\n}\n/** @hidden */\nfunction getType(cfg, urlType, location, id, paramTypes) {\n    if (cfg.type && urlType && urlType.name !== 'string')\n        throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))\n        return paramTypes.type(cfg.type);\n    if (urlType)\n        return urlType;\n    if (!cfg.type) {\n        var type = location === DefType.CONFIG\n            ? 'any'\n            : location === DefType.PATH\n                ? 'path'\n                : location === DefType.SEARCH\n                    ? 'query'\n                    : 'string';\n        return paramTypes.type(type);\n    }\n    return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type);\n}\n/**\n * @internalapi\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config, isOptional, defaultPolicy) {\n    var squash = config.squash;\n    if (!isOptional || squash === false)\n        return false;\n    if (!isDefined(squash) || squash == null)\n        return defaultPolicy;\n    if (squash === true || isString(squash))\n        return squash;\n    throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n}\n/** @internalapi */\nfunction getReplace(config, arrayMode, isOptional, squash) {\n    var defaultPolicy = [\n        { from: '', to: isOptional || arrayMode ? undefined : '' },\n        { from: null, to: isOptional || arrayMode ? undefined : '' },\n    ];\n    var replace = isArray(config.replace) ? config.replace : [];\n    if (isString(squash))\n        replace.push({ from: squash, to: undefined });\n    var configuredKeys = map(replace, prop('from'));\n    return filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);\n}\n/** @internalapi */\nvar Param = /** @class */ (function () {\n    function Param(id, type, location, urlConfig, state) {\n        var config = getParamDeclaration(id, location, state);\n        type = getType(config, type, location, id, urlConfig.paramTypes);\n        var arrayMode = getArrayMode();\n        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n        var isOptional = config.value !== undefined || location === DefType.SEARCH;\n        var dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n        var raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n        var squash = getSquashPolicy(config, isOptional, urlConfig.defaultSquashPolicy());\n        var replace = getReplace(config, arrayMode, isOptional, squash);\n        var inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n        function getArrayMode() {\n            var arrayDefaults = { array: location === DefType.SEARCH ? 'auto' : false };\n            var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n            return extend(arrayDefaults, arrayParamNomenclature, config).array;\n        }\n        extend(this, { id: id, type: type, location: location, isOptional: isOptional, dynamic: dynamic, raw: raw, squash: squash, replace: replace, inherit: inherit, array: arrayMode, config: config });\n    }\n    Param.values = function (params, values) {\n        if (values === void 0) { values = {}; }\n        var paramValues = {};\n        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {\n            var param = params_1[_i];\n            paramValues[param.id] = param.value(values[param.id]);\n        }\n        return paramValues;\n    };\n    /**\n     * Finds [[Param]] objects which have different param values\n     *\n     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n     *\n     * @param params: The list of Param objects to filter\n     * @param values1: The first set of parameter values\n     * @param values2: the second set of parameter values\n     *\n     * @returns any Param objects whose values were different between values1 and values2\n     */\n    Param.changed = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });\n    };\n    /**\n     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n     *\n     * @param params The list of [[Param]] objects to check\n     * @param values1 The first set of param values\n     * @param values2 The second set of param values\n     *\n     * @returns true if the param values in values1 and values2 are equal\n     */\n    Param.equals = function (params, values1, values2) {\n        if (values1 === void 0) { values1 = {}; }\n        if (values2 === void 0) { values2 = {}; }\n        return Param.changed(params, values1, values2).length === 0;\n    };\n    /** Returns true if a the parameter values are valid, according to the Param definitions */\n    Param.validates = function (params, values) {\n        if (values === void 0) { values = {}; }\n        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(allTrueR, true);\n    };\n    Param.prototype.isDefaultValue = function (value) {\n        return this.isOptional && this.type.equals(this.value(), value);\n    };\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    Param.prototype.value = function (value) {\n        var _this = this;\n        /**\n         * [Internal] Get the default value of a parameter, which may be an injectable function.\n         */\n        var getDefaultValue = function () {\n            if (_this._defaultValueCache)\n                return _this._defaultValueCache.defaultValue;\n            if (!services.$injector)\n                throw new Error('Injectable functions cannot be called at configuration time');\n            var defaultValue = services.$injector.invoke(_this.config.$$fn);\n            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))\n                throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + _this.id + \"' is not an instance of ParamType (\" + _this.type.name + \")\");\n            if (_this.config.$$fn['__cacheable']) {\n                _this._defaultValueCache = { defaultValue: defaultValue };\n            }\n            return defaultValue;\n        };\n        var replaceSpecialValues = function (val) {\n            for (var _i = 0, _a = _this.replace; _i < _a.length; _i++) {\n                var tuple = _a[_i];\n                if (tuple.from === val)\n                    return tuple.to;\n            }\n            return val;\n        };\n        value = replaceSpecialValues(value);\n        return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n    };\n    Param.prototype.isSearch = function () {\n        return this.location === DefType.SEARCH;\n    };\n    Param.prototype.validates = function (value) {\n        // There was no parameter value, but the param is optional\n        if ((isUndefined(value) || value === null) && this.isOptional)\n            return true;\n        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n        var normalized = this.type.$normalize(value);\n        if (!this.type.is(normalized))\n            return false;\n        // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n        var encoded = this.type.encode(normalized);\n        return !(isString(encoded) && !this.type.pattern.exec(encoded));\n    };\n    Param.prototype.toString = function () {\n        return \"{Param:\" + this.id + \" \" + this.type + \" squash: '\" + this.squash + \"' optional: \" + this.isOptional + \"}\";\n    };\n    return Param;\n}());\nexport { Param };\n//# sourceMappingURL=param.js.map",
    "/** @publicapi @module params */ /** */\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\nvar ParamTypes = /** @class */ (function () {\n    /** @internalapi */\n    function ParamTypes() {\n        /** @hidden */\n        this.enqueue = true;\n        /** @hidden */\n        this.typeQueue = [];\n        /** @internalapi */\n        this.defaultTypes = pick(ParamTypes.prototype, [\n            'hash',\n            'string',\n            'query',\n            'path',\n            'int',\n            'bool',\n            'date',\n            'json',\n            'any',\n        ]);\n        // Register default types. Store them in the prototype of this.types.\n        var makeType = function (definition, name) { return new ParamType(extend({ name: name }, definition)); };\n        this.types = inherit(map(this.defaultTypes, makeType), {});\n    }\n    /** @internalapi */\n    ParamTypes.prototype.dispose = function () {\n        this.types = {};\n    };\n    /**\n     * Registers a parameter type\n     *\n     * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n     */\n    ParamTypes.prototype.type = function (name, definition, definitionFn) {\n        if (!isDefined(definition))\n            return this.types[name];\n        if (this.types.hasOwnProperty(name))\n            throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n        this.types[name] = new ParamType(extend({ name: name }, definition));\n        if (definitionFn) {\n            this.typeQueue.push({ name: name, def: definitionFn });\n            if (!this.enqueue)\n                this._flushTypeQueue();\n        }\n        return this;\n    };\n    /** @internalapi */\n    ParamTypes.prototype._flushTypeQueue = function () {\n        while (this.typeQueue.length) {\n            var type = this.typeQueue.shift();\n            if (type.pattern)\n                throw new Error(\"You cannot override a type's .pattern at runtime.\");\n            extend(this.types[type.name], services.$injector.invoke(type.def));\n        }\n    };\n    return ParamTypes;\n}());\nexport { ParamTypes };\n/** @hidden */\nfunction initDefaultTypes() {\n    var makeDefaultType = function (def) {\n        var valToString = function (val) { return (val != null ? val.toString() : val); };\n        var defaultTypeBase = {\n            encode: valToString,\n            decode: valToString,\n            is: is(String),\n            pattern: /.*/,\n            // tslint:disable-next-line:triple-equals\n            equals: function (a, b) { return a == b; },\n        };\n        return extend({}, defaultTypeBase, def);\n    };\n    // Default Parameter Type Definitions\n    extend(ParamTypes.prototype, {\n        string: makeDefaultType({}),\n        path: makeDefaultType({\n            pattern: /[^/]*/,\n        }),\n        query: makeDefaultType({}),\n        hash: makeDefaultType({\n            inherit: false,\n        }),\n        int: makeDefaultType({\n            decode: function (val) { return parseInt(val, 10); },\n            is: function (val) {\n                return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n            },\n            pattern: /-?\\d+/,\n        }),\n        bool: makeDefaultType({\n            encode: function (val) { return (val && 1) || 0; },\n            decode: function (val) { return parseInt(val, 10) !== 0; },\n            is: is(Boolean),\n            pattern: /0|1/,\n        }),\n        date: makeDefaultType({\n            encode: function (val) {\n                return !this.is(val)\n                    ? undefined\n                    : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n            },\n            decode: function (val) {\n                if (this.is(val))\n                    return val;\n                var match = this.capture.exec(val);\n                return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n            },\n            is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },\n            equals: function (l, r) {\n                return ['getFullYear', 'getMonth', 'getDate'].reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);\n            },\n            pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n            capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n        }),\n        json: makeDefaultType({\n            encode: toJson,\n            decode: fromJson,\n            is: is(Object),\n            equals: equals,\n            pattern: /[^/]*/,\n        }),\n        // does not encode/decode\n        any: makeDefaultType({\n            encode: identity,\n            decode: identity,\n            is: function () { return true; },\n            equals: equals,\n        }),\n    });\n}\ninitDefaultTypes();\n//# sourceMappingURL=paramTypes.js.map",
    "/** @publicapi @module params */ /** */\nimport { extend, ancestors } from '../common/common';\n/** @internalapi */\nvar StateParams = /** @class */ (function () {\n    function StateParams(params) {\n        if (params === void 0) { params = {}; }\n        extend(this, params);\n    }\n    /**\n     * Merges a set of parameters with all parameters inherited between the common parents of the\n     * current state and a given destination state.\n     *\n     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n     * @param {Object} $current Internal definition of object representing the current state.\n     * @param {Object} $to Internal definition of object representing state to transition to.\n     */\n    StateParams.prototype.$inherit = function (newParams, $current, $to) {\n        var parentParams;\n        var parents = ancestors($current, $to), inherited = {}, inheritList = [];\n        for (var i in parents) {\n            if (!parents[i] || !parents[i].params)\n                continue;\n            parentParams = Object.keys(parents[i].params);\n            if (!parentParams.length)\n                continue;\n            for (var j in parentParams) {\n                if (inheritList.indexOf(parentParams[j]) >= 0)\n                    continue;\n                inheritList.push(parentParams[j]);\n                inherited[parentParams[j]] = this[parentParams[j]];\n            }\n        }\n        return extend({}, inherited, newParams);\n    };\n    return StateParams;\n}());\nexport { StateParams };\n//# sourceMappingURL=stateParams.js.map",
    "/** @internalapi @module path */ /** */\nimport { extend, applyPairs, find } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Param } from '../params/param';\n/**\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nvar PathNode = /** @class */ (function () {\n    function PathNode(stateOrNode) {\n        if (stateOrNode instanceof PathNode) {\n            var node = stateOrNode;\n            this.state = node.state;\n            this.paramSchema = node.paramSchema.slice();\n            this.paramValues = extend({}, node.paramValues);\n            this.resolvables = node.resolvables.slice();\n            this.views = node.views && node.views.slice();\n        }\n        else {\n            var state = stateOrNode;\n            this.state = state;\n            this.paramSchema = state.parameters({ inherit: false });\n            this.paramValues = {};\n            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });\n        }\n    }\n    PathNode.prototype.clone = function () {\n        return new PathNode(this);\n    };\n    /** Sets [[paramValues]] for the node, from the values of an object hash */\n    PathNode.prototype.applyRawParams = function (params) {\n        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };\n        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return applyPairs(memo, getParamVal(pDef)); }, {});\n        return this;\n    };\n    /** Gets a specific [[Param]] metadata that belongs to the node */\n    PathNode.prototype.parameter = function (name) {\n        return find(this.paramSchema, propEq('id', name));\n    };\n    /**\n     * @returns true if the state and parameter values for another PathNode are\n     * equal to the state and param values for this PathNode\n     */\n    PathNode.prototype.equals = function (node, paramsFn) {\n        var diff = this.diff(node, paramsFn);\n        return diff && diff.length === 0;\n    };\n    /**\n     * Finds Params with different parameter values on another PathNode.\n     *\n     * Given another node (of the same state), finds the parameter values which differ.\n     * Returns the [[Param]] (schema objects) whose parameter values differ.\n     *\n     * Given another node for a different state, returns `false`\n     *\n     * @param node The node to compare to\n     * @param paramsFn A function that returns which parameters should be compared.\n     * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n     */\n    PathNode.prototype.diff = function (node, paramsFn) {\n        if (this.state !== node.state)\n            return false;\n        var params = paramsFn ? paramsFn(this) : this.paramSchema;\n        return Param.changed(params, this.paramValues, node.paramValues);\n    };\n    /**\n     * Returns a clone of the PathNode\n     * @deprecated use instance method `node.clone()`\n     */\n    PathNode.clone = function (node) { return node.clone(); };\n    return PathNode;\n}());\nexport { PathNode };\n//# sourceMappingURL=pathNode.js.map",
    "/** @publicapi @module state */ /** */\nimport { isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nvar TargetState = /** @class */ (function () {\n    /**\n     * The TargetState constructor\n     *\n     * Note: Do not construct a `TargetState` manually.\n     * To create a `TargetState`, use the [[StateService.target]] factory method.\n     *\n     * @param _stateRegistry The StateRegistry to use to look up the _definition\n     * @param _identifier An identifier for a state.\n     *    Either a fully-qualified state name, or the object used to define the state.\n     * @param _params Parameters for the target state\n     * @param _options Transition options.\n     *\n     * @internalapi\n     */\n    function TargetState(_stateRegistry, _identifier, _params, _options) {\n        this._stateRegistry = _stateRegistry;\n        this._identifier = _identifier;\n        this._identifier = _identifier;\n        this._params = extend({}, _params || {});\n        this._options = extend({}, _options || {});\n        this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n    }\n    /** The name of the state this object targets */\n    TargetState.prototype.name = function () {\n        return (this._definition && this._definition.name) || this._identifier;\n    };\n    /** The identifier used when creating this TargetState */\n    TargetState.prototype.identifier = function () {\n        return this._identifier;\n    };\n    /** The target parameter values */\n    TargetState.prototype.params = function () {\n        return this._params;\n    };\n    /** The internal state object (if it was found) */\n    TargetState.prototype.$state = function () {\n        return this._definition;\n    };\n    /** The internal state declaration (if it was found) */\n    TargetState.prototype.state = function () {\n        return this._definition && this._definition.self;\n    };\n    /** The target options */\n    TargetState.prototype.options = function () {\n        return this._options;\n    };\n    /** True if the target state was found */\n    TargetState.prototype.exists = function () {\n        return !!(this._definition && this._definition.self);\n    };\n    /** True if the object is valid */\n    TargetState.prototype.valid = function () {\n        return !this.error();\n    };\n    /** If the object is invalid, returns the reason why */\n    TargetState.prototype.error = function () {\n        var base = this.options().relative;\n        if (!this._definition && !!base) {\n            var stateName = base.name ? base.name : base;\n            return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n        }\n        if (!this._definition)\n            return \"No such state '\" + this.name() + \"'\";\n        if (!this._definition.self)\n            return \"State '\" + this.name() + \"' has an invalid definition\";\n    };\n    TargetState.prototype.toString = function () {\n        return \"'\" + this.name() + \"'\" + stringify(this.params());\n    };\n    /**\n     * Returns a copy of this TargetState which targets a different state.\n     * The new TargetState has the same parameter values and transition options.\n     *\n     * @param state The new state that should be targeted\n     */\n    TargetState.prototype.withState = function (state) {\n        return new TargetState(this._stateRegistry, state, this._params, this._options);\n    };\n    /**\n     * Returns a copy of this TargetState, using the specified parameter values.\n     *\n     * @param params the new parameter values to use\n     * @param replace When false (default) the new parameter values will be merged with the current values.\n     *                When true the parameter values will be used instead of the current values.\n     */\n    TargetState.prototype.withParams = function (params, replace) {\n        if (replace === void 0) { replace = false; }\n        var newParams = replace ? params : extend({}, this._params, params);\n        return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n    };\n    /**\n     * Returns a copy of this TargetState, using the specified Transition Options.\n     *\n     * @param options the new options to use\n     * @param replace When false (default) the new options will be merged with the current options.\n     *                When true the options will be used instead of the current options.\n     */\n    TargetState.prototype.withOptions = function (options, replace) {\n        if (replace === void 0) { replace = false; }\n        var newOpts = replace ? options : extend({}, this._options, options);\n        return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n    };\n    /** Returns true if the object has a state property that might be a state or state name */\n    TargetState.isDef = function (obj) { return obj && obj.state && (isString(obj.state) || isString(obj.state.name)); };\n    return TargetState;\n}());\nexport { TargetState };\n//# sourceMappingURL=targetState.js.map",
    "/** @internalapi @module path */ /** */\nimport { extend, find, pick, omit, tail, mergeR, values, unnestR, inArray, arrayTuples, } from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from './pathNode';\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nvar PathUtils = /** @class */ (function () {\n    function PathUtils() {\n    }\n    /** Given a PathNode[], create an TargetState */\n    PathUtils.makeTargetState = function (registry, path) {\n        var state = tail(path).state;\n        return new TargetState(registry, state, path.map(prop('paramValues')).reduce(mergeR, {}), {});\n    };\n    PathUtils.buildPath = function (targetState) {\n        var toParams = targetState.params();\n        return targetState.$state().path.map(function (state) { return new PathNode(state).applyRawParams(toParams); });\n    };\n    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n    PathUtils.buildToPath = function (fromPath, targetState) {\n        var toPath = PathUtils.buildPath(targetState);\n        if (targetState.options().inherit) {\n            return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n        }\n        return toPath;\n    };\n    /**\n     * Creates ViewConfig objects and adds to nodes.\n     *\n     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n     */\n    PathUtils.applyViewConfigs = function ($view, path, states) {\n        // Only apply the viewConfigs to the nodes for the given states\n        path.filter(function (node) { return inArray(states, node.state); }).forEach(function (node) {\n            var viewDecls = values(node.state.views || {});\n            var subPath = PathUtils.subPath(path, function (n) { return n === node; });\n            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });\n            node.views = viewConfigs.reduce(unnestR, []);\n        });\n    };\n    /**\n     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n     *\n     * For a parameter in a node to be inherited from the from path:\n     * - The toPath's node must have a matching node in the fromPath (by state).\n     * - The parameter name must not be found in the toKeys parameter array.\n     *\n     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n     * it is not inherited from the fromPath.\n     */\n    PathUtils.inheritParams = function (fromPath, toPath, toKeys) {\n        if (toKeys === void 0) { toKeys = []; }\n        function nodeParamVals(path, state) {\n            var node = find(path, propEq('state', state));\n            return extend({}, node && node.paramValues);\n        }\n        var noInherit = fromPath\n            .map(function (node) { return node.paramSchema; })\n            .reduce(unnestR, [])\n            .filter(function (param) { return !param.inherit; })\n            .map(prop('id'));\n        /**\n         * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n         * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n         */\n        function makeInheritedParamsNode(toNode) {\n            // All param values for the node (may include default key/vals, when key was not found in toParams)\n            var toParamVals = extend({}, toNode && toNode.paramValues);\n            // limited to only those keys found in toParams\n            var incomingParamVals = pick(toParamVals, toKeys);\n            toParamVals = omit(toParamVals, toKeys);\n            var fromParamVals = omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n            var ownParamVals = extend(toParamVals, fromParamVals, incomingParamVals);\n            return new PathNode(toNode.state).applyRawParams(ownParamVals);\n        }\n        // The param keys specified by the incoming toParams\n        return toPath.map(makeInheritedParamsNode);\n    };\n    /**\n     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n     */\n    PathUtils.treeChanges = function (fromPath, toPath, reloadState) {\n        var max = Math.min(fromPath.length, toPath.length);\n        var keep = 0;\n        var nodesMatch = function (node1, node2) { return node1.equals(node2, PathUtils.nonDynamicParams); };\n        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n            keep++;\n        }\n        /** Given a retained node, return a new node which uses the to node's param values */\n        function applyToParams(retainedNode, idx) {\n            var cloned = retainedNode.clone();\n            cloned.paramValues = toPath[idx].paramValues;\n            return cloned;\n        }\n        var from, retained, exiting, entering, to;\n        from = fromPath;\n        retained = from.slice(0, keep);\n        exiting = from.slice(keep);\n        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n        var retainedWithToParams = retained.map(applyToParams);\n        entering = toPath.slice(keep);\n        to = retainedWithToParams.concat(entering);\n        return { from: from, to: to, retained: retained, retainedWithToParams: retainedWithToParams, exiting: exiting, entering: entering };\n    };\n    /**\n     * Returns a new path which is: the subpath of the first path which matches the second path.\n     *\n     * The new path starts from root and contains any nodes that match the nodes in the second path.\n     * It stops before the first non-matching node.\n     *\n     * Nodes are compared using their state property and their parameter values.\n     * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n     *\n     * @param pathA the first path\n     * @param pathB the second path\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     *\n     * @returns an array of PathNodes from the first path which match the nodes in the second path\n     */\n    PathUtils.matching = function (pathA, pathB, paramsFn) {\n        var done = false;\n        var tuples = arrayTuples(pathA, pathB);\n        return tuples.reduce(function (matching, _a) {\n            var nodeA = _a[0], nodeB = _a[1];\n            done = done || !nodeA.equals(nodeB, paramsFn);\n            return done ? matching : matching.concat(nodeA);\n        }, []);\n    };\n    /**\n     * Returns true if two paths are identical.\n     *\n     * @param pathA\n     * @param pathB\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     * @returns true if the the states and parameter values for both paths are identical\n     */\n    PathUtils.equals = function (pathA, pathB, paramsFn) {\n        return pathA.length === pathB.length && PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n    };\n    /**\n     * Return a subpath of a path, which stops at the first matching node\n     *\n     * Given an array of nodes, returns a subset of the array starting from the first node,\n     * stopping when the first node matches the predicate.\n     *\n     * @param path a path of [[PathNode]]s\n     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n     * @returns a subpath up to the matching node, or undefined if no match is found\n     */\n    PathUtils.subPath = function (path, predicate) {\n        var node = find(path, predicate);\n        var elementIdx = path.indexOf(node);\n        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n    };\n    PathUtils.nonDynamicParams = function (node) {\n        return node.state.parameters({ inherit: false }).filter(function (param) { return !param.dynamic; });\n    };\n    /** Gets the raw parameter values from a path */\n    PathUtils.paramValues = function (path) { return path.reduce(function (acc, node) { return extend(acc, node.paramValues); }, {}); };\n    return PathUtils;\n}());\nexport { PathUtils };\n//# sourceMappingURL=pathUtils.js.map",
    "/** @internalapi */\nexport var resolvePolicies = {\n    when: {\n        LAZY: 'LAZY',\n        EAGER: 'EAGER',\n    },\n    async: {\n        WAIT: 'WAIT',\n        NOWAIT: 'NOWAIT',\n        RXWAIT: 'RXWAIT',\n    },\n};\n//# sourceMappingURL=interface.js.map",
    "/** @publicapi @module resolve */ /** */\nimport { extend, identity } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { trace } from '../common/trace';\nimport { stringify } from '../common/strings';\nimport { isFunction, isObject } from '../common/predicates';\nimport { isNullOrUndefined } from '../common/predicates';\n// TODO: explicitly make this user configurable\nexport var defaultResolvePolicy = {\n    when: 'LAZY',\n    async: 'WAIT',\n};\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nvar Resolvable = /** @class */ (function () {\n    function Resolvable(arg1, resolveFn, deps, policy, data) {\n        this.resolved = false;\n        this.promise = undefined;\n        if (arg1 instanceof Resolvable) {\n            extend(this, arg1);\n        }\n        else if (isFunction(resolveFn)) {\n            if (isNullOrUndefined(arg1))\n                throw new Error('new Resolvable(): token argument is required');\n            if (!isFunction(resolveFn))\n                throw new Error('new Resolvable(): resolveFn argument must be a function');\n            this.token = arg1;\n            this.policy = policy;\n            this.resolveFn = resolveFn;\n            this.deps = deps || [];\n            this.data = data;\n            this.resolved = data !== undefined;\n            this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n        }\n        else if (isObject(arg1) && arg1.token && (arg1.hasOwnProperty('resolveFn') || arg1.hasOwnProperty('data'))) {\n            var literal = arg1;\n            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n        }\n    }\n    Resolvable.prototype.getPolicy = function (state) {\n        var thisPolicy = this.policy || {};\n        var statePolicy = (state && state.resolvePolicy) || {};\n        return {\n            when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n            async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n        };\n    };\n    /**\n     * Asynchronously resolve this Resolvable's data\n     *\n     * Given a ResolveContext that this Resolvable is found in:\n     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n     * and update the Resolvable's state\n     */\n    Resolvable.prototype.resolve = function (resolveContext, trans) {\n        var _this = this;\n        var $q = services.$q;\n        // Gets all dependencies from ResolveContext and wait for them to be resolved\n        var getResolvableDependencies = function () {\n            return $q.all(resolveContext.getDependencies(_this).map(function (resolvable) { return resolvable.get(resolveContext, trans); }));\n        };\n        // Invokes the resolve function passing the resolved dependencies as arguments\n        var invokeResolveFn = function (resolvedDeps) { return _this.resolveFn.apply(null, resolvedDeps); };\n        /**\n         * For RXWAIT policy:\n         *\n         * Given an observable returned from a resolve function:\n         * - enables .cache() mode (this allows multicast subscribers)\n         * - then calls toPromise() (this triggers subscribe() and thus fetches)\n         * - Waits for the promise, then return the cached observable (not the first emitted value).\n         */\n        var waitForRx = function (observable$) {\n            var cached = observable$.cache(1);\n            return cached\n                .take(1)\n                .toPromise()\n                .then(function () { return cached; });\n        };\n        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n        var node = resolveContext.findNode(this);\n        var state = node && node.state;\n        var maybeWaitForRx = this.getPolicy(state).async === 'RXWAIT' ? waitForRx : identity;\n        // After the final value has been resolved, update the state of the Resolvable\n        var applyResolvedValue = function (resolvedValue) {\n            _this.data = resolvedValue;\n            _this.resolved = true;\n            _this.resolveFn = null;\n            trace.traceResolvableResolved(_this, trans);\n            return _this.data;\n        };\n        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n        return (this.promise = $q\n            .when()\n            .then(getResolvableDependencies)\n            .then(invokeResolveFn)\n            .then(maybeWaitForRx)\n            .then(applyResolvedValue));\n    };\n    /**\n     * Gets a promise for this Resolvable's data.\n     *\n     * Fetches the data and returns a promise.\n     * Returns the existing promise if it has already been fetched once.\n     */\n    Resolvable.prototype.get = function (resolveContext, trans) {\n        return this.promise || this.resolve(resolveContext, trans);\n    };\n    Resolvable.prototype.toString = function () {\n        return \"Resolvable(token: \" + stringify(this.token) + \", requires: [\" + this.deps.map(stringify) + \"])\";\n    };\n    Resolvable.prototype.clone = function () {\n        return new Resolvable(this);\n    };\n    Resolvable.fromData = function (token, data) { return new Resolvable(token, function () { return data; }, null, null, data); };\n    return Resolvable;\n}());\nexport { Resolvable };\n//# sourceMappingURL=resolvable.js.map",
    "/** @publicapi @module resolve */ /** */\nimport { find, tail, uniqR, unnestR, inArray } from '../common/common';\nimport { propEq, not } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { resolvePolicies } from './interface';\nimport { Resolvable } from './resolvable';\nimport { PathUtils } from '../path/pathUtils';\nimport { stringify } from '../common/strings';\nimport { isUndefined } from '../common';\nvar whens = resolvePolicies.when;\nvar ALL_WHENS = [whens.EAGER, whens.LAZY];\nvar EAGER_WHENS = [whens.EAGER];\n// tslint:disable-next-line:no-inferrable-types\nexport var NATIVE_INJECTOR_TOKEN = 'Native Injector';\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nvar ResolveContext = /** @class */ (function () {\n    function ResolveContext(_path) {\n        this._path = _path;\n    }\n    /** Gets all the tokens found in the resolve context, de-duplicated */\n    ResolveContext.prototype.getTokens = function () {\n        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(uniqR, []);\n    };\n    /**\n     * Gets the Resolvable that matches the token\n     *\n     * Gets the last Resolvable that matches the token in this context, or undefined.\n     * Throws an error if it doesn't exist in the ResolveContext\n     */\n    ResolveContext.prototype.getResolvable = function (token) {\n        var matching = this._path\n            .map(function (node) { return node.resolvables; })\n            .reduce(unnestR, [])\n            .filter(function (r) { return r.token === token; });\n        return tail(matching);\n    };\n    /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n    ResolveContext.prototype.getPolicy = function (resolvable) {\n        var node = this.findNode(resolvable);\n        return resolvable.getPolicy(node.state);\n    };\n    /**\n     * Returns a ResolveContext that includes a portion of this one\n     *\n     * Given a state, this method creates a new ResolveContext from this one.\n     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n     *\n     * #### Why\n     *\n     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n     * This method is used to create a narrower context when injecting ancestor nodes.\n     *\n     * @example\n     * `let ABCD = new ResolveContext([A, B, C, D]);`\n     *\n     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n     * However, `B` should only be able to access resolvables from `A`, `B`.\n     *\n     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n     * `let AB = ABCD.subcontext(a)`\n     */\n    ResolveContext.prototype.subContext = function (state) {\n        return new ResolveContext(PathUtils.subPath(this._path, function (node) { return node.state === state; }));\n    };\n    /**\n     * Adds Resolvables to the node that matches the state\n     *\n     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n     * The resolvable is added to the node matching the `state` parameter.\n     *\n     * These new resolvables are not automatically fetched.\n     * The calling code should either fetch them, fetch something that depends on them,\n     * or rely on [[resolvePath]] being called when some state is being entered.\n     *\n     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n     *\n     * @param newResolvables the new Resolvables\n     * @param state Used to find the node to put the resolvable on\n     */\n    ResolveContext.prototype.addResolvables = function (newResolvables, state) {\n        var node = find(this._path, propEq('state', state));\n        var keys = newResolvables.map(function (r) { return r.token; });\n        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);\n    };\n    /**\n     * Returns a promise for an array of resolved path Element promises\n     *\n     * @param when\n     * @param trans\n     * @returns {Promise<any>|any}\n     */\n    ResolveContext.prototype.resolvePath = function (when, trans) {\n        var _this = this;\n        if (when === void 0) { when = 'LAZY'; }\n        // This option determines which 'when' policy Resolvables we are about to fetch.\n        var whenOption = inArray(ALL_WHENS, when) ? when : 'LAZY';\n        // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n        var matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n        // get the subpath to the state argument, if provided\n        trace.traceResolvePath(this._path, when, trans);\n        var matchesPolicy = function (acceptedVals, whenOrAsync) { return function (resolvable) {\n            return inArray(acceptedVals, _this.getPolicy(resolvable)[whenOrAsync]);\n        }; };\n        // Trigger all the (matching) Resolvables in the path\n        // Reduce all the \"WAIT\" Resolvables into an array\n        var promises = this._path.reduce(function (acc, node) {\n            var nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n            var nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n            var wait = nodeResolvables.filter(not(matchesPolicy(['NOWAIT'], 'async')));\n            // For the matching Resolvables, start their async fetch process.\n            var subContext = _this.subContext(node.state);\n            var getResult = function (r) {\n                return r\n                    .get(subContext, trans)\n                    // Return a tuple that includes the Resolvable's token\n                    .then(function (value) { return ({ token: r.token, value: value }); });\n            };\n            nowait.forEach(getResult);\n            return acc.concat(wait.map(getResult));\n        }, []);\n        // Wait for all the \"WAIT\" resolvables\n        return services.$q.all(promises);\n    };\n    ResolveContext.prototype.injector = function () {\n        return this._injector || (this._injector = new UIInjectorImpl(this));\n    };\n    ResolveContext.prototype.findNode = function (resolvable) {\n        return find(this._path, function (node) { return inArray(node.resolvables, resolvable); });\n    };\n    /**\n     * Gets the async dependencies of a Resolvable\n     *\n     * Given a Resolvable, returns its dependencies as a Resolvable[]\n     */\n    ResolveContext.prototype.getDependencies = function (resolvable) {\n        var _this = this;\n        var node = this.findNode(resolvable);\n        // Find which other resolvables are \"visible\" to the `resolvable` argument\n        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n        var subPath = PathUtils.subPath(this._path, function (x) { return x === node; }) || this._path;\n        var availableResolvables = subPath\n            .reduce(function (acc, _node) { return acc.concat(_node.resolvables); }, []) // all of subpath's resolvables\n            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument\n        var getDependency = function (token) {\n            var matching = availableResolvables.filter(function (r) { return r.token === token; });\n            if (matching.length)\n                return tail(matching);\n            var fromInjector = _this.injector().getNative(token);\n            if (isUndefined(fromInjector)) {\n                throw new Error('Could not find Dependency Injection token: ' + stringify(token));\n            }\n            return new Resolvable(token, function () { return fromInjector; }, [], fromInjector);\n        };\n        return resolvable.deps.map(getDependency);\n    };\n    return ResolveContext;\n}());\nexport { ResolveContext };\n/** @internalapi */\nvar UIInjectorImpl = /** @class */ (function () {\n    function UIInjectorImpl(context) {\n        this.context = context;\n        this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n    }\n    UIInjectorImpl.prototype.get = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable) {\n            if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n                return resolvable.get(this.context);\n            }\n            if (!resolvable.resolved) {\n                throw new Error('Resolvable async .get() not complete:' + stringify(resolvable.token));\n            }\n            return resolvable.data;\n        }\n        return this.getNative(token);\n    };\n    UIInjectorImpl.prototype.getAsync = function (token) {\n        var resolvable = this.context.getResolvable(token);\n        if (resolvable)\n            return resolvable.get(this.context);\n        return services.$q.when(this.native.get(token));\n    };\n    UIInjectorImpl.prototype.getNative = function (token) {\n        return this.native && this.native.get(token);\n    };\n    return UIInjectorImpl;\n}());\n//# sourceMappingURL=resolveContext.js.map",
    "/** @publicapi @module state */ /** */\nimport { applyPairs, extend, identity, inherit, mapObj, noop, omit, tail, values } from '../common/common';\nimport { isArray, isDefined, isFunction, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { is, pattern, pipe, prop, val } from '../common/hof';\nimport { Resolvable } from '../resolve/resolvable';\nimport { services } from '../common/coreservices';\nvar parseUrl = function (url) {\n    if (!isString(url))\n        return false;\n    var root = url.charAt(0) === '^';\n    return { val: root ? url.substring(1) : url, root: root };\n};\nfunction nameBuilder(state) {\n    return state.name;\n}\nfunction selfBuilder(state) {\n    state.self.$$state = function () { return state; };\n    return state.self;\n}\nfunction dataBuilder(state) {\n    if (state.parent && state.parent.data) {\n        state.data = state.self.data = inherit(state.parent.data, state.data);\n    }\n    return state.data;\n}\nvar getUrlBuilder = function ($urlMatcherFactoryProvider, root) {\n    return function urlBuilder(stateObject) {\n        var state = stateObject.self;\n        // For future states, i.e., states whose name ends with `.**`,\n        // match anything that starts with the url prefix\n        if (state && state.url && state.name && state.name.match(/\\.\\*\\*$/)) {\n            state.url += '{remainder:any}'; // match any path (.*)\n        }\n        var parent = stateObject.parent;\n        var parsed = parseUrl(state.url);\n        var url = !parsed ? state.url : $urlMatcherFactoryProvider.compile(parsed.val, { state: state });\n        if (!url)\n            return null;\n        if (!$urlMatcherFactoryProvider.isMatcher(url))\n            throw new Error(\"Invalid url '\" + url + \"' in state '\" + stateObject + \"'\");\n        return parsed && parsed.root ? url : ((parent && parent.navigable) || root()).url.append(url);\n    };\n};\nvar getNavigableBuilder = function (isRoot) {\n    return function navigableBuilder(state) {\n        return !isRoot(state) && state.url ? state : state.parent ? state.parent.navigable : null;\n    };\n};\nvar getParamsBuilder = function (paramFactory) {\n    return function paramsBuilder(state) {\n        var makeConfigParam = function (config, id) { return paramFactory.fromConfig(id, null, state.self); };\n        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];\n        var nonUrlParams = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n        return urlParams\n            .concat(nonUrlParams)\n            .map(function (p) { return [p.id, p]; })\n            .reduce(applyPairs, {});\n    };\n};\nfunction pathBuilder(state) {\n    return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\nfunction includesBuilder(state) {\n    var includes = state.parent ? extend({}, state.parent.includes) : {};\n    includes[state.name] = true;\n    return includes;\n}\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state) {\n    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n    var objects2Tuples = function (resolveObj, resolvePolicies) {\n        return Object.keys(resolveObj || {}).map(function (token) { return ({\n            token: token,\n            val: resolveObj[token],\n            deps: undefined,\n            policy: resolvePolicies[token],\n        }); });\n    };\n    /** fetch DI annotations from a function or ng1-style array */\n    var annotate = function (fn) {\n        var $injector = services.$injector;\n        // ng1 doesn't have an $injector until runtime.\n        // If the $injector doesn't exist, use \"deferred\" literal as a\n        // marker indicating they should be annotated when runtime starts\n        return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || 'deferred';\n    };\n    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };\n    /** true if the object looks like a provide literal, or a ng2 Provider */\n    var isLikeNg2Provider = function (obj) {\n        return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n    };\n    /** true if the object looks like a tuple from obj2Tuples */\n    var isTupleFromObj = function (obj) {\n        return !!(obj && obj.val && (isString(obj.val) || isArray(obj.val) || isFunction(obj.val)));\n    };\n    /** extracts the token from a Provider or provide literal */\n    var getToken = function (p) { return p.provide || p.token; };\n    // prettier-ignore: Given a literal resolve or provider object, returns a Resolvable\n    var literal2Resolvable = pattern([\n        [prop('resolveFn'), function (p) { return new Resolvable(getToken(p), p.resolveFn, p.deps, p.policy); }],\n        [prop('useFactory'), function (p) { return new Resolvable(getToken(p), p.useFactory, p.deps || p.dependencies, p.policy); }],\n        [prop('useClass'), function (p) { return new Resolvable(getToken(p), function () { return new p.useClass(); }, [], p.policy); }],\n        [prop('useValue'), function (p) { return new Resolvable(getToken(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],\n        [prop('useExisting'), function (p) { return new Resolvable(getToken(p), identity, [p.useExisting], p.policy); }],\n    ]);\n    // prettier-ignore\n    var tuple2Resolvable = pattern([\n        [pipe(prop('val'), isString), function (tuple) { return new Resolvable(tuple.token, identity, [tuple.val], tuple.policy); }],\n        [pipe(prop('val'), isArray), function (tuple) { return new Resolvable(tuple.token, tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],\n        [pipe(prop('val'), isFunction), function (tuple) { return new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],\n    ]);\n    // prettier-ignore\n    var item2Resolvable = pattern([\n        [is(Resolvable), function (r) { return r; }],\n        [isResolveLiteral, literal2Resolvable],\n        [isLikeNg2Provider, literal2Resolvable],\n        [isTupleFromObj, tuple2Resolvable],\n        [val(true), function (obj) { throw new Error('Invalid resolve value: ' + stringify(obj)); },],\n    ]);\n    // If resolveBlock is already an array, use it as-is.\n    // Otherwise, assume it's an object and convert to an Array of tuples\n    var decl = state.resolve;\n    var items = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n    return items.map(item2Resolvable);\n}\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nvar StateBuilder = /** @class */ (function () {\n    function StateBuilder(matcher, urlMatcherFactory) {\n        this.matcher = matcher;\n        var self = this;\n        var root = function () { return matcher.find(''); };\n        var isRoot = function (state) { return state.name === ''; };\n        function parentBuilder(state) {\n            if (isRoot(state))\n                return null;\n            return matcher.find(self.parentName(state)) || root();\n        }\n        this.builders = {\n            name: [nameBuilder],\n            self: [selfBuilder],\n            parent: [parentBuilder],\n            data: [dataBuilder],\n            // Build a URLMatcher if necessary, either via a relative or absolute URL\n            url: [getUrlBuilder(urlMatcherFactory, root)],\n            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n            navigable: [getNavigableBuilder(isRoot)],\n            params: [getParamsBuilder(urlMatcherFactory.paramFactory)],\n            // Each framework-specific ui-router implementation should define its own `views` builder\n            // e.g., src/ng1/statebuilders/views.ts\n            views: [],\n            // Keep a full path from the root down to this state as this is needed for state activation.\n            path: [pathBuilder],\n            // Speed up $state.includes() as it's used a lot\n            includes: [includesBuilder],\n            resolvables: [resolvablesBuilder],\n        };\n    }\n    /**\n     * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n     * More than one BuilderFunction can be registered for a given property.\n     *\n     * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n     *\n     * @param name The name of the State property being registered for.\n     * @param fn The BuilderFunction which will be used to build the State property\n     * @returns a function which deregisters the BuilderFunction\n     */\n    StateBuilder.prototype.builder = function (name, fn) {\n        var builders = this.builders;\n        var array = builders[name] || [];\n        // Backwards compat: if only one builder exists, return it, else return whole arary.\n        if (isString(name) && !isDefined(fn))\n            return array.length > 1 ? array : array[0];\n        if (!isString(name) || !isFunction(fn))\n            return;\n        builders[name] = array;\n        builders[name].push(fn);\n        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };\n    };\n    /**\n     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n     * properties and API built.\n     *\n     * @param state an uninitialized State object\n     * @returns the built State object\n     */\n    StateBuilder.prototype.build = function (state) {\n        var _a = this, matcher = _a.matcher, builders = _a.builders;\n        var parent = this.parentName(state);\n        if (parent && !matcher.find(parent, undefined, false)) {\n            return null;\n        }\n        for (var key in builders) {\n            if (!builders.hasOwnProperty(key))\n                continue;\n            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, noop);\n            state[key] = chain(state);\n        }\n        return state;\n    };\n    StateBuilder.prototype.parentName = function (state) {\n        // name = 'foo.bar.baz.**'\n        var name = state.name || '';\n        // segments = ['foo', 'bar', 'baz', '.**']\n        var segments = name.split('.');\n        // segments = ['foo', 'bar', 'baz']\n        var lastSegment = segments.pop();\n        // segments = ['foo', 'bar'] (ignore .** segment for future states)\n        if (lastSegment === '**')\n            segments.pop();\n        if (segments.length) {\n            if (state.parent) {\n                throw new Error(\"States that specify the 'parent:' property should not have a '.' in their name (\" + name + \")\");\n            }\n            // 'foo.bar'\n            return segments.join('.');\n        }\n        if (!state.parent)\n            return '';\n        return isString(state.parent) ? state.parent : state.parent.name;\n    };\n    StateBuilder.prototype.name = function (state) {\n        var name = state.name;\n        if (name.indexOf('.') !== -1 || !state.parent)\n            return name;\n        var parentName = isString(state.parent) ? state.parent : state.parent.name;\n        return parentName ? parentName + '.' + name : name;\n    };\n    return StateBuilder;\n}());\nexport { StateBuilder };\n//# sourceMappingURL=stateBuilder.js.map",
    "var TransitionHookPhase;\n(function (TransitionHookPhase) {\n    TransitionHookPhase[TransitionHookPhase[\"CREATE\"] = 0] = \"CREATE\";\n    TransitionHookPhase[TransitionHookPhase[\"BEFORE\"] = 1] = \"BEFORE\";\n    TransitionHookPhase[TransitionHookPhase[\"RUN\"] = 2] = \"RUN\";\n    TransitionHookPhase[TransitionHookPhase[\"SUCCESS\"] = 3] = \"SUCCESS\";\n    TransitionHookPhase[TransitionHookPhase[\"ERROR\"] = 4] = \"ERROR\";\n})(TransitionHookPhase || (TransitionHookPhase = {}));\nvar TransitionHookScope;\n(function (TransitionHookScope) {\n    TransitionHookScope[TransitionHookScope[\"TRANSITION\"] = 0] = \"TRANSITION\";\n    TransitionHookScope[TransitionHookScope[\"STATE\"] = 1] = \"STATE\";\n})(TransitionHookScope || (TransitionHookScope = {}));\nexport { TransitionHookPhase, TransitionHookScope };\n//# sourceMappingURL=interface.js.map",
    "import { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nvar StateObject = /** @class */ (function () {\n    /** @deprecated use State.create() */\n    function StateObject(config) {\n        return StateObject.create(config || {});\n    }\n    /**\n     * Create a state object to put the private/internal implementation details onto.\n     * The object's prototype chain looks like:\n     * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n     *\n     * @param stateDecl the user-supplied State Declaration\n     * @returns {StateObject} an internal State object\n     */\n    StateObject.create = function (stateDecl) {\n        stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n        var state = inherit(inherit(stateDecl, StateObject.prototype));\n        stateDecl.$$state = function () { return state; };\n        state.self = stateDecl;\n        state.__stateObjectCache = {\n            nameGlob: Glob.fromString(state.name),\n        };\n        return state;\n    };\n    /**\n     * Returns true if the provided parameter is the same state.\n     *\n     * Compares the identity of the state against the passed value, which is either an object\n     * reference to the actual `State` instance, the original definition object passed to\n     * `$stateProvider.state()`, or the fully-qualified name.\n     *\n     * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n     * @returns Returns `true` if `ref` matches the current `State` instance.\n     */\n    StateObject.prototype.is = function (ref) {\n        return this === ref || this.self === ref || this.fqn() === ref;\n    };\n    /**\n     * @deprecated this does not properly handle dot notation\n     * @returns Returns a dot-separated name of the state.\n     */\n    StateObject.prototype.fqn = function () {\n        if (!this.parent || !(this.parent instanceof this.constructor))\n            return this.name;\n        var name = this.parent.fqn();\n        return name ? name + '.' + this.name : this.name;\n    };\n    /**\n     * Returns the root node of this state's tree.\n     *\n     * @returns The root of this state's tree.\n     */\n    StateObject.prototype.root = function () {\n        return (this.parent && this.parent.root()) || this;\n    };\n    /**\n     * Gets the state's `Param` objects\n     *\n     * Gets the list of [[Param]] objects owned by the state.\n     * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n     * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n     *\n     * @param opts options\n     */\n    StateObject.prototype.parameters = function (opts) {\n        opts = defaults(opts, { inherit: true, matchingKeys: null });\n        var inherited = (opts.inherit && this.parent && this.parent.parameters()) || [];\n        return inherited\n            .concat(values(this.params))\n            .filter(function (param) { return !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id); });\n    };\n    /**\n     * Returns a single [[Param]] that is owned by the state\n     *\n     * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n     * @param id the name of the [[Param]] to return\n     * @param opts options\n     */\n    StateObject.prototype.parameter = function (id, opts) {\n        if (opts === void 0) { opts = {}; }\n        return ((this.url && this.url.parameter(id, opts)) ||\n            find(values(this.params), propEq('id', id)) ||\n            (opts.inherit && this.parent && this.parent.parameter(id)));\n    };\n    StateObject.prototype.toString = function () {\n        return this.fqn();\n    };\n    /** Predicate which returns true if the object is an class with @State() decorator */\n    StateObject.isStateClass = function (stateDecl) {\n        return isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n    };\n    /** Predicate which returns true if the object is an internal [[StateObject]] object */\n    StateObject.isState = function (obj) { return isObject(obj['__stateObjectCache']); };\n    return StateObject;\n}());\nexport { StateObject };\n//# sourceMappingURL=stateObject.js.map",
    "/** @publicapi @module state */ /** */\nimport { isString } from '../common/predicates';\nimport { values } from '../common/common';\nvar StateMatcher = /** @class */ (function () {\n    function StateMatcher(_states) {\n        this._states = _states;\n    }\n    StateMatcher.prototype.isRelative = function (stateName) {\n        stateName = stateName || '';\n        return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;\n    };\n    StateMatcher.prototype.find = function (stateOrName, base, matchGlob) {\n        if (matchGlob === void 0) { matchGlob = true; }\n        if (!stateOrName && stateOrName !== '')\n            return undefined;\n        var isStr = isString(stateOrName);\n        var name = isStr ? stateOrName : stateOrName.name;\n        if (this.isRelative(name))\n            name = this.resolvePath(name, base);\n        var state = this._states[name];\n        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n            return state;\n        }\n        else if (isStr && matchGlob) {\n            var _states = values(this._states);\n            var matches = _states.filter(function (_state) { return _state.__stateObjectCache.nameGlob && _state.__stateObjectCache.nameGlob.matches(name); });\n            if (matches.length > 1) {\n                // tslint:disable-next-line:no-console\n                console.log(\"stateMatcher.find: Found multiple matches for \" + name + \" using glob: \", matches.map(function (match) { return match.name; }));\n            }\n            return matches[0];\n        }\n        return undefined;\n    };\n    StateMatcher.prototype.resolvePath = function (name, base) {\n        if (!base)\n            throw new Error(\"No reference point given for path '\" + name + \"'\");\n        var baseState = this.find(base);\n        var splitName = name.split('.');\n        var pathLength = splitName.length;\n        var i = 0, current = baseState;\n        for (; i < pathLength; i++) {\n            if (splitName[i] === '' && i === 0) {\n                current = baseState;\n                continue;\n            }\n            if (splitName[i] === '^') {\n                if (!current.parent)\n                    throw new Error(\"Path '\" + name + \"' not valid for state '\" + baseState.name + \"'\");\n                current = current.parent;\n                continue;\n            }\n            break;\n        }\n        var relName = splitName.slice(i).join('.');\n        return current.name + (current.name && relName ? '.' : '') + relName;\n    };\n    return StateMatcher;\n}());\nexport { StateMatcher };\n//# sourceMappingURL=stateMatcher.js.map",
    "/** @publicapi @module state */ /** */\nimport { inArray, isString, prop } from '../common';\nimport { StateObject } from './stateObject';\n/** @internalapi */\nvar StateQueueManager = /** @class */ (function () {\n    function StateQueueManager(router, states, builder, listeners) {\n        this.router = router;\n        this.states = states;\n        this.builder = builder;\n        this.listeners = listeners;\n        this.queue = [];\n    }\n    /** @internalapi */\n    StateQueueManager.prototype.dispose = function () {\n        this.queue = [];\n    };\n    StateQueueManager.prototype.register = function (stateDecl) {\n        var queue = this.queue;\n        var state = StateObject.create(stateDecl);\n        var name = state.name;\n        if (!isString(name))\n            throw new Error('State must have a valid name');\n        if (this.states.hasOwnProperty(name) || inArray(queue.map(prop('name')), name))\n            throw new Error(\"State '\" + name + \"' is already defined\");\n        queue.push(state);\n        this.flush();\n        return state;\n    };\n    StateQueueManager.prototype.flush = function () {\n        var _this = this;\n        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;\n        var registered = [], // states that got registered\n        orphans = [], // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n        var getState = function (name) { return _this.states.hasOwnProperty(name) && _this.states[name]; };\n        var notifyListeners = function () {\n            if (registered.length) {\n                _this.listeners.forEach(function (listener) { return listener('registered', registered.map(function (s) { return s.self; })); });\n            }\n        };\n        while (queue.length > 0) {\n            var state = queue.shift();\n            var name_1 = state.name;\n            var result = builder.build(state);\n            var orphanIdx = orphans.indexOf(state);\n            if (result) {\n                var existingState = getState(name_1);\n                if (existingState && existingState.name === name_1) {\n                    throw new Error(\"State '\" + name_1 + \"' is already defined\");\n                }\n                var existingFutureState = getState(name_1 + '.**');\n                if (existingFutureState) {\n                    // Remove future state of the same name\n                    this.router.stateRegistry.deregister(existingFutureState);\n                }\n                states[name_1] = state;\n                this.attachRoute(state);\n                if (orphanIdx >= 0)\n                    orphans.splice(orphanIdx, 1);\n                registered.push(state);\n                continue;\n            }\n            var prev = previousQueueLength[name_1];\n            previousQueueLength[name_1] = queue.length;\n            if (orphanIdx >= 0 && prev === queue.length) {\n                // Wait until two consecutive iterations where no additional states were dequeued successfully.\n                // throw new Error(`Cannot register orphaned state '${name}'`);\n                queue.push(state);\n                notifyListeners();\n                return states;\n            }\n            else if (orphanIdx < 0) {\n                orphans.push(state);\n            }\n            queue.push(state);\n        }\n        notifyListeners();\n        return states;\n    };\n    StateQueueManager.prototype.attachRoute = function (state) {\n        if (state.abstract || !state.url)\n            return;\n        var rulesApi = this.router.urlService.rules;\n        rulesApi.rule(rulesApi.urlRuleFactory.create(state));\n    };\n    return StateQueueManager;\n}());\nexport { StateQueueManager };\n//# sourceMappingURL=stateQueueManager.js.map",
    "/** @publicapi @module state */ /** */\nimport { StateMatcher } from './stateMatcher';\nimport { StateBuilder } from './stateBuilder';\nimport { StateQueueManager } from './stateQueueManager';\nimport { removeFrom } from '../common/common';\nimport { propEq } from '../common/hof';\nvar StateRegistry = /** @class */ (function () {\n    /** @internalapi */\n    function StateRegistry(router) {\n        this.router = router;\n        this.states = {};\n        this.listeners = [];\n        this.matcher = new StateMatcher(this.states);\n        this.builder = new StateBuilder(this.matcher, router.urlMatcherFactory);\n        this.stateQueue = new StateQueueManager(router, this.states, this.builder, this.listeners);\n        this._registerRoot();\n    }\n    /** @internalapi */\n    StateRegistry.prototype._registerRoot = function () {\n        var rootStateDef = {\n            name: '',\n            url: '^',\n            views: null,\n            params: {\n                '#': { value: null, type: 'hash', dynamic: true },\n            },\n            abstract: true,\n        };\n        var _root = (this._root = this.stateQueue.register(rootStateDef));\n        _root.navigable = null;\n    };\n    /** @internalapi */\n    StateRegistry.prototype.dispose = function () {\n        var _this = this;\n        this.stateQueue.dispose();\n        this.listeners = [];\n        this.get().forEach(function (state) { return _this.get(state) && _this.deregister(state); });\n    };\n    /**\n     * Listen for a State Registry events\n     *\n     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n     *\n     * #### Example:\n     * ```js\n     * let allStates = registry.get();\n     *\n     * // Later, invoke deregisterFn() to remove the listener\n     * let deregisterFn = registry.onStatesChanged((event, states) => {\n     *   switch(event) {\n     *     case: 'registered':\n     *       states.forEach(state => allStates.push(state));\n     *       break;\n     *     case: 'deregistered':\n     *       states.forEach(state => {\n     *         let idx = allStates.indexOf(state);\n     *         if (idx !== -1) allStates.splice(idx, 1);\n     *       });\n     *       break;\n     *   }\n     * });\n     * ```\n     *\n     * @param listener a callback function invoked when the registered states changes.\n     *        The function receives two parameters, `event` and `state`.\n     *        See [[StateRegistryListener]]\n     * @return a function that deregisters the listener\n     */\n    StateRegistry.prototype.onStatesChanged = function (listener) {\n        this.listeners.push(listener);\n        return function deregisterListener() {\n            removeFrom(this.listeners)(listener);\n        }.bind(this);\n    };\n    /**\n     * Gets the implicit root state\n     *\n     * Gets the root of the state tree.\n     * The root state is implicitly created by UI-Router.\n     * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n     *\n     * @return the root [[StateObject]]\n     */\n    StateRegistry.prototype.root = function () {\n        return this._root;\n    };\n    /**\n     * Adds a state to the registry\n     *\n     * Registers a [[StateDeclaration]] or queues it for registration.\n     *\n     * Note: a state will be queued if the state's parent isn't yet registered.\n     *\n     * @param stateDefinition the definition of the state to register.\n     * @returns the internal [[StateObject]] object.\n     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n     *          If the state was only queued, then the object is not fully built.\n     */\n    StateRegistry.prototype.register = function (stateDefinition) {\n        return this.stateQueue.register(stateDefinition);\n    };\n    /** @hidden */\n    StateRegistry.prototype._deregisterTree = function (state) {\n        var _this = this;\n        var all = this.get().map(function (s) { return s.$$state(); });\n        var getChildren = function (states) {\n            var _children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });\n            return _children.length === 0 ? _children : _children.concat(getChildren(_children));\n        };\n        var children = getChildren([state]);\n        var deregistered = [state].concat(children).reverse();\n        deregistered.forEach(function (_state) {\n            var rulesApi = _this.router.urlService.rules;\n            // Remove URL rule\n            rulesApi\n                .rules()\n                .filter(propEq('state', _state))\n                .forEach(function (rule) { return rulesApi.removeRule(rule); });\n            // Remove state from registry\n            delete _this.states[_state.name];\n        });\n        return deregistered;\n    };\n    /**\n     * Removes a state from the registry\n     *\n     * This removes a state from the registry.\n     * If the state has children, they are are also removed from the registry.\n     *\n     * @param stateOrName the state's name or object representation\n     * @returns {StateObject[]} a list of removed states\n     */\n    StateRegistry.prototype.deregister = function (stateOrName) {\n        var _state = this.get(stateOrName);\n        if (!_state)\n            throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n        var deregisteredStates = this._deregisterTree(_state.$$state());\n        this.listeners.forEach(function (listener) { return listener('deregistered', deregisteredStates.map(function (s) { return s.self; })); });\n        return deregisteredStates;\n    };\n    StateRegistry.prototype.get = function (stateOrName, base) {\n        var _this = this;\n        if (arguments.length === 0)\n            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });\n        var found = this.matcher.find(stateOrName, base);\n        return (found && found.self) || null;\n    };\n    StateRegistry.prototype.decorator = function (name, func) {\n        return this.builder.builder(name, func);\n    };\n    return StateRegistry;\n}());\nexport { StateRegistry };\n//# sourceMappingURL=stateRegistry.js.map",
    "/** @publicapi @module transition */ /** */\nimport { TransitionHookPhase } from './interface';\nimport { defaults, noop, silentRejection } from '../common/common';\nimport { fnToString, maxLength } from '../common/strings';\nimport { isPromise } from '../common/predicates';\nimport { is, parse } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { Rejection } from './rejectFactory';\nimport { TargetState } from '../state/targetState';\nvar defaultOptions = {\n    current: noop,\n    transition: null,\n    traceData: {},\n    bind: null,\n};\n/** @hidden */\nvar TransitionHook = /** @class */ (function () {\n    function TransitionHook(transition, stateContext, registeredHook, options) {\n        var _this = this;\n        this.transition = transition;\n        this.stateContext = stateContext;\n        this.registeredHook = registeredHook;\n        this.options = options;\n        this.isSuperseded = function () { return _this.type.hookPhase === TransitionHookPhase.RUN && !_this.options.transition.isActive(); };\n        this.options = defaults(options, defaultOptions);\n        this.type = registeredHook.eventType;\n    }\n    /**\n     * Chains together an array of TransitionHooks.\n     *\n     * Given a list of [[TransitionHook]] objects, chains them together.\n     * Each hook is invoked after the previous one completes.\n     *\n     * #### Example:\n     * ```js\n     * var hooks: TransitionHook[] = getHooks();\n     * let promise: Promise<any> = TransitionHook.chain(hooks);\n     *\n     * promise.then(handleSuccess, handleError);\n     * ```\n     *\n     * @param hooks the list of hooks to chain together\n     * @param waitFor if provided, the chain is `.then()`'ed off this promise\n     * @returns a `Promise` for sequentially invoking the hooks (in order)\n     */\n    TransitionHook.chain = function (hooks, waitFor) {\n        // Chain the next hook off the previous\n        var createHookChainR = function (prev, nextHook) { return prev.then(function () { return nextHook.invokeHook(); }); };\n        return hooks.reduce(createHookChainR, waitFor || services.$q.when());\n    };\n    /**\n     * Invokes all the provided TransitionHooks, in order.\n     * Each hook's return value is checked.\n     * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n     * If no hook returns a promise, then all hooks are processed synchronously.\n     *\n     * @param hooks the list of TransitionHooks to invoke\n     * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n     *\n     * @returns a promise for the async result, or the result of the callback\n     */\n    TransitionHook.invokeHooks = function (hooks, doneCallback) {\n        for (var idx = 0; idx < hooks.length; idx++) {\n            var hookResult = hooks[idx].invokeHook();\n            if (isPromise(hookResult)) {\n                var remainingHooks = hooks.slice(idx + 1);\n                return TransitionHook.chain(remainingHooks, hookResult).then(doneCallback);\n            }\n        }\n        return doneCallback();\n    };\n    /**\n     * Run all TransitionHooks, ignoring their return value.\n     */\n    TransitionHook.runAllHooks = function (hooks) {\n        hooks.forEach(function (hook) { return hook.invokeHook(); });\n    };\n    TransitionHook.prototype.logError = function (err) {\n        this.transition.router.stateService.defaultErrorHandler()(err);\n    };\n    TransitionHook.prototype.invokeHook = function () {\n        var _this = this;\n        var hook = this.registeredHook;\n        if (hook._deregistered)\n            return;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent)\n            return notCurrent;\n        var options = this.options;\n        trace.traceHookInvocation(this, this.transition, options);\n        var invokeCallback = function () { return hook.callback.call(options.bind, _this.transition, _this.stateContext); };\n        var normalizeErr = function (err) { return Rejection.normalize(err).toPromise(); };\n        var handleError = function (err) { return hook.eventType.getErrorHandler(_this)(err); };\n        var handleResult = function (result) { return hook.eventType.getResultHandler(_this)(result); };\n        try {\n            var result = invokeCallback();\n            if (!this.type.synchronous && isPromise(result)) {\n                return result.catch(normalizeErr).then(handleResult, handleError);\n            }\n            else {\n                return handleResult(result);\n            }\n        }\n        catch (err) {\n            // If callback throws (synchronously)\n            return handleError(Rejection.normalize(err));\n        }\n        finally {\n            if (hook.invokeLimit && ++hook.invokeCount >= hook.invokeLimit) {\n                hook.deregister();\n            }\n        }\n    };\n    /**\n     * This method handles the return value of a Transition Hook.\n     *\n     * A hook can return false (cancel), a TargetState (redirect),\n     * or a promise (which may later resolve to false or a redirect)\n     *\n     * This also handles \"transition superseded\" -- when a new transition\n     * was started while the hook was still running\n     */\n    TransitionHook.prototype.handleHookResult = function (result) {\n        var _this = this;\n        var notCurrent = this.getNotCurrentRejection();\n        if (notCurrent)\n            return notCurrent;\n        // Hook returned a promise\n        if (isPromise(result)) {\n            // Wait for the promise, then reprocess with the resulting value\n            return result.then(function (val) { return _this.handleHookResult(val); });\n        }\n        trace.traceHookResult(result, this.transition, this.options);\n        // Hook returned false\n        if (result === false) {\n            // Abort this Transition\n            return Rejection.aborted('Hook aborted transition').toPromise();\n        }\n        var isTargetState = is(TargetState);\n        // hook returned a TargetState\n        if (isTargetState(result)) {\n            // Halt the current Transition and redirect (a new Transition) to the TargetState.\n            return Rejection.redirected(result).toPromise();\n        }\n    };\n    /**\n     * Return a Rejection promise if the transition is no longer current due\n     * to a stopped router (disposed), or a new transition has started and superseded this one.\n     */\n    TransitionHook.prototype.getNotCurrentRejection = function () {\n        var router = this.transition.router;\n        // The router is stopped\n        if (router._disposed) {\n            return Rejection.aborted(\"UIRouter instance #\" + router.$id + \" has been stopped (disposed)\").toPromise();\n        }\n        if (this.transition._aborted) {\n            return Rejection.aborted().toPromise();\n        }\n        // This transition is no longer current.\n        // Another transition started while this hook was still running.\n        if (this.isSuperseded()) {\n            // Abort this transition\n            return Rejection.superseded(this.options.current()).toPromise();\n        }\n    };\n    TransitionHook.prototype.toString = function () {\n        var _a = this, options = _a.options, registeredHook = _a.registeredHook;\n        var event = parse('traceData.hookType')(options) || 'internal', context = parse('traceData.context.state.name')(options) || parse('traceData.context')(options) || 'unknown', name = fnToString(registeredHook.callback);\n        return event + \" context: \" + context + \", \" + maxLength(200, name);\n    };\n    /**\n     * These GetResultHandler(s) are used by [[invokeHook]] below\n     * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n     */\n    TransitionHook.HANDLE_RESULT = function (hook) { return function (result) {\n        return hook.handleHookResult(result);\n    }; };\n    /**\n     * If the result is a promise rejection, log it.\n     * Otherwise, ignore the result.\n     */\n    TransitionHook.LOG_REJECTED_RESULT = function (hook) { return function (result) {\n        isPromise(result) && result.catch(function (err) { return hook.logError(Rejection.normalize(err)); });\n        return undefined;\n    }; };\n    /**\n     * These GetErrorHandler(s) are used by [[invokeHook]] below\n     * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n     */\n    TransitionHook.LOG_ERROR = function (hook) { return function (error) { return hook.logError(error); }; };\n    TransitionHook.REJECT_ERROR = function (hook) { return function (error) { return silentRejection(error); }; };\n    TransitionHook.THROW_ERROR = function (hook) { return function (error) {\n        throw error;\n    }; };\n    return TransitionHook;\n}());\nexport { TransitionHook };\n//# sourceMappingURL=transitionHook.js.map",
    "/** @publicapi @module transition */ /** */\nimport { isString, isFunction, Glob, extend, removeFrom, tail, values, identity, mapObj } from '../common';\nimport { // has or is using\nTransitionHookScope, } from './interface';\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state, criterion) {\n    var toMatch = isString(criterion) ? [criterion] : criterion;\n    function matchGlobs(_state) {\n        var globStrings = toMatch;\n        for (var i = 0; i < globStrings.length; i++) {\n            var glob = new Glob(globStrings[i]);\n            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var matchFn = (isFunction(toMatch) ? toMatch : matchGlobs);\n    return !!matchFn(state);\n}\n/**\n * @internalapi\n * The registration data for a registered transition hook\n */\nvar RegisteredHook = /** @class */ (function () {\n    function RegisteredHook(tranSvc, eventType, callback, matchCriteria, removeHookFromRegistry, options) {\n        if (options === void 0) { options = {}; }\n        this.tranSvc = tranSvc;\n        this.eventType = eventType;\n        this.callback = callback;\n        this.matchCriteria = matchCriteria;\n        this.removeHookFromRegistry = removeHookFromRegistry;\n        this.invokeCount = 0;\n        this._deregistered = false;\n        this.priority = options.priority || 0;\n        this.bind = options.bind || null;\n        this.invokeLimit = options.invokeLimit;\n    }\n    /**\n     * Gets the matching [[PathNode]]s\n     *\n     * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n     * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n     *\n     * Returning `null` is significant to distinguish between the default\n     * \"match-all criterion value\" of `true` compared to a `() => true` function,\n     * when the nodes is an empty array.\n     *\n     * This is useful to allow a transition match criteria of `entering: true`\n     * to still match a transition, even when `entering === []`.  Contrast that\n     * with `entering: (state) => true` which only matches when a state is actually\n     * being entered.\n     */\n    RegisteredHook.prototype._matchingNodes = function (nodes, criterion) {\n        if (criterion === true)\n            return nodes;\n        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });\n        return matching.length ? matching : null;\n    };\n    /**\n     * Gets the default match criteria (all `true`)\n     *\n     * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n     *\n     * ```js\n     * {\n     *   to: true,\n     *   from: true,\n     *   entering: true,\n     *   exiting: true,\n     *   retained: true,\n     * }\n     */\n    RegisteredHook.prototype._getDefaultMatchCriteria = function () {\n        return mapObj(this.tranSvc._pluginapi._getPathTypes(), function () { return true; });\n    };\n    /**\n     * Gets matching nodes as [[IMatchingNodes]]\n     *\n     * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n     *\n     * ```js\n     * let matches: IMatchingNodes = {\n     *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n     *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n     *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n     *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n     *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n     * };\n     * ```\n     */\n    RegisteredHook.prototype._getMatchingNodes = function (treeChanges) {\n        var _this = this;\n        var criteria = extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n        var paths = values(this.tranSvc._pluginapi._getPathTypes());\n        return paths.reduce(function (mn, pathtype) {\n            // STATE scope criteria matches against every node in the path.\n            // TRANSITION scope criteria matches against only the last node in the path\n            var isStateHook = pathtype.scope === TransitionHookScope.STATE;\n            var path = treeChanges[pathtype.name] || [];\n            var nodes = isStateHook ? path : [tail(path)];\n            mn[pathtype.name] = _this._matchingNodes(nodes, criteria[pathtype.name]);\n            return mn;\n        }, {});\n    };\n    /**\n     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n     *\n     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n     */\n    RegisteredHook.prototype.matches = function (treeChanges) {\n        var matches = this._getMatchingNodes(treeChanges);\n        // Check if all the criteria matched the TreeChanges object\n        var allMatched = values(matches).every(identity);\n        return allMatched ? matches : null;\n    };\n    RegisteredHook.prototype.deregister = function () {\n        this.removeHookFromRegistry(this);\n        this._deregistered = true;\n    };\n    return RegisteredHook;\n}());\nexport { RegisteredHook };\n/** @hidden Return a registration function of the requested type. */\nexport function makeEvent(registry, transitionService, eventType) {\n    // Create the object which holds the registered transition hooks.\n    var _registeredHooks = (registry._registeredHooks = registry._registeredHooks || {});\n    var hooks = (_registeredHooks[eventType.name] = []);\n    var removeHookFn = removeFrom(hooks);\n    // Create hook registration function on the IHookRegistry for the event\n    registry[eventType.name] = hookRegistrationFn;\n    function hookRegistrationFn(matchObject, callback, options) {\n        if (options === void 0) { options = {}; }\n        var registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, removeHookFn, options);\n        hooks.push(registeredHook);\n        return registeredHook.deregister.bind(registeredHook);\n    }\n    return hookRegistrationFn;\n}\n//# sourceMappingURL=hookRegistry.js.map",
    "/** @publicapi @module transition */ /** */\nimport { extend, assertPredicate, unnestR, identity } from '../common/common';\nimport { isArray } from '../common/predicates';\nimport { TransitionHookPhase, TransitionHookScope, } from './interface';\nimport { TransitionHook } from './transitionHook';\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nvar HookBuilder = /** @class */ (function () {\n    function HookBuilder(transition) {\n        this.transition = transition;\n    }\n    HookBuilder.prototype.buildHooksForPhase = function (phase) {\n        var _this = this;\n        var $transitions = this.transition.router.transitionService;\n        return $transitions._pluginapi\n            ._getEvents(phase)\n            .map(function (type) { return _this.buildHooks(type); })\n            .reduce(unnestR, [])\n            .filter(identity);\n    };\n    /**\n     * Returns an array of newly built TransitionHook objects.\n     *\n     * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n     * - For each of the [[PathNode]]s, creates a TransitionHook\n     *\n     * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n     */\n    HookBuilder.prototype.buildHooks = function (hookType) {\n        var transition = this.transition;\n        var treeChanges = transition.treeChanges();\n        // Find all the matching registered hooks for a given hook type\n        var matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n        if (!matchingHooks)\n            return [];\n        var baseHookOptions = {\n            transition: transition,\n            current: transition.options().current,\n        };\n        var makeTransitionHooks = function (hook) {\n            // Fetch the Nodes that caused this hook to match.\n            var matches = hook.matches(treeChanges);\n            // Select the PathNode[] that will be used as TransitionHook context objects\n            var matchingNodes = matches[hookType.criteriaMatchPath.name];\n            // Return an array of HookTuples\n            return matchingNodes.map(function (node) {\n                var _options = extend({\n                    bind: hook.bind,\n                    traceData: { hookType: hookType.name, context: node },\n                }, baseHookOptions);\n                var state = hookType.criteriaMatchPath.scope === TransitionHookScope.STATE ? node.state.self : null;\n                var transitionHook = new TransitionHook(transition, state, hook, _options);\n                return { hook: hook, node: node, transitionHook: transitionHook };\n            });\n        };\n        return matchingHooks\n            .map(makeTransitionHooks)\n            .reduce(unnestR, [])\n            .sort(tupleSort(hookType.reverseSort))\n            .map(function (tuple) { return tuple.transitionHook; });\n    };\n    /**\n     * Finds all RegisteredHooks from:\n     * - The Transition object instance hook registry\n     * - The TransitionService ($transitions) global hook registry\n     *\n     * which matched:\n     * - the eventType\n     * - the matchCriteria (to, from, exiting, retained, entering)\n     *\n     * @returns an array of matched [[RegisteredHook]]s\n     */\n    HookBuilder.prototype.getMatchingHooks = function (hookType, treeChanges) {\n        var isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n        // Instance and Global hook registries\n        var $transitions = this.transition.router.transitionService;\n        var registries = isCreate ? [$transitions] : [this.transition, $transitions];\n        return registries\n            .map(function (reg) { return reg.getHooks(hookType.name); }) // Get named hooks from registries\n            .filter(assertPredicate(isArray, \"broken event named: \" + hookType.name)) // Sanity check\n            .reduce(unnestR, []) // Un-nest RegisteredHook[][] to RegisteredHook[] array\n            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria\n    };\n    return HookBuilder;\n}());\nexport { HookBuilder };\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort) {\n    if (reverseDepthSort === void 0) { reverseDepthSort = false; }\n    return function nodeDepthThenPriority(l, r) {\n        var factor = reverseDepthSort ? -1 : 1;\n        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n    };\n}\n//# sourceMappingURL=hookBuilder.js.map",
    "/** @publicapi @module transition */ /** */\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { stringify } from '../common/strings';\nimport { map, find, extend, mergeR, tail, omit, arrayTuples, unnestR, identity, anyTrueR } from '../common/common';\nimport { isObject, isUndefined } from '../common/predicates';\nimport { prop, propEq, val, not, is } from '../common/hof';\nimport { TransitionHookPhase, } from './interface'; // has or is using\nimport { TransitionHook } from './transitionHook';\nimport { matchState, makeEvent } from './hookRegistry';\nimport { HookBuilder } from './hookBuilder';\nimport { PathUtils } from '../path/pathUtils';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { Rejection } from './rejectFactory';\nimport { flattenR, uniqR } from '../common';\n/** @hidden */\nvar stateSelf = prop('self');\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nvar Transition = /** @class */ (function () {\n    /**\n     * Creates a new Transition object.\n     *\n     * If the target state is not valid, an error is thrown.\n     *\n     * @internalapi\n     *\n     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n     *        encapsulates the \"from state\".\n     * @param targetState The target state and parameters being transitioned to (also, the transition options)\n     * @param router The [[UIRouter]] instance\n     */\n    function Transition(fromPath, targetState, router) {\n        var _this = this;\n        /** @hidden */\n        this._deferred = services.$q.defer();\n        /**\n         * This promise is resolved or rejected based on the outcome of the Transition.\n         *\n         * When the transition is successful, the promise is resolved\n         * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n         */\n        this.promise = this._deferred.promise;\n        /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */\n        this._registeredHooks = {};\n        /** @hidden */\n        this._hookBuilder = new HookBuilder(this);\n        /** Checks if this transition is currently active/running. */\n        this.isActive = function () { return _this.router.globals.transition === _this; };\n        this.router = router;\n        this._targetState = targetState;\n        if (!targetState.valid()) {\n            throw new Error(targetState.error());\n        }\n        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n        this._options = extend({ current: val(this) }, targetState.options());\n        this.$id = router.transitionService._transitionCount++;\n        var toPath = PathUtils.buildToPath(fromPath, targetState);\n        this._treeChanges = PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n        this.createTransitionHookRegFns();\n        var onCreateHooks = this._hookBuilder.buildHooksForPhase(TransitionHookPhase.CREATE);\n        TransitionHook.invokeHooks(onCreateHooks, function () { return null; });\n        this.applyViewConfigs(router);\n    }\n    /** @hidden */\n    Transition.prototype.onBefore = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onStart = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onExit = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onRetain = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onEnter = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onFinish = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onSuccess = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    Transition.prototype.onError = function (criteria, callback, options) {\n        return;\n    };\n    /** @hidden\n     * Creates the transition-level hook registration functions\n     * (which can then be used to register hooks)\n     */\n    Transition.prototype.createTransitionHookRegFns = function () {\n        var _this = this;\n        this.router.transitionService._pluginapi\n            ._getEvents()\n            .filter(function (type) { return type.hookPhase !== TransitionHookPhase.CREATE; })\n            .forEach(function (type) { return makeEvent(_this, _this.router.transitionService, type); });\n    };\n    /** @internalapi */\n    Transition.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    Transition.prototype.applyViewConfigs = function (router) {\n        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });\n        PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal from [State] object\n     */\n    Transition.prototype.$from = function () {\n        return tail(this._treeChanges.from).state;\n    };\n    /**\n     * @internalapi\n     *\n     * @returns the internal to [State] object\n     */\n    Transition.prototype.$to = function () {\n        return tail(this._treeChanges.to).state;\n    };\n    /**\n     * Returns the \"from state\"\n     *\n     * Returns the state that the transition is coming *from*.\n     *\n     * @returns The state declaration object for the Transition's (\"from state\").\n     */\n    Transition.prototype.from = function () {\n        return this.$from().self;\n    };\n    /**\n     * Returns the \"to state\"\n     *\n     * Returns the state that the transition is going *to*.\n     *\n     * @returns The state declaration object for the Transition's target state (\"to state\").\n     */\n    Transition.prototype.to = function () {\n        return this.$to().self;\n    };\n    /**\n     * Gets the Target State\n     *\n     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n     *\n     * @returns the [[TargetState]] of this Transition\n     */\n    Transition.prototype.targetState = function () {\n        return this._targetState;\n    };\n    /**\n     * Determines whether two transitions are equivalent.\n     * @deprecated\n     */\n    Transition.prototype.is = function (compare) {\n        if (compare instanceof Transition) {\n            // TODO: Also compare parameters\n            return this.is({ to: compare.$to().name, from: compare.$from().name });\n        }\n        return !((compare.to && !matchState(this.$to(), compare.to)) ||\n            (compare.from && !matchState(this.$from(), compare.from)));\n    };\n    Transition.prototype.params = function (pathname) {\n        if (pathname === void 0) { pathname = 'to'; }\n        return Object.freeze(this._treeChanges[pathname].map(prop('paramValues')).reduce(mergeR, {}));\n    };\n    Transition.prototype.paramsChanged = function () {\n        var fromParams = this.params('from');\n        var toParams = this.params('to');\n        // All the parameters declared on both the \"to\" and \"from\" paths\n        var allParamDescriptors = []\n            .concat(this._treeChanges.to)\n            .concat(this._treeChanges.from)\n            .map(function (pathNode) { return pathNode.paramSchema; })\n            .reduce(flattenR, [])\n            .reduce(uniqR, []);\n        var changedParamDescriptors = Param.changed(allParamDescriptors, fromParams, toParams);\n        return changedParamDescriptors.reduce(function (changedValues, descriptor) {\n            changedValues[descriptor.id] = toParams[descriptor.id];\n            return changedValues;\n        }, {});\n    };\n    /**\n     * Creates a [[UIInjector]] Dependency Injector\n     *\n     * Returns a Dependency Injector for the Transition's target state (to state).\n     * The injector provides resolve values which the target state has access to.\n     *\n     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n     *\n     * #### Example:\n     * ```js\n     * .onEnter({ entering: 'myState' }, trans => {\n     *   var myResolveValue = trans.injector().get('myResolve');\n     *   // Inject a global service from the global/native injector (if it exists)\n     *   var MyService = trans.injector().get('MyService');\n     * })\n     * ```\n     *\n     * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n     * You can use [[UIInjector.getAsync]] to get a promise for the data.\n     * #### Example:\n     * ```js\n     * .onBefore({}, trans => {\n     *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n     *     return myResolveValue !== 'ABORT';\n     *   });\n     * });\n     * ```\n     *\n     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n     * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n     * #### Example:\n     * ```js\n     * .onEnter({ to: 'foo.bar' }, trans => {\n     *   // returns result of `foo` state's `myResolve` resolve\n     *   // even though `foo.bar` also has a `myResolve` resolve\n     *   var fooData = trans.injector('foo').get('myResolve');\n     * });\n     * ```\n     *\n     * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n     * The resolve data from the `from` path will be returned.\n     * #### Example:\n     * ```js\n     * .onExit({ exiting: 'foo.bar' }, trans => {\n     *   // Gets the resolve value of `myResolve` from the state being exited\n     *   var fooData = trans.injector(null, 'from').get('myResolve');\n     * });\n     * ```\n     *\n     *\n     * @param state Limits the resolves provided to only the resolves the provided state has access to.\n     * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n     *\n     * @returns a [[UIInjector]]\n     */\n    Transition.prototype.injector = function (state, pathName) {\n        if (pathName === void 0) { pathName = 'to'; }\n        var path = this._treeChanges[pathName];\n        if (state)\n            path = PathUtils.subPath(path, function (node) { return node.state === state || node.state.name === state; });\n        return new ResolveContext(path).injector();\n    };\n    /**\n     * Gets all available resolve tokens (keys)\n     *\n     * This method can be used in conjunction with [[injector]] to inspect the resolve values\n     * available to the Transition.\n     *\n     * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n     * in the Transition's [[TreeChanges.to]] path.\n     *\n     * #### Example:\n     * This example logs all resolve values\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n     * ```\n     *\n     * #### Example:\n     * This example creates promises for each resolve value.\n     * This triggers fetches of resolves (if any have not yet been fetched).\n     * When all promises have all settled, it logs the resolve values.\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * let promise = tokens.map(token => trans.injector().getAsync(token));\n     * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n     * ```\n     *\n     * Note: Angular 1 users whould use `$q.all()`\n     *\n     * @param pathname resolve context's path name (e.g., `to` or `from`)\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    Transition.prototype.getResolveTokens = function (pathname) {\n        if (pathname === void 0) { pathname = 'to'; }\n        return new ResolveContext(this._treeChanges[pathname]).getTokens();\n    };\n    /**\n     * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n     *\n     * Allows a transition hook to dynamically add a Resolvable to this Transition.\n     *\n     * Use the [[Transition.injector]] to retrieve the resolved data in subsequent hooks ([[UIInjector.get]]).\n     *\n     * If a `state` argument is provided, the Resolvable is processed when that state is being entered.\n     * If no `state` is provided then the root state is used.\n     * If the given `state` has already been entered, the Resolvable is processed when any child state is entered.\n     * If no child states will be entered, the Resolvable is processed during the `onFinish` phase of the Transition.\n     *\n     * The `state` argument also scopes the resolved data.\n     * The resolved data is available from the injector for that `state` and any children states.\n     *\n     * #### Example:\n     * ```js\n     * transitionService.onBefore({}, transition => {\n     *   transition.addResolvable({\n     *     token: 'myResolve',\n     *     deps: ['MyService'],\n     *     resolveFn: myService => myService.getData()\n     *   });\n     * });\n     * ```\n     *\n     * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n     */\n    Transition.prototype.addResolvable = function (resolvable, state) {\n        if (state === void 0) { state = ''; }\n        resolvable = is(Resolvable)(resolvable) ? resolvable : new Resolvable(resolvable);\n        var stateName = typeof state === 'string' ? state : state.name;\n        var topath = this._treeChanges.to;\n        var targetNode = find(topath, function (node) { return node.state.name === stateName; });\n        var resolveContext = new ResolveContext(topath);\n        resolveContext.addResolvables([resolvable], targetNode.state);\n    };\n    /**\n     * Gets the transition from which this transition was redirected.\n     *\n     * If the current transition is a redirect, this method returns the transition that was redirected.\n     *\n     * #### Example:\n     * ```js\n     * let transitionA = $state.go('A').transition\n     * transitionA.onStart({}, () => $state.target('B'));\n     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n     *   trans.to().name === 'B'; // true\n     *   trans.redirectedFrom() === transitionA; // true\n     * });\n     * ```\n     *\n     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n     */\n    Transition.prototype.redirectedFrom = function () {\n        return this._options.redirectedFrom || null;\n    };\n    /**\n     * Gets the original transition in a redirect chain\n     *\n     * A transition might belong to a long chain of multiple redirects.\n     * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n     *\n     * #### Example:\n     * ```js\n     * // states\n     * registry.register({ name: 'A', redirectTo: 'B' });\n     * registry.register({ name: 'B', redirectTo: 'C' });\n     * registry.register({ name: 'C', redirectTo: 'D' });\n     * registry.register({ name: 'D' });\n     *\n     * let transitionA = $state.go('A').transition\n     *\n     * $transitions.onSuccess({ to: 'D' }, (trans) => {\n     *   trans.to().name === 'D'; // true\n     *   trans.redirectedFrom().to().name === 'C'; // true\n     *   trans.originalTransition() === transitionA; // true\n     *   trans.originalTransition().to().name === 'A'; // true\n     * });\n     * ```\n     *\n     * @returns The original Transition that started a redirect chain\n     */\n    Transition.prototype.originalTransition = function () {\n        var rf = this.redirectedFrom();\n        return (rf && rf.originalTransition()) || this;\n    };\n    /**\n     * Get the transition options\n     *\n     * @returns the options for this Transition.\n     */\n    Transition.prototype.options = function () {\n        return this._options;\n    };\n    /**\n     * Gets the states being entered.\n     *\n     * @returns an array of states that will be entered during this transition.\n     */\n    Transition.prototype.entering = function () {\n        return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n    };\n    /**\n     * Gets the states being exited.\n     *\n     * @returns an array of states that will be exited during this transition.\n     */\n    Transition.prototype.exiting = function () {\n        return map(this._treeChanges.exiting, prop('state'))\n            .map(stateSelf)\n            .reverse();\n    };\n    /**\n     * Gets the states being retained.\n     *\n     * @returns an array of states that are already entered from a previous Transition, that will not be\n     *    exited during this Transition\n     */\n    Transition.prototype.retained = function () {\n        return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n    };\n    /**\n     * Get the [[ViewConfig]]s associated with this Transition\n     *\n     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n     *\n     * @param pathname the name of the path to fetch views for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n     *\n     * @returns a list of ViewConfig objects for the given path.\n     */\n    Transition.prototype.views = function (pathname, state) {\n        if (pathname === void 0) { pathname = 'entering'; }\n        var path = this._treeChanges[pathname];\n        path = !state ? path : path.filter(propEq('state', state));\n        return path\n            .map(prop('views'))\n            .filter(identity)\n            .reduce(unnestR, []);\n    };\n    Transition.prototype.treeChanges = function (pathname) {\n        return pathname ? this._treeChanges[pathname] : this._treeChanges;\n    };\n    /**\n     * Creates a new transition that is a redirection of the current one.\n     *\n     * This transition can be returned from a [[TransitionService]] hook to\n     * redirect a transition to a new state and/or set of parameters.\n     *\n     * @internalapi\n     *\n     * @returns Returns a new [[Transition]] instance.\n     */\n    Transition.prototype.redirect = function (targetState) {\n        var redirects = 1, trans = this;\n        // tslint:disable-next-line:no-conditional-assignment\n        while ((trans = trans.redirectedFrom()) != null) {\n            if (++redirects > 20)\n                throw new Error(\"Too many consecutive Transition redirects (20+)\");\n        }\n        var redirectOpts = { redirectedFrom: this, source: 'redirect' };\n        // If the original transition was caused by URL sync, then use { location: 'replace' }\n        // on the new transition (unless the target state explicitly specifies location: false).\n        // This causes the original url to be replaced with the url for the redirect target\n        // so the original url disappears from the browser history.\n        if (this.options().source === 'url' && targetState.options().location !== false) {\n            redirectOpts.location = 'replace';\n        }\n        var newOptions = extend({}, this.options(), targetState.options(), redirectOpts);\n        targetState = targetState.withOptions(newOptions, true);\n        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n        var originalEnteringNodes = this._treeChanges.entering;\n        var redirectEnteringNodes = newTransition._treeChanges.entering;\n        // --- Re-use resolve data from original transition ---\n        // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n        // (because of the redirect), the resolves fetched by the original transition are still valid in the\n        // redirected transition.\n        //\n        // This allows you to define a redirect on a parent state which depends on an async resolve value.\n        // You can wait for the resolve, then redirect to a child state based on the result.\n        // The redirected transition does not have to re-fetch the resolve.\n        // ---------------------------------------------------------\n        var nodeIsReloading = function (reloadState) { return function (node) {\n            return reloadState && node.state.includes[reloadState.name];\n        }; };\n        // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n        var matchingEnteringNodes = PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, PathUtils.nonDynamicParams).filter(not(nodeIsReloading(targetState.options().reloadState)));\n        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n        matchingEnteringNodes.forEach(function (node, idx) {\n            node.resolvables = originalEnteringNodes[idx].resolvables;\n        });\n        return newTransition;\n    };\n    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n    Transition.prototype._changedParams = function () {\n        var tc = this._treeChanges;\n        /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n        // If user explicitly wants a reload\n        if (this._options.reload)\n            return undefined;\n        // If any states are exiting or entering\n        if (tc.exiting.length || tc.entering.length)\n            return undefined;\n        // If to/from path lengths differ\n        if (tc.to.length !== tc.from.length)\n            return undefined;\n        // If the to/from paths are different\n        var pathsDiffer = arrayTuples(tc.to, tc.from)\n            .map(function (tuple) { return tuple[0].state !== tuple[1].state; })\n            .reduce(anyTrueR, false);\n        if (pathsDiffer)\n            return undefined;\n        // Find any parameter values that differ\n        var nodeSchemas = tc.to.map(function (node) { return node.paramSchema; });\n        var _a = [tc.to, tc.from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _a[0], fromValues = _a[1];\n        var tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n        return tuples.map(function (_a) {\n            var schema = _a[0], toVals = _a[1], fromVals = _a[2];\n            return Param.changed(schema, toVals, fromVals);\n        }).reduce(unnestR, []);\n    };\n    /**\n     * Returns true if the transition is dynamic.\n     *\n     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n     *\n     * @returns true if the Transition is dynamic\n     */\n    Transition.prototype.dynamic = function () {\n        var changes = this._changedParams();\n        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(anyTrueR, false);\n    };\n    /**\n     * Returns true if the transition is ignored.\n     *\n     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n     *\n     * @returns true if the Transition is ignored.\n     */\n    Transition.prototype.ignored = function () {\n        return !!this._ignoredReason();\n    };\n    /** @hidden */\n    Transition.prototype._ignoredReason = function () {\n        var pending = this.router.globals.transition;\n        var reloadState = this._options.reloadState;\n        var same = function (pathA, pathB) {\n            if (pathA.length !== pathB.length)\n                return false;\n            var matching = PathUtils.matching(pathA, pathB);\n            return pathA.length === matching.filter(function (node) { return !reloadState || !node.state.includes[reloadState.name]; }).length;\n        };\n        var newTC = this.treeChanges();\n        var pendTC = pending && pending.treeChanges();\n        if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting))\n            return 'SameAsPending';\n        if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to))\n            return 'SameAsCurrent';\n    };\n    /**\n     * Runs the transition\n     *\n     * This method is generally called from the [[StateService.transitionTo]]\n     *\n     * @internalapi\n     *\n     * @returns a promise for a successful transition.\n     */\n    Transition.prototype.run = function () {\n        var _this = this;\n        var runAllHooks = TransitionHook.runAllHooks;\n        // Gets transition hooks array for the given phase\n        var getHooksFor = function (phase) { return _this._hookBuilder.buildHooksForPhase(phase); };\n        // When the chain is complete, then resolve or reject the deferred\n        var transitionSuccess = function () {\n            trace.traceSuccess(_this.$to(), _this);\n            _this.success = true;\n            _this._deferred.resolve(_this.to());\n            runAllHooks(getHooksFor(TransitionHookPhase.SUCCESS));\n        };\n        var transitionError = function (reason) {\n            trace.traceError(reason, _this);\n            _this.success = false;\n            _this._deferred.reject(reason);\n            _this._error = reason;\n            runAllHooks(getHooksFor(TransitionHookPhase.ERROR));\n        };\n        var runTransition = function () {\n            // Wait to build the RUN hook chain until the BEFORE hooks are done\n            // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n            var allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n            var done = function () { return services.$q.when(undefined); };\n            return TransitionHook.invokeHooks(allRunHooks, done);\n        };\n        var startTransition = function () {\n            var globals = _this.router.globals;\n            globals.lastStartedTransitionId = _this.$id;\n            globals.transition = _this;\n            globals.transitionHistory.enqueue(_this);\n            trace.traceTransitionStart(_this);\n            return services.$q.when(undefined);\n        };\n        var allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n        TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n            .then(runTransition)\n            .then(transitionSuccess, transitionError);\n        return this.promise;\n    };\n    /**\n     * Checks if the Transition is valid\n     *\n     * @returns true if the Transition is valid\n     */\n    Transition.prototype.valid = function () {\n        return !this.error() || this.success !== undefined;\n    };\n    /**\n     * Aborts this transition\n     *\n     * Imperative API to abort a Transition.\n     * This only applies to Transitions that are not yet complete.\n     */\n    Transition.prototype.abort = function () {\n        // Do not set flag if the transition is already complete\n        if (isUndefined(this.success)) {\n            this._aborted = true;\n        }\n    };\n    /**\n     * The Transition error reason.\n     *\n     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n     *\n     * @returns a transition rejection explaining why the transition is invalid, or the reason the transition failed.\n     */\n    Transition.prototype.error = function () {\n        var state = this.$to();\n        if (state.self.abstract) {\n            return Rejection.invalid(\"Cannot transition to abstract state '\" + state.name + \"'\");\n        }\n        var paramDefs = state.parameters();\n        var values = this.params();\n        var invalidParams = paramDefs.filter(function (param) { return !param.validates(values[param.id]); });\n        if (invalidParams.length) {\n            var invalidValues = invalidParams.map(function (param) { return \"[\" + param.id + \":\" + stringify(values[param.id]) + \"]\"; }).join(', ');\n            var detail = \"The following parameter values are not valid for state '\" + state.name + \"': \" + invalidValues;\n            return Rejection.invalid(detail);\n        }\n        if (this.success === false)\n            return this._error;\n    };\n    /**\n     * A string representation of the Transition\n     *\n     * @returns A string representation of the Transition\n     */\n    Transition.prototype.toString = function () {\n        var fromStateOrName = this.from();\n        var toStateOrName = this.to();\n        var avoidEmptyHash = function (params) {\n            return params['#'] !== null && params['#'] !== undefined ? params : omit(params, ['#']);\n        };\n        // (X) means the to state is invalid.\n        var id = this.$id, from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = stringify(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))), toValid = this.valid() ? '' : '(X) ', to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = stringify(avoidEmptyHash(this.params()));\n        return \"Transition#\" + id + \"( '\" + from + \"'\" + fromParams + \" -> \" + toValid + \"'\" + to + \"'\" + toParams + \" )\";\n    };\n    /** @hidden */\n    Transition.diToken = Transition;\n    return Transition;\n}());\nexport { Transition };\n//# sourceMappingURL=transition.js.map",
    "/** @publicapi @module url */ /** */\nimport { map, inherit, identity, unnest, tail, find, allTrueR, unnestR, arrayTuples } from '../common/common';\nimport { prop, propEq } from '../common/hof';\nimport { isArray, isString, isDefined } from '../common/predicates';\nimport { Param, DefType } from '../params/param';\nimport { joinNeighborsR, splitOnDelim } from '../common/strings';\nimport { defaults } from '../common';\n/** @hidden */\nfunction quoteRegExp(str, param) {\n    var surroundPattern = ['', ''], result = str.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, '\\\\$&');\n    if (!param)\n        return result;\n    switch (param.squash) {\n        case false:\n            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];\n            break;\n        case true:\n            result = result.replace(/\\/$/, '');\n            surroundPattern = ['(?:/(', ')|/)?'];\n            break;\n        default:\n            surroundPattern = [\"(\" + param.squash + \"|\", ')?'];\n            break;\n    }\n    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n/** @hidden */\nvar memoizeTo = function (obj, _prop, fn) { return (obj[_prop] = obj[_prop] || fn()); };\n/** @hidden */\nvar splitOnSlash = splitOnDelim('/');\n/** @hidden */\nvar defaultConfig = {\n    state: { params: {} },\n    strict: true,\n    caseInsensitive: true,\n};\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nvar UrlMatcher = /** @class */ (function () {\n    /**\n     * @param pattern The pattern to compile into a matcher.\n     * @param paramTypes The [[ParamTypes]] registry\n     * @param paramFactory A [[ParamFactory]] object\n     * @param config  A [[UrlMatcherCompileConfig]] configuration object\n     */\n    function UrlMatcher(pattern, paramTypes, paramFactory, config) {\n        var _this = this;\n        /** @hidden */\n        this._cache = { path: [this] };\n        /** @hidden */\n        this._children = [];\n        /** @hidden */\n        this._params = [];\n        /** @hidden */\n        this._segments = [];\n        /** @hidden */\n        this._compiled = [];\n        this.config = config = defaults(config, defaultConfig);\n        this.pattern = pattern;\n        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n        //   '*' name\n        //   ':' name\n        //   '{' name '}'\n        //   '{' name ':' regexp '}'\n        // The regular expression is somewhat complicated due to the need to allow curly braces\n        // inside the regular expression. The placeholder regexp breaks down as follows:\n        //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n        //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n        //    [^{}\\\\]+                       - anything other than curly braces or backslash\n        //    \\\\.                            - a backslash escape\n        //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n        var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n        var searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n        var patterns = [];\n        var last = 0;\n        var matchArray;\n        var checkParamErrors = function (id) {\n            if (!UrlMatcher.nameValidator.test(id))\n                throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n            if (find(_this._params, propEq('id', id)))\n                throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n        };\n        // Split into static segments separated by path parameter placeholders.\n        // The number of segments is always 1 more than the number of parameters.\n        var matchDetails = function (m, isSearch) {\n            // IE[78] returns '' for unmatched groups instead of null\n            var id = m[2] || m[3];\n            var regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n            var makeRegexpType = function (str) {\n                return inherit(paramTypes.type(isSearch ? 'query' : 'path'), {\n                    pattern: new RegExp(str, _this.config.caseInsensitive ? 'i' : undefined),\n                });\n            };\n            return {\n                id: id,\n                regexp: regexp,\n                segment: pattern.substring(last, m.index),\n                type: !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp),\n            };\n        };\n        var details;\n        var segment;\n        // tslint:disable-next-line:no-conditional-assignment\n        while ((matchArray = placeholder.exec(pattern))) {\n            details = matchDetails(matchArray, false);\n            if (details.segment.indexOf('?') >= 0)\n                break; // we're into the search part\n            checkParamErrors(details.id);\n            this._params.push(paramFactory.fromPath(details.id, details.type, config.state));\n            this._segments.push(details.segment);\n            patterns.push([details.segment, tail(this._params)]);\n            last = placeholder.lastIndex;\n        }\n        segment = pattern.substring(last);\n        // Find any search parameter names and remove them from the last segment\n        var i = segment.indexOf('?');\n        if (i >= 0) {\n            var search = segment.substring(i);\n            segment = segment.substring(0, i);\n            if (search.length > 0) {\n                last = 0;\n                // tslint:disable-next-line:no-conditional-assignment\n                while ((matchArray = searchPlaceholder.exec(search))) {\n                    details = matchDetails(matchArray, true);\n                    checkParamErrors(details.id);\n                    this._params.push(paramFactory.fromSearch(details.id, details.type, config.state));\n                    last = placeholder.lastIndex;\n                    // check if ?&\n                }\n            }\n        }\n        this._segments.push(segment);\n        this._compiled = patterns.map(function (_pattern) { return quoteRegExp.apply(null, _pattern); }).concat(quoteRegExp(segment));\n    }\n    /** @hidden */\n    UrlMatcher.encodeDashes = function (str) {\n        // Replace dashes with encoded \"\\-\"\n        return encodeURIComponent(str).replace(/-/g, function (c) {\n            return \"%5C%\" + c\n                .charCodeAt(0)\n                .toString(16)\n                .toUpperCase();\n        });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n    UrlMatcher.pathSegmentsAndParams = function (matcher) {\n        var staticSegments = matcher._segments;\n        var pathParams = matcher._params.filter(function (p) { return p.location === DefType.PATH; });\n        return arrayTuples(staticSegments, pathParams.concat(undefined))\n            .reduce(unnestR, [])\n            .filter(function (x) { return x !== '' && isDefined(x); });\n    };\n    /** @hidden Given a matcher, return an array with the matcher's query params */\n    UrlMatcher.queryParams = function (matcher) {\n        return matcher._params.filter(function (p) { return p.location === DefType.SEARCH; });\n    };\n    /**\n     * Compare two UrlMatchers\n     *\n     * This comparison function converts a UrlMatcher into static and dynamic path segments.\n     * Each static path segment is a static string between a path separator (slash character).\n     * Each dynamic segment is a path parameter.\n     *\n     * The comparison function sorts static segments before dynamic ones.\n     */\n    UrlMatcher.compare = function (a, b) {\n        /**\n         * Turn a UrlMatcher and all its parent matchers into an array\n         * of slash literals '/', string literals, and Param objects\n         *\n         * This example matcher matches strings like \"/foo/:param/tail\":\n         * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n         * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n         *\n         * Caches the result as `matcher._cache.segments`\n         */\n        var segments = function (matcher) {\n            return (matcher._cache.segments =\n                matcher._cache.segments ||\n                    matcher._cache.path\n                        .map(UrlMatcher.pathSegmentsAndParams)\n                        .reduce(unnestR, [])\n                        .reduce(joinNeighborsR, [])\n                        .map(function (x) { return (isString(x) ? splitOnSlash(x) : x); })\n                        .reduce(unnestR, []));\n        };\n        /**\n         * Gets the sort weight for each segment of a UrlMatcher\n         *\n         * Caches the result as `matcher._cache.weights`\n         */\n        var weights = function (matcher) {\n            return (matcher._cache.weights =\n                matcher._cache.weights ||\n                    segments(matcher).map(function (segment) {\n                        // Sort slashes first, then static strings, the Params\n                        if (segment === '/')\n                            return 1;\n                        if (isString(segment))\n                            return 2;\n                        if (segment instanceof Param)\n                            return 3;\n                    }));\n        };\n        /**\n         * Pads shorter array in-place (mutates)\n         */\n        var padArrays = function (l, r, padVal) {\n            var len = Math.max(l.length, r.length);\n            while (l.length < len)\n                l.push(padVal);\n            while (r.length < len)\n                r.push(padVal);\n        };\n        var weightsA = weights(a), weightsB = weights(b);\n        padArrays(weightsA, weightsB, 0);\n        var _pairs = arrayTuples(weightsA, weightsB);\n        var cmp, i;\n        for (i = 0; i < _pairs.length; i++) {\n            cmp = _pairs[i][0] - _pairs[i][1];\n            if (cmp !== 0)\n                return cmp;\n        }\n        return 0;\n    };\n    /**\n     * Creates a new concatenated UrlMatcher\n     *\n     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n     *\n     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n     */\n    UrlMatcher.prototype.append = function (url) {\n        this._children.push(url);\n        url._cache = {\n            path: this._cache.path.concat(url),\n            parent: this,\n            pattern: null,\n        };\n        return url;\n    };\n    /** @hidden */\n    UrlMatcher.prototype.isRoot = function () {\n        return this._cache.path[0] === this;\n    };\n    /** Returns the input pattern string */\n    UrlMatcher.prototype.toString = function () {\n        return this.pattern;\n    };\n    /**\n     * Tests the specified url/path against this matcher.\n     *\n     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n     * parameter values.  Returns null if the path does not match.\n     *\n     * The returned object contains the values\n     * of any search parameters that are mentioned in the pattern, but their value may be null if\n     * they are not present in `search`. This means that search parameters are always treated\n     * as optional.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n     *   x: '1', q: 'hello'\n     * });\n     * // returns { id: 'bob', q: 'hello', r: null }\n     * ```\n     *\n     * @param path    The URL path to match, e.g. `$location.path()`.\n     * @param search  URL search parameters, e.g. `$location.search()`.\n     * @param hash    URL hash e.g. `$location.hash()`.\n     * @param options\n     *\n     * @returns The captured parameter values.\n     */\n    UrlMatcher.prototype.exec = function (path, search, hash, options) {\n        var _this = this;\n        if (search === void 0) { search = {}; }\n        if (options === void 0) { options = {}; }\n        var match = memoizeTo(this._cache, 'pattern', function () {\n            return new RegExp([\n                '^',\n                unnest(_this._cache.path.map(prop('_compiled'))).join(''),\n                _this.config.strict === false ? '/?' : '',\n                '$',\n            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);\n        }).exec(path);\n        if (!match)\n            return null;\n        // options = defaults(options, { isolate: false });\n        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};\n        if (nPathSegments !== match.length - 1)\n            throw new Error(\"Unbalanced capture group in route '\" + this.pattern + \"'\");\n        function decodePathArray(paramVal) {\n            var reverseString = function (str) {\n                return str\n                    .split('')\n                    .reverse()\n                    .join('');\n            };\n            var unquoteDashes = function (str) { return str.replace(/\\\\-/g, '-'); };\n            var split = reverseString(paramVal).split(/-(?!\\\\)/);\n            var allReversed = map(split, reverseString);\n            return map(allReversed, unquoteDashes).reverse();\n        }\n        for (var i = 0; i < nPathSegments; i++) {\n            var param = pathParams[i];\n            var value = match[i + 1];\n            // if the param value matches a pre-replace pair, replace the value before decoding.\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (value && param.array === true)\n                value = decodePathArray(value);\n            if (isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        }\n        searchParams.forEach(function (param) {\n            var value = search[param.id];\n            for (var j = 0; j < param.replace.length; j++) {\n                if (param.replace[j].from === value)\n                    value = param.replace[j].to;\n            }\n            if (isDefined(value))\n                value = param.type.decode(value);\n            values[param.id] = param.value(value);\n        });\n        if (hash)\n            values['#'] = hash;\n        return values;\n    };\n    /**\n     * @hidden\n     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n     *\n     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n     *    pattern has no parameters, an empty array is returned.\n     */\n    UrlMatcher.prototype.parameters = function (opts) {\n        if (opts === void 0) { opts = {}; }\n        if (opts.inherit === false)\n            return this._params;\n        return unnest(this._cache.path.map(function (matcher) { return matcher._params; }));\n    };\n    /**\n     * @hidden\n     * Returns a single parameter from this UrlMatcher by id\n     *\n     * @param id\n     * @param opts\n     * @returns {T|Param|any|boolean|UrlMatcher|null}\n     */\n    UrlMatcher.prototype.parameter = function (id, opts) {\n        var _this = this;\n        if (opts === void 0) { opts = {}; }\n        var findParam = function () {\n            for (var _i = 0, _a = _this._params; _i < _a.length; _i++) {\n                var param = _a[_i];\n                if (param.id === id)\n                    return param;\n            }\n        };\n        var parent = this._cache.parent;\n        return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n    };\n    /**\n     * Validates the input parameter values against this UrlMatcher\n     *\n     * Checks an object hash of parameters to validate their correctness according to the parameter\n     * types of this `UrlMatcher`.\n     *\n     * @param params The object hash of parameters to validate.\n     * @returns Returns `true` if `params` validates, otherwise `false`.\n     */\n    UrlMatcher.prototype.validates = function (params) {\n        var validParamVal = function (param, val) { return !param || param.validates(val); };\n        params = params || {};\n        // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n        var paramSchema = this.parameters().filter(function (paramDef) { return params.hasOwnProperty(paramDef.id); });\n        return paramSchema.map(function (paramDef) { return validParamVal(paramDef, params[paramDef.id]); }).reduce(allTrueR, true);\n    };\n    /**\n     * Given a set of parameter values, creates a URL from this UrlMatcher.\n     *\n     * Creates a URL that matches this pattern by substituting the specified values\n     * for the path and search parameters.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n     * // returns '/user/bob?q=yes'\n     * ```\n     *\n     * @param values  the values to substitute for the parameters in this pattern.\n     * @returns the formatted URL (path and optionally search part).\n     */\n    UrlMatcher.prototype.format = function (values) {\n        if (values === void 0) { values = {}; }\n        // Build the full path of UrlMatchers (including all parent UrlMatchers)\n        var urlMatchers = this._cache.path;\n        // Extract all the static segments and Params (processed as ParamDetails)\n        // into an ordered array\n        var pathSegmentsAndParams = urlMatchers\n            .map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(unnestR, [])\n            .map(function (x) { return (isString(x) ? x : getDetails(x)); });\n        // Extract the query params into a separate array\n        var queryParams = urlMatchers\n            .map(UrlMatcher.queryParams)\n            .reduce(unnestR, [])\n            .map(getDetails);\n        var isInvalid = function (param) { return param.isValid === false; };\n        if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n            return null;\n        }\n        /**\n         * Given a Param, applies the parameter value, then returns detailed information about it\n         */\n        function getDetails(param) {\n            // Normalize to typed value\n            var value = param.value(values[param.id]);\n            var isValid = param.validates(value);\n            var isDefaultValue = param.isDefaultValue(value);\n            // Check if we're in squash mode for the parameter\n            var squash = isDefaultValue ? param.squash : false;\n            // Allow the Parameter's Type to encode the value\n            var encoded = param.type.encode(value);\n            return { param: param, value: value, isValid: isValid, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };\n        }\n        // Build up the path-portion from the list of static segments and parameters\n        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {\n            // The element is a static segment (a raw string); just append it\n            if (isString(x))\n                return acc + x;\n            // Otherwise, it's a ParamDetails.\n            var squash = x.squash, encoded = x.encoded, param = x.param;\n            // If squash is === true, try to remove a slash from the path\n            if (squash === true)\n                return acc.match(/\\/$/) ? acc.slice(0, -1) : acc;\n            // If squash is a string, use the string for the param value\n            if (isString(squash))\n                return acc + squash;\n            if (squash !== false)\n                return acc; // ?\n            if (encoded == null)\n                return acc;\n            // If this parameter value is an array, encode the value using encodeDashes\n            if (isArray(encoded))\n                return acc + map(encoded, UrlMatcher.encodeDashes).join('-');\n            // If the parameter type is \"raw\", then do not encodeURIComponent\n            if (param.raw)\n                return acc + encoded;\n            // Encode the value\n            return acc + encodeURIComponent(encoded);\n        }, '');\n        // Build the query string by applying parameter values (array or regular)\n        // then mapping to key=value, then flattening and joining using \"&\"\n        var queryString = queryParams\n            .map(function (paramDetails) {\n            var param = paramDetails.param, squash = paramDetails.squash, encoded = paramDetails.encoded, isDefaultValue = paramDetails.isDefaultValue;\n            if (encoded == null || (isDefaultValue && squash !== false))\n                return;\n            if (!isArray(encoded))\n                encoded = [encoded];\n            if (encoded.length === 0)\n                return;\n            if (!param.raw)\n                encoded = map(encoded, encodeURIComponent);\n            return encoded.map(function (val) { return param.id + \"=\" + val; });\n        })\n            .filter(identity)\n            .reduce(unnestR, [])\n            .join('&');\n        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n        return pathString + (queryString ? \"?\" + queryString : '') + (values['#'] ? '#' + values['#'] : '');\n    };\n    /** @hidden */\n    UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n    return UrlMatcher;\n}());\nexport { UrlMatcher };\n//# sourceMappingURL=urlMatcher.js.map",
    "var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n/** @publicapi @module url */ /** */\nimport { extend, forEach, isDefined, isFunction, isObject } from '../common';\nimport { UrlMatcher } from './urlMatcher';\nimport { DefType, Param } from '../params';\n/** @internalapi */\nvar ParamFactory = /** @class */ (function () {\n    function ParamFactory(router) {\n        this.router = router;\n    }\n    ParamFactory.prototype.fromConfig = function (id, type, state) {\n        return new Param(id, type, DefType.CONFIG, this.router.urlService.config, state);\n    };\n    ParamFactory.prototype.fromPath = function (id, type, state) {\n        return new Param(id, type, DefType.PATH, this.router.urlService.config, state);\n    };\n    ParamFactory.prototype.fromSearch = function (id, type, state) {\n        return new Param(id, type, DefType.SEARCH, this.router.urlService.config, state);\n    };\n    return ParamFactory;\n}());\nexport { ParamFactory };\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactory` or ng1 providers as `$urlMatcherFactoryProvider`.\n *\n * @internalapi\n */\nvar UrlMatcherFactory = /** @class */ (function () {\n    // TODO: move implementations to UrlConfig (urlService.config)\n    function UrlMatcherFactory(/** @hidden */ router) {\n        var _this = this;\n        this.router = router;\n        /** @internalapi Creates a new [[Param]] for a given location (DefType) */\n        this.paramFactory = new ParamFactory(this.router);\n        /** @deprecated use [[UrlConfig.caseInsensitive]] */\n        this.caseInsensitive = function (value) { return _this.router.urlService.config.caseInsensitive(value); };\n        /** @deprecated use [[UrlConfig.defaultSquashPolicy]] */\n        this.defaultSquashPolicy = function (value) { return _this.router.urlService.config.defaultSquashPolicy(value); };\n        /** @deprecated use [[UrlConfig.strictMode]] */\n        this.strictMode = function (value) { return _this.router.urlService.config.strictMode(value); };\n        /** @deprecated use [[UrlConfig.type]] */\n        this.type = function (name, definition, definitionFn) {\n            return _this.router.urlService.config.type(name, definition, definitionFn) || _this;\n        };\n        extend(this, { UrlMatcher: UrlMatcher, Param: Param });\n    }\n    /**\n     * Creates a [[UrlMatcher]] for the specified pattern.\n     *\n     * @param pattern  The URL pattern.\n     * @param config  The config object hash.\n     * @returns The UrlMatcher.\n     */\n    UrlMatcherFactory.prototype.compile = function (pattern, config) {\n        var urlConfig = this.router.urlService.config;\n        // backward-compatible support for config.params -> config.state.params\n        var params = config && !config.state && config.params;\n        config = params ? __assign({ state: { params: params } }, config) : config;\n        var globalConfig = { strict: urlConfig._isStrictMode, caseInsensitive: urlConfig._isCaseInsensitive };\n        return new UrlMatcher(pattern, urlConfig.paramTypes, this.paramFactory, extend(globalConfig, config));\n    };\n    /**\n     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n     *\n     * @param object  The object to perform the type check against.\n     * @returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    UrlMatcherFactory.prototype.isMatcher = function (object) {\n        // TODO: typeof?\n        if (!isObject(object))\n            return false;\n        var result = true;\n        forEach(UrlMatcher.prototype, function (val, name) {\n            if (isFunction(val))\n                result = result && (isDefined(object[name]) && isFunction(object[name]));\n        });\n        return result;\n    };\n    /** @hidden */\n    UrlMatcherFactory.prototype.$get = function () {\n        var urlConfig = this.router.urlService.config;\n        urlConfig.paramTypes.enqueue = false;\n        urlConfig.paramTypes._flushTypeQueue();\n        return this;\n    };\n    return UrlMatcherFactory;\n}());\nexport { UrlMatcherFactory };\n//# sourceMappingURL=urlMatcherFactory.js.map",
    "/** @publicapi @module url */ /** */\nimport { UrlMatcher } from './urlMatcher';\nimport { isString, isDefined, isFunction } from '../common/predicates';\nimport { identity, extend } from '../common/common';\nimport { is, pattern } from '../common/hof';\nimport { StateObject } from '../state/stateObject';\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * @internalapi\n */\nvar UrlRuleFactory = /** @class */ (function () {\n    function UrlRuleFactory(router) {\n        this.router = router;\n    }\n    UrlRuleFactory.prototype.compile = function (str) {\n        return this.router.urlMatcherFactory.compile(str);\n    };\n    UrlRuleFactory.prototype.create = function (what, handler) {\n        var _this = this;\n        var isState = StateObject.isState;\n        var makeRule = pattern([\n            [isString, function (_what) { return makeRule(_this.compile(_what)); }],\n            [is(UrlMatcher), function (_what) { return _this.fromUrlMatcher(_what, handler); }],\n            [isState, function (_what) { return _this.fromState(_what, _this.router); }],\n            [is(RegExp), function (_what) { return _this.fromRegExp(_what, handler); }],\n            [isFunction, function (_what) { return new BaseUrlRule(_what, handler); }],\n        ]);\n        var rule = makeRule(what);\n        if (!rule)\n            throw new Error(\"invalid 'what' in when()\");\n        return rule;\n    };\n    /**\n     * A UrlRule which matches based on a UrlMatcher\n     *\n     * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     *\n     * ## Handler as UrlMatcher\n     *\n     * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n     * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n     * The url is replaced with the result.\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var handler = $umf.compile(\"/home/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromUrlMatcher = function (urlMatcher, handler) {\n        var _handler = handler;\n        if (isString(handler))\n            handler = this.router.urlMatcherFactory.compile(handler);\n        if (is(UrlMatcher)(handler))\n            _handler = function (match) { return handler.format(match); };\n        function matchUrlParamters(url) {\n            var params = urlMatcher.exec(url.path, url.search, url.hash);\n            return urlMatcher.validates(params) && params;\n        }\n        // Prioritize URLs, lowest to highest:\n        // - Some optional URL parameters, but none matched\n        // - No optional parameters in URL\n        // - Some optional parameters, some matched\n        // - Some optional parameters, all matched\n        function matchPriority(params) {\n            var optional = urlMatcher.parameters().filter(function (param) { return param.isOptional; });\n            if (!optional.length)\n                return 0.000001;\n            var matched = optional.filter(function (param) { return params[param.id]; });\n            return matched.length / optional.length;\n        }\n        var details = { urlMatcher: urlMatcher, matchPriority: matchPriority, type: 'URLMATCHER' };\n        return extend(new BaseUrlRule(matchUrlParamters, _handler), details);\n    };\n    /**\n     * A UrlRule which matches a state by its url\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromState($state.get('foo'), router);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match);\n     * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n     * ```\n     */\n    UrlRuleFactory.prototype.fromState = function (state, router) {\n        /**\n         * Handles match by transitioning to matched state\n         *\n         * First checks if the router should start a new transition.\n         * A new transition is not required if the current state's URL\n         * and the new URL are already identical\n         */\n        var handler = function (match) {\n            var $state = router.stateService;\n            var globals = router.globals;\n            if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n                $state.transitionTo(state, match, { inherit: true, source: 'url' });\n            }\n        };\n        var details = { state: state, type: 'STATE' };\n        return extend(this.fromUrlMatcher(state.url, handler), details);\n    };\n    /**\n     * A UrlRule which matches based on a regular expression\n     *\n     * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - regexp match array (from `regexp`)\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     *\n     * ## Handler as string\n     *\n     * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n     * The string is first interpolated using `string.replace()` style pattern.\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     */\n    UrlRuleFactory.prototype.fromRegExp = function (regexp, handler) {\n        if (regexp.global || regexp.sticky)\n            throw new Error('Rule RegExp must not be global or sticky');\n        /**\n         * If handler is a string, the url will be replaced by the string.\n         * If the string has any String.replace() style variables in it (like `$2`),\n         * they will be replaced by the captures from [[match]]\n         */\n        var redirectUrlTo = function (match) {\n            // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n            return handler.replace(/\\$(\\$|\\d{1,2})/, function (m, what) { return match[what === '$' ? 0 : Number(what)]; });\n        };\n        var _handler = isString(handler) ? redirectUrlTo : handler;\n        var matchParamsFromRegexp = function (url) { return regexp.exec(url.path); };\n        var details = { regexp: regexp, type: 'REGEXP' };\n        return extend(new BaseUrlRule(matchParamsFromRegexp, _handler), details);\n    };\n    UrlRuleFactory.isUrlRule = function (obj) { return obj && ['type', 'match', 'handler'].every(function (key) { return isDefined(obj[key]); }); };\n    return UrlRuleFactory;\n}());\nexport { UrlRuleFactory };\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internalapi\n */\nvar BaseUrlRule = /** @class */ (function () {\n    function BaseUrlRule(match, handler) {\n        var _this = this;\n        this.match = match;\n        this.type = 'RAW';\n        this.matchPriority = function (match) { return 0 - _this.$id; };\n        this.handler = handler || identity;\n    }\n    return BaseUrlRule;\n}());\nexport { BaseUrlRule };\n//# sourceMappingURL=urlRule.js.map",
    "/** @publicapi @module url */ /** */\nimport { stripLastPathElement } from '../common';\nimport { UrlRuleFactory } from './urlRule';\n/** @hidden */\nfunction appendBasePath(url, isHtml5, absolute, baseHref) {\n    if (baseHref === '/')\n        return url;\n    if (isHtml5)\n        return stripLastPathElement(baseHref) + url;\n    if (absolute)\n        return baseHref.slice(1) + url;\n    return url;\n}\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRules]] which can be found as [[UrlService.rules]].\n *\n * @internalapi\n */\nvar UrlRouter = /** @class */ (function () {\n    /** @hidden */\n    function UrlRouter(/** @hidden */ router) {\n        var _this = this;\n        this.router = router;\n        // Delegate these calls to [[UrlService]]\n        /** @deprecated use [[UrlService.sync]]*/\n        this.sync = function (evt) { return _this.router.urlService.sync(evt); };\n        /** @deprecated use [[UrlService.listen]]*/\n        this.listen = function (enabled) { return _this.router.urlService.listen(enabled); };\n        /** @deprecated use [[UrlService.deferIntercept]]*/\n        this.deferIntercept = function (defer) { return _this.router.urlService.deferIntercept(defer); };\n        /** @deprecated use [[UrlService.match]]*/\n        this.match = function (urlParts) { return _this.router.urlService.match(urlParts); };\n        // Delegate these calls to [[UrlRules]]\n        /** @deprecated use [[UrlRules.initial]]*/\n        this.initial = function (handler) {\n            return _this.router.urlService.rules.initial(handler);\n        };\n        /** @deprecated use [[UrlRules.otherwise]]*/\n        this.otherwise = function (handler) {\n            return _this.router.urlService.rules.otherwise(handler);\n        };\n        /** @deprecated use [[UrlRules.removeRule]]*/\n        this.removeRule = function (rule) { return _this.router.urlService.rules.removeRule(rule); };\n        /** @deprecated use [[UrlRules.rule]]*/\n        this.rule = function (rule) { return _this.router.urlService.rules.rule(rule); };\n        /** @deprecated use [[UrlRules.rules]]*/\n        this.rules = function () { return _this.router.urlService.rules.rules(); };\n        /** @deprecated use [[UrlRules.sort]]*/\n        this.sort = function (compareFn) { return _this.router.urlService.rules.sort(compareFn); };\n        /** @deprecated use [[UrlRules.when]]*/\n        this.when = function (matcher, handler, options) { return _this.router.urlService.rules.when(matcher, handler, options); };\n        this.urlRuleFactory = new UrlRuleFactory(router);\n    }\n    /**\n     * Internal API.\n     * @internalapi\n     */\n    UrlRouter.prototype.update = function (read) {\n        var $url = this.router.locationService;\n        if (read) {\n            this.location = $url.url();\n            return;\n        }\n        if ($url.url() === this.location)\n            return;\n        $url.url(this.location, true);\n    };\n    /**\n     * Internal API.\n     *\n     * Pushes a new location to the browser history.\n     *\n     * @internalapi\n     * @param urlMatcher\n     * @param params\n     * @param options\n     */\n    UrlRouter.prototype.push = function (urlMatcher, params, options) {\n        var replace = options && !!options.replace;\n        this.router.urlService.url(urlMatcher.format(params || {}), replace);\n    };\n    /**\n     * Builds and returns a URL with interpolated parameters\n     *\n     * #### Example:\n     * ```js\n     * matcher = $umf.compile(\"/about/:person\");\n     * params = { person: \"bob\" };\n     * $bob = $urlRouter.href(matcher, params);\n     * // $bob == \"/about/bob\";\n     * ```\n     *\n     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n     * @param params An object of parameter values to fill the matcher's required parameters.\n     * @param options Options object. The options are:\n     *\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *\n     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n     */\n    UrlRouter.prototype.href = function (urlMatcher, params, options) {\n        var url = urlMatcher.format(params);\n        if (url == null)\n            return null;\n        options = options || { absolute: false };\n        var cfg = this.router.urlService.config;\n        var isHtml5 = cfg.html5Mode();\n        if (!isHtml5 && url !== null) {\n            url = '#' + cfg.hashPrefix() + url;\n        }\n        url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n        if (!options.absolute || !url) {\n            return url;\n        }\n        var slash = !isHtml5 && url ? '/' : '';\n        var cfgPort = cfg.port();\n        var port = (cfgPort === 80 || cfgPort === 443 ? '' : ':' + cfgPort);\n        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n    };\n    Object.defineProperty(UrlRouter.prototype, \"interceptDeferred\", {\n        /** @deprecated use [[UrlService.interceptDeferred]]*/\n        get: function () {\n            return this.router.urlService.interceptDeferred;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return UrlRouter;\n}());\nexport { UrlRouter };\n//# sourceMappingURL=urlRouter.js.map",
    "import { TargetState } from '../state';\nimport { UrlMatcher } from './urlMatcher';\nimport { is, isDefined, isFunction, isString, removeFrom, val } from '../common';\nimport { UrlRuleFactory } from './urlRule';\n/** @hidden */\nvar prioritySort = function (a, b) { return (b.priority || 0) - (a.priority || 0); };\n/** @hidden */\nvar typeSort = function (a, b) {\n    var weights = { STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1 };\n    return (weights[a.type] || 0) - (weights[b.type] || 0);\n};\n/** @hidden */\nvar urlMatcherSort = function (a, b) {\n    return !a.urlMatcher || !b.urlMatcher ? 0 : UrlMatcher.compare(a.urlMatcher, b.urlMatcher);\n};\n/** @hidden */\nvar idSort = function (a, b) {\n    // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL\n    var useMatchPriority = { STATE: true, URLMATCHER: true };\n    var equal = useMatchPriority[a.type] && useMatchPriority[b.type];\n    return equal ? 0 : (a.$id || 0) - (b.$id || 0);\n};\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRules.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Rule registration order (for rule types other than STATE and URLMATCHER)\n *   - Equally sorted State and UrlMatcher rules will each match the URL.\n *     Then, the *best* match is chosen based on how many parameter values were matched.\n *\n * @publicapi\n */\nvar defaultRuleSortFn;\ndefaultRuleSortFn = function (a, b) {\n    var cmp = prioritySort(a, b);\n    if (cmp !== 0)\n        return cmp;\n    cmp = typeSort(a, b);\n    if (cmp !== 0)\n        return cmp;\n    cmp = urlMatcherSort(a, b);\n    if (cmp !== 0)\n        return cmp;\n    return idSort(a, b);\n};\n/** @hidden */\nfunction getHandlerFn(handler) {\n    if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n        throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n    }\n    return isFunction(handler) ? handler : val(handler);\n}\n/**\n * API for managing URL rules\n *\n * This API is used to create and manage URL rules.\n * URL rules are a mechanism to respond to specific URL patterns.\n *\n * The most commonly used methods are [[otherwise]] and [[when]].\n *\n * This API is a property of [[UrlService]] as [[UrlService.rules]]\n *\n * @publicapi\n */\nvar UrlRules = /** @class */ (function () {\n    /** @hidden */\n    function UrlRules(/** @hidden */ router) {\n        this.router = router;\n        /** @hidden */ this._sortFn = defaultRuleSortFn;\n        /** @hidden */ this._rules = [];\n        /** @hidden */ this._id = 0;\n        this.urlRuleFactory = new UrlRuleFactory(router);\n    }\n    /** @hidden */\n    UrlRules.prototype.dispose = function (router) {\n        this._rules = [];\n        delete this._otherwiseFn;\n    };\n    /**\n     * Defines the initial state, path, or behavior to use when the app starts.\n     *\n     * This rule defines the initial/starting state for the application.\n     *\n     * This rule is triggered the first time the URL is checked (when the app initially loads).\n     * The rule is triggered only when the url matches either `\"\"` or `\"/\"`.\n     *\n     * Note: The rule is intended to be used when the root of the application is directly linked to.\n     * When the URL is *not* `\"\"` or `\"/\"` and doesn't match other rules, the [[otherwise]] rule is triggered.\n     * This allows 404-like behavior when an unknown URL is deep-linked.\n     *\n     * #### Example:\n     * Start app at `home` state.\n     * ```js\n     * .initial({ state: 'home' });\n     * ```\n     *\n     * #### Example:\n     * Start app at `/home` (by url)\n     * ```js\n     * .initial('/home');\n     * ```\n     *\n     * #### Example:\n     * When no other url rule matches, go to `home` state\n     * ```js\n     * .initial((matchValue, url, router) => {\n     *   console.log('initial state');\n     *   return { state: 'home' };\n     * })\n     * ```\n     *\n     * @param handler The initial state or url path, or a function which returns the state or url path (or performs custom logic).\n     */\n    UrlRules.prototype.initial = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        var matchFn = function (urlParts, router) {\n            return router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n        };\n        this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n    };\n    /**\n     * Defines the state, url, or behavior to use when no other rule matches the URL.\n     *\n     * This rule is matched when *no other rule* matches.\n     * It is generally used to handle unknown URLs (similar to \"404\" behavior, but on the client side).\n     *\n     * - If `handler` a string, it is treated as a url redirect\n     *\n     * #### Example:\n     * When no other url rule matches, redirect to `/index`\n     * ```js\n     * .otherwise('/index');\n     * ```\n     *\n     * - If `handler` is an object with a `state` property, the state is activated.\n     *\n     * #### Example:\n     * When no other url rule matches, redirect to `home` and provide a `dashboard` parameter value.\n     * ```js\n     * .otherwise({ state: 'home', params: { dashboard: 'default' } });\n     * ```\n     *\n     * - If `handler` is a function, the function receives the current url ([[UrlParts]]) and the [[UIRouter]] object.\n     *   The function can perform actions, and/or return a value.\n     *\n     * #### Example:\n     * When no other url rule matches, manually trigger a transition to the `home` state\n     * ```js\n     * .otherwise((matchValue, urlParts, router) => {\n     *   router.stateService.go('home');\n     * });\n     * ```\n     *\n     * #### Example:\n     * When no other url rule matches, go to `home` state\n     * ```js\n     * .otherwise((matchValue, urlParts, router) => {\n     *   return { state: 'home' };\n     * });\n     * ```\n     *\n     * @param handler The url path to redirect to, or a function which returns the url path (or performs custom logic).\n     */\n    UrlRules.prototype.otherwise = function (handler) {\n        var handlerFn = getHandlerFn(handler);\n        this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n        this._sorted = false;\n    };\n    /**\n     * Remove a rule previously registered\n     *\n     * @param rule the matcher rule that was previously registered using [[rule]]\n     */\n    UrlRules.prototype.removeRule = function (rule) {\n        removeFrom(this._rules, rule);\n    };\n    /**\n     * Manually adds a URL Rule.\n     *\n     * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n     * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n     * Rules can be created using [[urlRuleFactory]], or created manually as simple objects.\n     *\n     * A rule should have a `match` function which returns truthy if the rule matched.\n     * It should also have a `handler` function which is invoked if the rule is the best match.\n     *\n     * @return a function that deregisters the rule\n     */\n    UrlRules.prototype.rule = function (rule) {\n        var _this = this;\n        if (!UrlRuleFactory.isUrlRule(rule))\n            throw new Error('invalid rule');\n        rule.$id = this._id++;\n        rule.priority = rule.priority || 0;\n        this._rules.push(rule);\n        this._sorted = false;\n        return function () { return _this.removeRule(rule); };\n    };\n    /**\n     * Gets all registered rules\n     *\n     * @returns an array of all the registered rules\n     */\n    UrlRules.prototype.rules = function () {\n        this.ensureSorted();\n        return this._rules.concat(this._otherwiseFn ? [this._otherwiseFn] : []);\n    };\n    /**\n     * Defines URL Rule priorities\n     *\n     * More than one rule ([[UrlRule]]) might match a given URL.\n     * This `compareFn` is used to sort the rules by priority.\n     * Higher priority rules should sort earlier.\n     *\n     * The [[defaultRuleSortFn]] is used by default.\n     *\n     * You only need to call this function once.\n     * The `compareFn` will be used to sort the rules as each is registered.\n     *\n     * If called without any parameter, it will re-sort the rules.\n     *\n     * ---\n     *\n     * Url rules may come from multiple sources: states's urls ([[StateDeclaration.url]]), [[when]], and [[rule]].\n     * Each rule has a (user-provided) [[UrlRule.priority]], a [[UrlRule.type]], and a [[UrlRule.$id]]\n     * The `$id` is is the order in which the rule was registered.\n     *\n     * The sort function should use these data, or data found on a specific type\n     * of [[UrlRule]] (such as [[StateRule.state]]), to order the rules as desired.\n     *\n     * #### Example:\n     * This compare function prioritizes rules by the order in which the rules were registered.\n     * A rule registered earlier has higher priority.\n     *\n     * ```js\n     * function compareFn(a, b) {\n     *   return a.$id - b.$id;\n     * }\n     * ```\n     *\n     * @param compareFn a function that compares to [[UrlRule]] objects.\n     *    The `compareFn` should abide by the `Array.sort` compare function rules.\n     *    Given two rules, `a` and `b`, return a negative number if `a` should be higher priority.\n     *    Return a positive number if `b` should be higher priority.\n     *    Return `0` if the rules are identical.\n     *\n     *    See the [mozilla reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)\n     *    for details.\n     */\n    UrlRules.prototype.sort = function (compareFn) {\n        var sorted = this.stableSort(this._rules, (this._sortFn = compareFn || this._sortFn));\n        // precompute _sortGroup values and apply to each rule\n        var group = 0;\n        for (var i = 0; i < sorted.length; i++) {\n            sorted[i]._group = group;\n            if (i < sorted.length - 1 && this._sortFn(sorted[i], sorted[i + 1]) !== 0) {\n                group++;\n            }\n        }\n        this._rules = sorted;\n        this._sorted = true;\n    };\n    /** @hidden */\n    UrlRules.prototype.ensureSorted = function () {\n        this._sorted || this.sort();\n    };\n    /** @hidden */\n    UrlRules.prototype.stableSort = function (arr, compareFn) {\n        var arrOfWrapper = arr.map(function (elem, idx) { return ({ elem: elem, idx: idx }); });\n        arrOfWrapper.sort(function (wrapperA, wrapperB) {\n            var cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);\n            return cmpDiff === 0 ? wrapperA.idx - wrapperB.idx : cmpDiff;\n        });\n        return arrOfWrapper.map(function (wrapper) { return wrapper.elem; });\n    };\n    /**\n     * Registers a `matcher` and `handler` for custom URLs handling.\n     *\n     * The `matcher` can be:\n     *\n     * - a [[UrlMatcher]]: See: [[UrlMatcherFactory.compile]]\n     * - a `string`: The string is compiled to a [[UrlMatcher]]\n     * - a `RegExp`: The regexp is used to match the url.\n     *\n     * The `handler` can be:\n     *\n     * - a string: The url is redirected to the value of the string.\n     * - a function: The url is redirected to the return value of the function.\n     *\n     * ---\n     *\n     * When the `handler` is a `string` and the `matcher` is a `UrlMatcher` (or string), the redirect\n     * string is interpolated with parameter values.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(\"/foo/:param1\", \"/bar/:param1\")\n     * ```\n     *\n     * ---\n     *\n     * When the `handler` is a string and the `matcher` is a `RegExp`, the redirect string is\n     * interpolated with capture groups from the RegExp.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(new RegExp(\"^/foo/(.*)$\"), \"/bar/$1\");\n     * ```\n     *\n     * ---\n     *\n     * When the handler is a function, it receives the matched value, the current URL, and the `UIRouter` object (See [[UrlRuleHandlerFn]]).\n     * The \"matched value\" differs based on the `matcher`.\n     * For [[UrlMatcher]]s, it will be the matched state params.\n     * For `RegExp`, it will be the match array from `regexp.exec()`.\n     *\n     * If the handler returns a string, the URL is redirected to the string.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(new RegExp(\"^/foo/(.*)$\"), match => \"/bar/\" + match[1]);\n     * ```\n     *\n     * Note: the `handler` may also invoke arbitrary code, such as `$state.go()`\n     *\n     * @param matcher A pattern `string` to match, compiled as a [[UrlMatcher]], or a `RegExp`.\n     * @param handler The path to redirect to, or a function that returns the path.\n     * @param options `{ priority: number }`\n     *\n     * @return the registered [[UrlRule]]\n     */\n    UrlRules.prototype.when = function (matcher, handler, options) {\n        var rule = this.urlRuleFactory.create(matcher, handler);\n        if (isDefined(options && options.priority))\n            rule.priority = options.priority;\n        this.rule(rule);\n        return rule;\n    };\n    return UrlRules;\n}());\nexport { UrlRules };\n//# sourceMappingURL=urlRules.js.map",
    "/** @publicapi @module view */ /** */\nimport { equals, applyPairs, removeFrom, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nvar ViewService = /** @class */ (function () {\n    /** @hidden */\n    function ViewService(/** @hidden */ router) {\n        var _this = this;\n        this.router = router;\n        /** @hidden */ this._uiViews = [];\n        /** @hidden */ this._viewConfigs = [];\n        /** @hidden */ this._viewConfigFactories = {};\n        /** @hidden */ this._listeners = [];\n        /** @internalapi */\n        this._pluginapi = {\n            _rootViewContext: this._rootViewContext.bind(this),\n            _viewConfigFactory: this._viewConfigFactory.bind(this),\n            _registeredUIView: function (id) { return find(_this._uiViews, function (view) { return _this.router.$id + \".\" + view.id === id; }); },\n            _registeredUIViews: function () { return _this._uiViews; },\n            _activeViewConfigs: function () { return _this._viewConfigs; },\n            _onSync: function (listener) {\n                _this._listeners.push(listener);\n                return function () { return removeFrom(_this._listeners, listener); };\n            },\n        };\n    }\n    /**\n     * Normalizes a view's name from a state.views configuration block.\n     *\n     * This should be used by a framework implementation to calculate the values for\n     * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n     *\n     * @param context the context object (state declaration) that the view belongs to\n     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n     *\n     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n     */\n    ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n        if (rawViewName === void 0) { rawViewName = ''; }\n        // TODO: Validate incoming view name with a regexp to allow:\n        // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n        // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n        var viewAtContext = rawViewName.split('@');\n        var uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n        var uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n        // Handle relative view-name sugar syntax.\n        // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n        var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n        if (relativeViewNameSugar) {\n            // Clobbers existing contextAnchor (rawViewName validation will fix this)\n            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n            uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n        }\n        if (uiViewName.charAt(0) === '!') {\n            uiViewName = uiViewName.substr(1);\n            uiViewContextAnchor = ''; // target absolutely from root\n        }\n        // handle parent relative targeting \"^.^.^\"\n        var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n        if (relativeMatch.exec(uiViewContextAnchor)) {\n            var anchorState = uiViewContextAnchor.split('.').reduce(function (anchor, x) { return anchor.parent; }, context);\n            uiViewContextAnchor = anchorState.name;\n        }\n        else if (uiViewContextAnchor === '.') {\n            uiViewContextAnchor = context.name;\n        }\n        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };\n    };\n    /** @hidden */\n    ViewService.prototype._rootViewContext = function (context) {\n        return (this._rootContext = context || this._rootContext);\n    };\n    /** @hidden */\n    ViewService.prototype._viewConfigFactory = function (viewType, factory) {\n        this._viewConfigFactories[viewType] = factory;\n    };\n    ViewService.prototype.createViewConfig = function (path, decl) {\n        var cfgFactory = this._viewConfigFactories[decl.$type];\n        if (!cfgFactory)\n            throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n        var cfgs = cfgFactory(path, decl);\n        return isArray(cfgs) ? cfgs : [cfgs];\n    };\n    /**\n     * Deactivates a ViewConfig.\n     *\n     * This function deactivates a `ViewConfig`.\n     * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n     *\n     * @param viewConfig The ViewConfig view to deregister.\n     */\n    ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n        trace.traceViewServiceEvent('<- Removing', viewConfig);\n        removeFrom(this._viewConfigs, viewConfig);\n    };\n    ViewService.prototype.activateViewConfig = function (viewConfig) {\n        trace.traceViewServiceEvent('-> Registering', viewConfig);\n        this._viewConfigs.push(viewConfig);\n    };\n    ViewService.prototype.sync = function () {\n        var _this = this;\n        var uiViewsByFqn = this._uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(applyPairs, {});\n        // Return a weighted depth value for a uiView.\n        // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n        // plus the depth of the state that is populating the uiView\n        function uiViewDepth(uiView) {\n            var stateDepth = function (context) { return (context && context.parent ? stateDepth(context.parent) + 1 : 1); };\n            return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n        }\n        // Return the ViewConfig's context's depth in the context tree.\n        function viewConfigDepth(config) {\n            var context = config.viewDecl.$context, count = 0;\n            while (++count && context.parent)\n                context = context.parent;\n            return count;\n        }\n        // Given a depth function, returns a compare function which can return either ascending or descending order\n        var depthCompare = curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });\n        var matchingConfigPair = function (uiView) {\n            var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n            if (matchingConfigs.length > 1) {\n                // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n                // Sort by depth and return the match from the deepest child\n                // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n                matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n            }\n            return { uiView: uiView, viewConfig: matchingConfigs[0] };\n        };\n        var configureUIView = function (tuple) {\n            // If a parent ui-view is reconfigured, it could destroy child ui-views.\n            // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n            if (_this._uiViews.indexOf(tuple.uiView) !== -1)\n                tuple.uiView.configUpdated(tuple.viewConfig);\n        };\n        // Sort views by FQN and state depth. Process uiviews nearest the root first.\n        var uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n        var matchedViewConfigs = uiViewTuples.map(function (tuple) { return tuple.viewConfig; });\n        var unmatchedConfigTuples = this._viewConfigs\n            .filter(function (config) { return !inArray(matchedViewConfigs, config); })\n            .map(function (viewConfig) { return ({ uiView: undefined, viewConfig: viewConfig }); });\n        uiViewTuples.forEach(configureUIView);\n        var allTuples = uiViewTuples.concat(unmatchedConfigTuples);\n        this._listeners.forEach(function (cb) { return cb(allTuples); });\n        trace.traceViewSync(allTuples);\n    };\n    /**\n     * Registers a `ui-view` component\n     *\n     * When a `ui-view` component is created, it uses this method to register itself.\n     * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n     *\n     * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n     * and what the view's state context is.\n     *\n     * Note: There is no corresponding `deregisterUIView`.\n     *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n     *\n     * @param uiView The metadata for a UIView\n     * @return a de-registration function used when the view is destroyed.\n     */\n    ViewService.prototype.registerUIView = function (uiView) {\n        trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n        var uiViews = this._uiViews;\n        var fqnAndTypeMatches = function (uiv) { return uiv.fqn === uiView.fqn && uiv.$type === uiView.$type; };\n        if (uiViews.filter(fqnAndTypeMatches).length)\n            trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n        uiViews.push(uiView);\n        this.sync();\n        return function () {\n            var idx = uiViews.indexOf(uiView);\n            if (idx === -1) {\n                trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n                return;\n            }\n            trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n            removeFrom(uiViews)(uiView);\n        };\n    };\n    /**\n     * Returns the list of views currently available on the page, by fully-qualified name.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.available = function () {\n        return this._uiViews.map(prop('fqn'));\n    };\n    /**\n     * Returns the list of views on the page containing loaded content.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    ViewService.prototype.active = function () {\n        return this._uiViews.filter(prop('$config')).map(prop('name'));\n    };\n    /**\n     * Given a ui-view and a ViewConfig, determines if they \"match\".\n     *\n     * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n     * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n     *\n     * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n     * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n     *\n     * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n     *\n     * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n     * - the ui-view's name matches the ViewConfig's target name\n     * - the ui-view's context matches the ViewConfig's anchor\n     *\n     * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n     * - There exists a parent ui-view where:\n     *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n     *    - the parent ui-view's context matches the ViewConfig's anchor\n     * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n     *\n     * Example:\n     *\n     * DOM:\n     * <ui-view>                        <!-- created in the root context (name: \"\") -->\n     *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n     *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n     *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n     *       </ui-view>\n     *     </ui-view>\n     *   </ui-view>\n     * </ui-view>\n     *\n     * uiViews: [\n     *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n     *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n     *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n     *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n     * ]\n     *\n     * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n     *\n     * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n     * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n     * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n     * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n     *\n     * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n     * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n     * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n     *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n     *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n     * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n     *   the tail of the ui-view's fqn \"default.bar\"\n     *\n     * @internalapi\n     */\n    ViewService.matches = function (uiViewsByFqn, uiView) { return function (viewConfig) {\n        // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n        if (uiView.$type !== viewConfig.viewDecl.$type)\n            return false;\n        // Split names apart from both viewConfig and uiView into segments\n        var vc = viewConfig.viewDecl;\n        var vcSegments = vc.$uiViewName.split('.');\n        var uivSegments = uiView.fqn.split('.');\n        // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n        // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n        if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n            return false;\n        // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n        // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n        var negOffset = 1 - vcSegments.length || undefined;\n        var fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n        var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n        return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    }; };\n    return ViewService;\n}());\nexport { ViewService };\n//# sourceMappingURL=view.js.map",
    "/** @publicapi @module core */ /** */\nimport { StateParams } from './params/stateParams';\nimport { Queue } from './common/queue';\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nvar UIRouterGlobals = /** @class */ (function () {\n    function UIRouterGlobals() {\n        /**\n         * Current parameter values\n         *\n         * The parameter values from the latest successful transition\n         */\n        this.params = new StateParams();\n        /** @internalapi */\n        this.lastStartedTransitionId = -1;\n        /** @internalapi */\n        this.transitionHistory = new Queue([], 1);\n        /** @internalapi */\n        this.successfulTransitions = new Queue([], 1);\n    }\n    UIRouterGlobals.prototype.dispose = function () {\n        this.transitionHistory.clear();\n        this.successfulTransitions.clear();\n        this.transition = null;\n    };\n    return UIRouterGlobals;\n}());\nexport { UIRouterGlobals };\n//# sourceMappingURL=globals.js.map",
    "import { ParamTypes } from '../params';\nimport { isDefined, isString } from '../common';\n/**\n * An API to customize the URL behavior and retrieve URL configuration\n *\n * This API is used to customize the behavior of the URL.\n * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),\n * and custom parameter encoding (custom [[type]]).\n *\n * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].\n * This information can be used to build absolute URLs, such as\n * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;\n *\n * This API is a property of [[UrlService]] as [[UrlService.config]].\n */\nvar UrlConfig = /** @class */ (function () {\n    /** @hidden */ function UrlConfig(/** @hidden */ router) {\n        var _this = this;\n        this.router = router;\n        /** @hidden */ this.paramTypes = new ParamTypes();\n        /** @hidden */ this._isCaseInsensitive = false;\n        /** @hidden */ this._isStrictMode = true;\n        /** @hidden */ this._defaultSquashPolicy = false;\n        /** @internalapi */ this.dispose = function () { return _this.paramTypes.dispose(); };\n        // Delegate these calls to the current LocationConfig implementation\n        /**\n         * Gets the base Href, e.g., `http://localhost/approot/`\n         *\n         * @return the application's base href\n         */\n        this.baseHref = function () { return _this.router.locationConfig.baseHref(); };\n        /**\n         * Gets or sets the hashPrefix\n         *\n         * This only applies when not running in [[html5Mode]] (pushstate mode)\n         *\n         * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n         *\n         * @return the hash prefix\n         */\n        this.hashPrefix = function (newprefix) { return _this.router.locationConfig.hashPrefix(newprefix); };\n        /**\n         * Gets the host, e.g., `localhost`\n         *\n         * @return the protocol\n         */\n        this.host = function () { return _this.router.locationConfig.host(); };\n        /**\n         * Returns true when running in pushstate mode\n         *\n         * @return true when running in html5 mode (pushstate mode).\n         */\n        this.html5Mode = function () { return _this.router.locationConfig.html5Mode(); };\n        /**\n         * Gets the port, e.g., `80`\n         *\n         * @return the port number\n         */\n        this.port = function () { return _this.router.locationConfig.port(); };\n        /**\n         * Gets the protocol, e.g., `http`\n         *\n         * @return the protocol\n         */\n        this.protocol = function () { return _this.router.locationConfig.protocol(); };\n    }\n    /**\n     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n     *\n     * #### Example:\n     * ```js\n     * // Allow case insensitive url matches\n     * urlService.config.caseInsensitive(true);\n     * ```\n     *\n     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n     * @returns the current value of caseInsensitive\n     */\n    UrlConfig.prototype.caseInsensitive = function (value) {\n        return (this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive);\n    };\n    /**\n     * Sets the default behavior when generating or matching URLs with default parameter values.\n     *\n     * #### Example:\n     * ```js\n     * // Remove default parameter values from the url\n     * urlService.config.defaultSquashPolicy(true);\n     * ```\n     *\n     * @param value A string that defines the default parameter URL squashing behavior.\n     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n     *      parameter is surrounded by slashes, squash (remove) one slash from the URL\n     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n     *      the parameter value from the URL and replace it with this string.\n     * @returns the current value of defaultSquashPolicy\n     */\n    UrlConfig.prototype.defaultSquashPolicy = function (value) {\n        if (isDefined(value) && value !== true && value !== false && !isString(value))\n            throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n        return (this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy);\n    };\n    /**\n     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n     *\n     * #### Example:\n     * ```js\n     * // Allow optional trailing slashes\n     * urlService.config.strictMode(false);\n     * ```\n     *\n     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n     * @returns the current value of strictMode\n     */\n    UrlConfig.prototype.strictMode = function (value) {\n        return (this._isStrictMode = isDefined(value) ? value : this._isStrictMode);\n    };\n    /**\n     * Creates and registers a custom [[ParamType]] object\n     *\n     * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.\n     *\n     * #### Note: Register custom types *before using them* in a state definition.\n     *\n     * #### Example:\n     * ```js\n     * // Encode object parameter as JSON string\n     * urlService.config.type('myjson', {\n     *   encode: (obj) => JSON.stringify(obj),\n     *   decode: (str) => JSON.parse(str),\n     *   is: (val) => typeof(val) === 'object',\n     *   pattern: /[^/]+/,\n     *   equals: (a, b) => _.isEqual(a, b),\n     * });\n     * ```\n     *\n     * See [[ParamTypeDefinition]] for more examples\n     *\n     * @param name The type name.\n     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n     * @param definitionFn A function that is injected before the app runtime starts.\n     *        The result of this function should be a [[ParamTypeDefinition]].\n     *        The result is merged into the existing `definition`.\n     *        See [[ParamType]] for information on the values accepted.\n     *\n     * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n     */\n    UrlConfig.prototype.type = function (name, definition, definitionFn) {\n        var type = this.paramTypes.type(name, definition, definitionFn);\n        return !isDefined(definition) ? type : this;\n    };\n    return UrlConfig;\n}());\nexport { UrlConfig };\n//# sourceMappingURL=urlConfig.js.map",
    "import { extend, is, isString, pattern } from '../common';\nimport { UrlRules } from './urlRules';\nimport { UrlConfig } from './urlConfig';\nimport { TargetState } from '../state';\n/** API for URL management */\nvar UrlService = /** @class */ (function () {\n    /** @hidden */\n    function UrlService(/** @hidden */ router) {\n        var _this = this;\n        this.router = router;\n        /** @hidden */ this.interceptDeferred = false;\n        /**\n         * The nested [[UrlRules]] API for managing URL rules and rewrites\n         *\n         * See: [[UrlRules]] for details\n         */\n        this.rules = new UrlRules(this.router);\n        /**\n         * The nested [[UrlConfig]] API to configure the URL and retrieve URL information\n         *\n         * See: [[UrlConfig]] for details\n         */\n        this.config = new UrlConfig(this.router);\n        // Delegate these calls to the current LocationServices implementation\n        /**\n         * Gets the current url, or updates the url\n         *\n         * ### Getting the current URL\n         *\n         * When no arguments are passed, returns the current URL.\n         * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n         *\n         * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n         * have a base HREF prepended ([[PushStateLocationServices]]).\n         *\n         * The raw URL in the browser might be:\n         *\n         * ```\n         * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n         * ```\n         *\n         * or\n         *\n         * ```\n         * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n         * ```\n         *\n         * then this method returns:\n         *\n         * ```\n         * /internal/path/123?param1=foo#anchor\n         * ```\n         *\n         *\n         * #### Example:\n         * ```js\n         * locationServices.url(); // \"/some/path?query=value#anchor\"\n         * ```\n         *\n         * ### Updating the URL\n         *\n         * When `newurl` arguments is provided, changes the URL to reflect `newurl`\n         *\n         * #### Example:\n         * ```js\n         * locationServices.url(\"/some/path?query=value#anchor\", true);\n         * ```\n         *\n         * @param newurl The new value for the URL.\n         *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n         *               It should not include the protocol, site, port, or base path of an absolute HREF.\n         * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n         * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n         *\n         * @return the url (after potentially being processed)\n         */\n        this.url = function (newurl, replace, state) {\n            return _this.router.locationService.url(newurl, replace, state);\n        };\n        /**\n         * Gets the path part of the current url\n         *\n         * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n         *\n         * @return the path portion of the url\n         */\n        this.path = function () { return _this.router.locationService.path(); };\n        /**\n         * Gets the search part of the current url as an object\n         *\n         * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n         *\n         * @return the search (query) portion of the url, as an object\n         */\n        this.search = function () { return _this.router.locationService.search(); };\n        /**\n         * Gets the hash part of the current url\n         *\n         * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n         *\n         * @return the hash (anchor) portion of the url\n         */\n        this.hash = function () { return _this.router.locationService.hash(); };\n        /**\n         * @internalapi\n         *\n         * Registers a low level url change handler\n         *\n         * Note: Because this is a low level handler, it's not recommended for general use.\n         *\n         * #### Example:\n         * ```js\n         * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n         * ```\n         *\n         * @param callback a function that will be called when the url is changing\n         * @return a function that de-registers the callback\n         */\n        this.onChange = function (callback) { return _this.router.locationService.onChange(callback); };\n    }\n    /** @hidden */\n    UrlService.prototype.dispose = function () {\n        this.listen(false);\n        this.rules.dispose();\n    };\n    /**\n     * Gets the current URL parts\n     *\n     * This method returns the different parts of the current URL (the [[path]], [[search]], and [[hash]]) as a [[UrlParts]] object.\n     */\n    UrlService.prototype.parts = function () {\n        return { path: this.path(), search: this.search(), hash: this.hash() };\n    };\n    /**\n     * Activates the best rule for the current URL\n     *\n     * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.\n     * This method is called internally any time the URL has changed.\n     *\n     * This effectively activates the state (or redirect, etc) which matches the current URL.\n     *\n     * #### Example:\n     * ```js\n     * urlService.deferIntercept();\n     *\n     * fetch('/states.json').then(resp => resp.json()).then(data => {\n     *   data.forEach(state => $stateRegistry.register(state));\n     *   urlService.listen();\n     *   // Find the matching URL and invoke the handler.\n     *   urlService.sync();\n     * });\n     * ```\n     */\n    UrlService.prototype.sync = function (evt) {\n        if (evt && evt.defaultPrevented)\n            return;\n        var _a = this.router, urlService = _a.urlService, stateService = _a.stateService;\n        var url = { path: urlService.path(), search: urlService.search(), hash: urlService.hash() };\n        var best = this.match(url);\n        var applyResult = pattern([\n            [isString, function (newurl) { return urlService.url(newurl, true); }],\n            [TargetState.isDef, function (def) { return stateService.go(def.state, def.params, def.options); }],\n            [is(TargetState), function (target) { return stateService.go(target.state(), target.params(), target.options()); }],\n        ]);\n        applyResult(best && best.rule.handler(best.match, url, this.router));\n    };\n    /**\n     * Starts or stops listening for URL changes\n     *\n     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n     * This causes UI-Router to start listening for changes to the URL, if it wasn't already listening.\n     *\n     * If called with `false`, UI-Router will stop listening (call listen(true) to start listening again).\n     *\n     * #### Example:\n     * ```js\n     * urlService.deferIntercept();\n     *\n     * fetch('/states.json').then(resp => resp.json()).then(data => {\n     *   data.forEach(state => $stateRegistry.register(state));\n     *   // Start responding to URL changes\n     *   urlService.listen();\n     *   urlService.sync();\n     * });\n     * ```\n     *\n     * @param enabled `true` or `false` to start or stop listening to URL changes\n     */\n    UrlService.prototype.listen = function (enabled) {\n        var _this = this;\n        if (enabled === false) {\n            this._stopListeningFn && this._stopListeningFn();\n            delete this._stopListeningFn;\n        }\n        else {\n            return (this._stopListeningFn = this._stopListeningFn || this.router.urlService.onChange(function (evt) { return _this.sync(evt); }));\n        }\n    };\n    /**\n     * Disables monitoring of the URL.\n     *\n     * Call this method before UI-Router has bootstrapped.\n     * It will stop UI-Router from performing the initial url sync.\n     *\n     * This can be useful to perform some asynchronous initialization before the router starts.\n     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.\n     *\n     * #### Example:\n     * ```js\n     * // Prevent UI-Router from automatically intercepting URL changes when it starts;\n     * urlService.deferIntercept();\n     *\n     * fetch('/states.json').then(resp => resp.json()).then(data => {\n     *   data.forEach(state => $stateRegistry.register(state));\n     *   urlService.listen();\n     *   urlService.sync();\n     * });\n     * ```\n     *\n     * @param defer Indicates whether to defer location change interception.\n     *        Passing no parameter is equivalent to `true`.\n     */\n    UrlService.prototype.deferIntercept = function (defer) {\n        if (defer === undefined)\n            defer = true;\n        this.interceptDeferred = defer;\n    };\n    /**\n     * Matches a URL\n     *\n     * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.\n     * Return the result as a [[MatchResult]].\n     */\n    UrlService.prototype.match = function (url) {\n        var _this = this;\n        url = extend({ path: '', search: {}, hash: '' }, url);\n        var rules = this.rules.rules();\n        // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n        var checkRule = function (rule) {\n            var match = rule.match(url, _this.router);\n            return match && { match: match, rule: rule, weight: rule.matchPriority(match) };\n        };\n        // The rules are pre-sorted.\n        // - Find the first matching rule.\n        // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n        // - Choose the rule with the highest match weight.\n        var best;\n        for (var i = 0; i < rules.length; i++) {\n            // Stop when there is a 'best' rule and the next rule sorts differently than it.\n            if (best && best.rule._group !== rules[i]._group)\n                break;\n            var current = checkRule(rules[i]);\n            // Pick the best MatchResult\n            best = !best || (current && current.weight > best.weight) ? current : best;\n        }\n        return best;\n    };\n    return UrlService;\n}());\nexport { UrlService };\n//# sourceMappingURL=urlService.js.map",
    "/** @publicapi @module core */ /** */\nimport { UrlMatcherFactory } from './url/urlMatcherFactory';\nimport { UrlRouter } from './url/urlRouter';\nimport { TransitionService } from './transition/transitionService';\nimport { ViewService } from './view/view';\nimport { StateRegistry } from './state/stateRegistry';\nimport { StateService } from './state/stateService';\nimport { UIRouterGlobals } from './globals';\nimport { values, removeFrom } from './common/common';\nimport { isFunction } from './common/predicates';\nimport { UrlService } from './url/urlService';\nimport { trace } from './common/trace';\nimport { makeStub } from './common';\n/** @hidden */\nvar _routerInstance = 0;\n/** @hidden */\nvar locSvcFns = ['url', 'path', 'search', 'hash', 'onChange'];\n/** @hidden */\nvar locCfgFns = ['port', 'protocol', 'host', 'baseHref', 'html5Mode', 'hashPrefix'];\n/** @hidden */\nvar locationServiceStub = makeStub('LocationServices', locSvcFns);\n/** @hidden */\nvar locationConfigStub = makeStub('LocationConfig', locCfgFns);\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n *\n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n *\n * ---\n *\n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nvar UIRouter = /** @class */ (function () {\n    /**\n     * Creates a new `UIRouter` object\n     *\n     * @param locationService a [[LocationServices]] implementation\n     * @param locationConfig a [[LocationConfig]] implementation\n     * @internalapi\n     */\n    function UIRouter(locationService, locationConfig) {\n        if (locationService === void 0) { locationService = locationServiceStub; }\n        if (locationConfig === void 0) { locationConfig = locationConfigStub; }\n        this.locationService = locationService;\n        this.locationConfig = locationConfig;\n        /** @hidden */ this.$id = _routerInstance++;\n        /** @hidden */ this._disposed = false;\n        /** @hidden */ this._disposables = [];\n        /** Provides trace information to the console */\n        this.trace = trace;\n        /** Provides services related to ui-view synchronization */\n        this.viewService = new ViewService(this);\n        /** Global router state */\n        this.globals = new UIRouterGlobals();\n        /** Provides services related to Transitions */\n        this.transitionService = new TransitionService(this);\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlMatcherFactory = new UrlMatcherFactory(this);\n        /**\n         * Deprecated for public use. Use [[urlService]] instead.\n         * @deprecated Use [[urlService]] instead\n         */\n        this.urlRouter = new UrlRouter(this);\n        /** Provides services related to the URL */\n        this.urlService = new UrlService(this);\n        /** Provides a registry for states, and related registration services */\n        this.stateRegistry = new StateRegistry(this);\n        /** Provides services related to states */\n        this.stateService = new StateService(this);\n        /** @hidden plugin instances are registered here */\n        this._plugins = {};\n        this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n        this.globals.$current = this.stateRegistry.root();\n        this.globals.current = this.globals.$current.self;\n        this.disposable(this.globals);\n        this.disposable(this.stateService);\n        this.disposable(this.stateRegistry);\n        this.disposable(this.transitionService);\n        this.disposable(this.urlService);\n        this.disposable(locationService);\n        this.disposable(locationConfig);\n    }\n    /** Registers an object to be notified when the router is disposed */\n    UIRouter.prototype.disposable = function (disposable) {\n        this._disposables.push(disposable);\n    };\n    /**\n     * Disposes this router instance\n     *\n     * When called, clears resources retained by the router by calling `dispose(this)` on all\n     * registered [[disposable]] objects.\n     *\n     * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n     *\n     * @param disposable (optional) the disposable to dispose\n     */\n    UIRouter.prototype.dispose = function (disposable) {\n        var _this = this;\n        if (disposable && isFunction(disposable.dispose)) {\n            disposable.dispose(this);\n            return undefined;\n        }\n        this._disposed = true;\n        this._disposables.slice().forEach(function (d) {\n            try {\n                typeof d.dispose === 'function' && d.dispose(_this);\n                removeFrom(_this._disposables, d);\n            }\n            catch (ignored) { }\n        });\n    };\n    /**\n     * Adds a plugin to UI-Router\n     *\n     * This method adds a UI-Router Plugin.\n     * A plugin can enhance or change UI-Router behavior using any public API.\n     *\n     * #### Example:\n     * ```js\n     * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n     *\n     * var plugin = router.addPlugin(MyCoolPlugin);\n     * ```\n     *\n     * ### Plugin authoring\n     *\n     * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n     *\n     * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n     * For example, it may configure router options or add a Transition Hook.\n     *\n     * The plugin can then be published as a separate module.\n     *\n     * #### Example:\n     * ```js\n     * export class MyAuthPlugin implements UIRouterPlugin {\n     *   constructor(router: UIRouter, options: any) {\n     *     this.name = \"MyAuthPlugin\";\n     *     let $transitions = router.transitionService;\n     *     let $state = router.stateService;\n     *\n     *     let authCriteria = {\n     *       to: (state) => state.data && state.data.requiresAuth\n     *     };\n     *\n     *     function authHook(transition: Transition) {\n     *       let authService = transition.injector().get('AuthService');\n     *       if (!authService.isAuthenticated()) {\n     *         return $state.target('login');\n     *       }\n     *     }\n     *\n     *     $transitions.onStart(authCriteria, authHook);\n     *   }\n     * }\n     * ```\n     *\n     * @param plugin one of:\n     *        - a plugin class which implements [[UIRouterPlugin]]\n     *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n     *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n     * @param options options to pass to the plugin class/factory\n     * @returns the registered plugin instance\n     */\n    UIRouter.prototype.plugin = function (plugin, options) {\n        if (options === void 0) { options = {}; }\n        var pluginInstance = new plugin(this, options);\n        if (!pluginInstance.name)\n            throw new Error('Required property `name` missing on plugin: ' + pluginInstance);\n        this._disposables.push(pluginInstance);\n        return (this._plugins[pluginInstance.name] = pluginInstance);\n    };\n    UIRouter.prototype.getPlugin = function (pluginName) {\n        return pluginName ? this._plugins[pluginName] : values(this._plugins);\n    };\n    return UIRouter;\n}());\nexport { UIRouter };\n//# sourceMappingURL=router.js.map",
    "/** @internalapi @module hooks */ /** */\nimport { Transition } from '../transition/transition';\nimport { UIRouter } from '../router';\nimport { Resolvable } from '../resolve';\nimport { inArray, uniqR, unnestR, values } from '../common';\nfunction addCoreResolvables(trans) {\n    trans.addResolvable(Resolvable.fromData(UIRouter, trans.router), '');\n    trans.addResolvable(Resolvable.fromData(Transition, trans), '');\n    trans.addResolvable(Resolvable.fromData('$transition$', trans), '');\n    trans.addResolvable(Resolvable.fromData('$stateParams', trans.params()), '');\n    trans.entering().forEach(function (state) {\n        trans.addResolvable(Resolvable.fromData('$state$', state), state);\n    });\n}\nexport var registerAddCoreResolvables = function (transitionService) {\n    return transitionService.onCreate({}, addCoreResolvables);\n};\nvar TRANSITION_TOKENS = ['$transition$', Transition];\nvar isTransition = inArray(TRANSITION_TOKENS);\n// References to Transition in the treeChanges pathnodes makes all\n// previous Transitions reachable in memory, causing a memory leak\n// This function removes resolves for '$transition$' and `Transition` from the treeChanges.\n// Do not use this on current transitions, only on old ones.\nexport var treeChangesCleanup = function (trans) {\n    var nodes = values(trans.treeChanges())\n        .reduce(unnestR, [])\n        .reduce(uniqR, []);\n    // If the resolvable is a Transition, return a new resolvable with null data\n    var replaceTransitionWithNull = function (r) {\n        return isTransition(r.token) ? Resolvable.fromData(r.token, null) : r;\n    };\n    nodes.forEach(function (node) {\n        node.resolvables = node.resolvables.map(replaceTransitionWithNull);\n    });\n};\n//# sourceMappingURL=coreResolvables.js.map",
    "/** @internalapi @module hooks */ /** */\nimport { isString, isFunction } from '../common/predicates';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nvar redirectToHook = function (trans) {\n    var redirect = trans.to().redirectTo;\n    if (!redirect)\n        return;\n    var $state = trans.router.stateService;\n    function handleResult(result) {\n        if (!result)\n            return;\n        if (result instanceof TargetState)\n            return result;\n        if (isString(result))\n            return $state.target(result, trans.params(), trans.options());\n        if (result['state'] || result['params'])\n            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n    }\n    if (isFunction(redirect)) {\n        return services.$q.when(redirect(trans)).then(handleResult);\n    }\n    return handleResult(redirect);\n};\nexport var registerRedirectToHook = function (transitionService) {\n    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);\n};\n//# sourceMappingURL=redirectTo.js.map",
    "/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName) {\n    return function (transition, state) {\n        var _state = state.$$state();\n        var hookFn = _state[hookName];\n        return hookFn(transition, state);\n    };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexport var registerOnExitHook = function (transitionService) {\n    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexport var registerOnRetainHook = function (transitionService) {\n    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexport var registerOnEnterHook = function (transitionService) {\n    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);\n};\n//# sourceMappingURL=onEnterExitRetain.js.map",
    "/** @internalapi @module hooks */ /** */\nimport { noop } from '../common/common';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { val } from '../common/hof';\nexport var RESOLVE_HOOK_PRIORITY = 1000;\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar eagerResolvePath = function (trans) {\n    return new ResolveContext(trans.treeChanges().to).resolvePath('EAGER', trans).then(noop);\n};\nexport var registerEagerResolvePath = function (transitionService) {\n    return transitionService.onStart({}, eagerResolvePath, { priority: RESOLVE_HOOK_PRIORITY });\n};\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nvar lazyResolveState = function (trans, state) {\n    return new ResolveContext(trans.treeChanges().to)\n        .subContext(state.$$state())\n        .resolvePath('LAZY', trans)\n        .then(noop);\n};\nexport var registerLazyResolveState = function (transitionService) {\n    return transitionService.onEnter({ entering: val(true) }, lazyResolveState, { priority: RESOLVE_HOOK_PRIORITY });\n};\n/**\n * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.\n *\n * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`\n *\n * After all entering states have been entered, this hook resolves any remaining Resolvables.\n * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].\n *\n * See [[StateDeclaration.resolve]]\n */\nvar resolveRemaining = function (trans) {\n    return new ResolveContext(trans.treeChanges().to).resolvePath('LAZY', trans).then(noop);\n};\nexport var registerResolveRemaining = function (transitionService) {\n    return transitionService.onFinish({}, resolveRemaining, { priority: RESOLVE_HOOK_PRIORITY });\n};\n//# sourceMappingURL=resolve.js.map",
    "/** @internalapi @module hooks */ /** */\nimport { noop } from '../common/common';\nimport { services } from '../common/coreservices';\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nvar loadEnteringViews = function (transition) {\n    var $q = services.$q;\n    var enteringViews = transition.views('entering');\n    if (!enteringViews.length)\n        return;\n    return $q.all(enteringViews.map(function (view) { return $q.when(view.load()); })).then(noop);\n};\nexport var registerLoadEnteringViews = function (transitionService) {\n    return transitionService.onFinish({}, loadEnteringViews);\n};\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nvar activateViews = function (transition) {\n    var enteringViews = transition.views('entering');\n    var exitingViews = transition.views('exiting');\n    if (!enteringViews.length && !exitingViews.length)\n        return;\n    var $view = transition.router.viewService;\n    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });\n    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });\n    $view.sync();\n};\nexport var registerActivateViews = function (transitionService) {\n    return transitionService.onSuccess({}, activateViews);\n};\n//# sourceMappingURL=views.js.map",
    "import { copy } from '../common/common';\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nvar updateGlobalState = function (trans) {\n    var globals = trans.router.globals;\n    var transitionSuccessful = function () {\n        globals.successfulTransitions.enqueue(trans);\n        globals.$current = trans.$to();\n        globals.current = globals.$current.self;\n        copy(trans.params(), globals.params);\n    };\n    var clearCurrentTransition = function () {\n        // Do not clear globals.transition if a different transition has started in the meantime\n        if (globals.transition === trans)\n            globals.transition = null;\n    };\n    trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n    trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\nexport var registerUpdateGlobalState = function (transitionService) {\n    return transitionService.onCreate({}, updateGlobalState);\n};\n//# sourceMappingURL=updateGlobals.js.map",
    "/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nvar updateUrl = function (transition) {\n    var options = transition.options();\n    var $state = transition.router.stateService;\n    var $urlRouter = transition.router.urlRouter;\n    // Dont update the url in these situations:\n    // The transition was triggered by a URL sync (options.source === 'url')\n    // The user doesn't want the url to update (options.location === false)\n    // The destination state, and all parents have no navigable url\n    if (options.source !== 'url' && options.location && $state.$current.navigable) {\n        var urlOptions = { replace: options.location === 'replace' };\n        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n    }\n    $urlRouter.update(true);\n};\nexport var registerUpdateUrl = function (transitionService) {\n    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n};\n//# sourceMappingURL=url.js.map",
    "import { services } from '../common/coreservices';\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nvar lazyLoadHook = function (transition) {\n    var router = transition.router;\n    function retryTransition() {\n        if (transition.originalTransition().options().source !== 'url') {\n            // The original transition was not triggered via url sync\n            // The lazy state should be loaded now, so re-try the original transition\n            var orig = transition.targetState();\n            return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n        }\n        // The original transition was triggered via url sync\n        // Run the URL rules and find the best match\n        var $url = router.urlService;\n        var result = $url.match($url.parts());\n        var rule = result && result.rule;\n        // If the best match is a state, redirect the transition (instead\n        // of calling sync() which supersedes the current transition)\n        if (rule && rule.type === 'STATE') {\n            var state = rule.state;\n            var params = result.match;\n            return router.stateService.target(state, params, transition.options());\n        }\n        // No matching state found, so let .sync() choose the best non-state match/otherwise\n        router.urlService.sync();\n    }\n    var promises = transition\n        .entering()\n        .filter(function (state) { return !!state.$$state().lazyLoad; })\n        .map(function (state) { return lazyLoadState(transition, state); });\n    return services.$q.all(promises).then(retryTransition);\n};\nexport var registerLazyLoadHook = function (transitionService) {\n    return transitionService.onBefore({ entering: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);\n};\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nexport function lazyLoadState(transition, state) {\n    var lazyLoadFn = state.$$state().lazyLoad;\n    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n    var promise = lazyLoadFn['_promise'];\n    if (!promise) {\n        var success = function (result) {\n            delete state.lazyLoad;\n            delete state.$$state().lazyLoad;\n            delete lazyLoadFn['_promise'];\n            return result;\n        };\n        var error = function (err) {\n            delete lazyLoadFn['_promise'];\n            return services.$q.reject(err);\n        };\n        promise = lazyLoadFn['_promise'] = services.$q\n            .when(lazyLoadFn(transition, state))\n            .then(updateStateRegistry)\n            .then(success, error);\n    }\n    /** Register any lazy loaded state definitions */\n    function updateStateRegistry(result) {\n        if (result && Array.isArray(result.states)) {\n            result.states.forEach(function (_state) { return transition.router.stateRegistry.register(_state); });\n        }\n        return result;\n    }\n    return promise;\n}\n//# sourceMappingURL=lazyLoad.js.map",
    "import { TransitionHook } from './transitionHook';\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n *\n * @interalapi\n */\nvar TransitionEventType = /** @class */ (function () {\n    /* tslint:disable:no-inferrable-types */\n    function TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) { reverseSort = false; }\n        if (getResultHandler === void 0) { getResultHandler = TransitionHook.HANDLE_RESULT; }\n        if (getErrorHandler === void 0) { getErrorHandler = TransitionHook.REJECT_ERROR; }\n        if (synchronous === void 0) { synchronous = false; }\n        this.name = name;\n        this.hookPhase = hookPhase;\n        this.hookOrder = hookOrder;\n        this.criteriaMatchPath = criteriaMatchPath;\n        this.reverseSort = reverseSort;\n        this.getResultHandler = getResultHandler;\n        this.getErrorHandler = getErrorHandler;\n        this.synchronous = synchronous;\n    }\n    return TransitionEventType;\n}());\nexport { TransitionEventType };\n//# sourceMappingURL=transitionEventType.js.map",
    "/** @internalapi @module hooks */ /** */\nimport { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans) {\n    var ignoredReason = trans._ignoredReason();\n    if (!ignoredReason)\n        return;\n    trace.traceTransitionIgnored(trans);\n    var pending = trans.router.globals.transition;\n    // The user clicked a link going back to the *current state* ('A')\n    // However, there is also a pending transition in flight (to 'B')\n    // Abort the transition to 'B' because the user now wants to be back at 'A'.\n    if (ignoredReason === 'SameAsCurrent' && pending) {\n        pending.abort();\n    }\n    return Rejection.ignored().toPromise();\n}\nexport var registerIgnoredTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n};\n//# sourceMappingURL=ignoredTransition.js.map",
    "/** @internalapi @module hooks */ /** */\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans) {\n    if (!trans.valid()) {\n        throw new Error(trans.error().toString());\n    }\n}\nexport var registerInvalidTransitionHook = function (transitionService) {\n    return transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n};\n//# sourceMappingURL=invalidTransition.js.map",
    "/** @publicapi @module transition */ /** */\nimport { TransitionHookScope, TransitionHookPhase, } from './interface';\nimport { Transition } from './transition';\nimport { makeEvent } from './hookRegistry';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport var defaultTransOpts = {\n    location: true,\n    relative: null,\n    inherit: false,\n    notify: true,\n    reload: false,\n    custom: {},\n    current: function () { return null; },\n    source: 'unknown',\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nvar TransitionService = /** @class */ (function () {\n    /** @hidden */\n    function TransitionService(_router) {\n        /** @hidden */\n        this._transitionCount = 0;\n        /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n        this._eventTypes = [];\n        /** @hidden The registered transition hooks */\n        this._registeredHooks = {};\n        /** @hidden The  paths on a criteria object */\n        this._criteriaPaths = {};\n        this._router = _router;\n        this.$view = _router.viewService;\n        this._deregisterHookFns = {};\n        this._pluginapi = (createProxyFunctions(val(this), {}, val(this), [\n            '_definePathType',\n            '_defineEvent',\n            '_getPathTypes',\n            '_getEvents',\n            'getHooks',\n        ]));\n        this._defineCorePaths();\n        this._defineCoreEvents();\n        this._registerCoreTransitionHooks();\n        _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n    }\n    /**\n     * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n     *\n     * Registers a transition lifecycle hook, which is invoked during transition construction.\n     *\n     * This low level hook should only be used by plugins.\n     * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n     * The Sticky States plugin uses this hook to modify the treechanges.\n     *\n     * ### Lifecycle\n     *\n     * `onCreate` hooks are invoked *while a transition is being constructed*.\n     *\n     * ### Return value\n     *\n     * The hook's return value is ignored\n     *\n     * @internalapi\n     * @param criteria defines which Transitions the Hook should be invoked for.\n     * @param callback the hook function which will be invoked.\n     * @param options the registration options\n     * @returns a function which deregisters the hook.\n     */\n    TransitionService.prototype.onCreate = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onBefore = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onStart = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onExit = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onRetain = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onEnter = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onFinish = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onSuccess = function (criteria, callback, options) {\n        return;\n    };\n    /** @inheritdoc */\n    TransitionService.prototype.onError = function (criteria, callback, options) {\n        return;\n    };\n    /**\n     * dispose\n     * @internalapi\n     */\n    TransitionService.prototype.dispose = function (router) {\n        values(this._registeredHooks).forEach(function (hooksArray) {\n            return hooksArray.forEach(function (hook) {\n                hook._deregistered = true;\n                removeFrom(hooksArray, hook);\n            });\n        });\n    };\n    /**\n     * Creates a new [[Transition]] object\n     *\n     * This is a factory function for creating new Transition objects.\n     * It is used internally by the [[StateService]] and should generally not be called by application code.\n     *\n     * @param fromPath the path to the current state (the from state)\n     * @param targetState the target state (destination)\n     * @returns a Transition\n     */\n    TransitionService.prototype.create = function (fromPath, targetState) {\n        return new Transition(fromPath, targetState, this._router);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCoreEvents = function () {\n        var Phase = TransitionHookPhase;\n        var TH = TransitionHook;\n        var paths = this._criteriaPaths;\n        var NORMAL_SORT = false, REVERSE_SORT = true;\n        var SYNCHRONOUS = true;\n        this._defineEvent('onCreate', Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n        this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n        this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n        this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n        this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n        this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n        this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n        this._defineEvent('onSuccess', Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n        this._defineEvent('onError', Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineCorePaths = function () {\n        var STATE = TransitionHookScope.STATE, TRANSITION = TransitionHookScope.TRANSITION;\n        this._definePathType('to', TRANSITION);\n        this._definePathType('from', TRANSITION);\n        this._definePathType('exiting', STATE);\n        this._definePathType('retained', STATE);\n        this._definePathType('entering', STATE);\n    };\n    /** @hidden */\n    TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n        if (reverseSort === void 0) { reverseSort = false; }\n        if (getResultHandler === void 0) { getResultHandler = TransitionHook.HANDLE_RESULT; }\n        if (getErrorHandler === void 0) { getErrorHandler = TransitionHook.REJECT_ERROR; }\n        if (synchronous === void 0) { synchronous = false; }\n        var eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n        this._eventTypes.push(eventType);\n        makeEvent(this, this, eventType);\n    };\n    /** @hidden */\n    // tslint:disable-next-line\n    TransitionService.prototype._getEvents = function (phase) {\n        var transitionHookTypes = isDefined(phase)\n            ? this._eventTypes.filter(function (type) { return type.hookPhase === phase; })\n            : this._eventTypes.slice();\n        return transitionHookTypes.sort(function (l, r) {\n            var cmpByPhase = l.hookPhase - r.hookPhase;\n            return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n        });\n    };\n    /**\n     * Adds a Path to be used as a criterion against a TreeChanges path\n     *\n     * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n     * Each state in the exiting path is checked against the criteria and returned as part of the match.\n     *\n     * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n     * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n     *\n     * @hidden\n     */\n    TransitionService.prototype._definePathType = function (name, hookScope) {\n        this._criteriaPaths[name] = { name: name, scope: hookScope };\n    };\n    /** * @hidden */\n    // tslint:disable-next-line\n    TransitionService.prototype._getPathTypes = function () {\n        return this._criteriaPaths;\n    };\n    /** @hidden */\n    TransitionService.prototype.getHooks = function (hookName) {\n        return this._registeredHooks[hookName];\n    };\n    /** @hidden */\n    TransitionService.prototype._registerCoreTransitionHooks = function () {\n        var fns = this._deregisterHookFns;\n        fns.addCoreResolves = registerAddCoreResolvables(this);\n        fns.ignored = registerIgnoredTransitionHook(this);\n        fns.invalid = registerInvalidTransitionHook(this);\n        // Wire up redirectTo hook\n        fns.redirectTo = registerRedirectToHook(this);\n        // Wire up onExit/Retain/Enter state hooks\n        fns.onExit = registerOnExitHook(this);\n        fns.onRetain = registerOnRetainHook(this);\n        fns.onEnter = registerOnEnterHook(this);\n        // Wire up Resolve hooks\n        fns.eagerResolve = registerEagerResolvePath(this);\n        fns.lazyResolve = registerLazyResolveState(this);\n        fns.resolveAll = registerResolveRemaining(this);\n        // Wire up the View management hooks\n        fns.loadViews = registerLoadEnteringViews(this);\n        fns.activateViews = registerActivateViews(this);\n        // Updates global state after a transition\n        fns.updateGlobals = registerUpdateGlobalState(this);\n        // After globals.current is updated at priority: 10000\n        fns.updateUrl = registerUpdateUrl(this);\n        // Lazy load state trees\n        fns.lazyLoad = registerLazyLoadHook(this);\n    };\n    return TransitionService;\n}());\nexport { TransitionService };\n//# sourceMappingURL=transitionService.js.map",
    "/** @publicapi @module state */ /** */\nimport { createProxyFunctions, defaults, extend, inArray, noop, removeFrom, silenceUncaughtInPromise, silentRejection, } from '../common/common';\nimport { isDefined, isObject, isString } from '../common/predicates';\nimport { Queue } from '../common/queue';\nimport { services } from '../common/coreservices';\nimport { PathUtils } from '../path/pathUtils';\nimport { PathNode } from '../path/pathNode';\nimport { defaultTransOpts } from '../transition/transitionService';\nimport { Rejection, RejectType } from '../transition/rejectFactory';\nimport { TargetState } from './targetState';\nimport { Param } from '../params/param';\nimport { Glob } from '../common/glob';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { lazyLoadState } from '../hooks/lazyLoad';\nimport { not, val } from '../common/hof';\n/**\n * Provides state related service functions\n *\n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nvar StateService = /** @class */ (function () {\n    /** @internalapi */\n    function StateService(/** @hidden */ router) {\n        this.router = router;\n        /** @internalapi */\n        this.invalidCallbacks = [];\n        /** @hidden */\n        this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n            if ($error$ instanceof Error && $error$.stack) {\n                console.error($error$);\n                console.error($error$.stack);\n            }\n            else if ($error$ instanceof Rejection) {\n                console.error($error$.toString());\n                if ($error$.detail && $error$.detail.stack)\n                    console.error($error$.detail.stack);\n            }\n            else {\n                console.error($error$);\n            }\n        };\n        var getters = ['current', '$current', 'params', 'transition'];\n        var boundFns = Object.keys(StateService.prototype).filter(not(inArray(getters)));\n        createProxyFunctions(val(StateService.prototype), this, val(this), boundFns);\n    }\n    Object.defineProperty(StateService.prototype, \"transition\", {\n        /**\n         * The [[Transition]] currently in progress (or null)\n         *\n         * This is a passthrough through to [[UIRouterGlobals.transition]]\n         */\n        get: function () {\n            return this.router.globals.transition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"params\", {\n        /**\n         * The latest successful state parameters\n         *\n         * This is a passthrough through to [[UIRouterGlobals.params]]\n         */\n        get: function () {\n            return this.router.globals.params;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"current\", {\n        /**\n         * The current [[StateDeclaration]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.current]]\n         */\n        get: function () {\n            return this.router.globals.current;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateService.prototype, \"$current\", {\n        /**\n         * The current [[StateObject]]\n         *\n         * This is a passthrough through to [[UIRouterGlobals.$current]]\n         */\n        get: function () {\n            return this.router.globals.$current;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internalapi */\n    StateService.prototype.dispose = function () {\n        this.defaultErrorHandler(noop);\n        this.invalidCallbacks = [];\n    };\n    /**\n     * Handler for when [[transitionTo]] is called with an invalid state.\n     *\n     * Invokes the [[onInvalid]] callbacks, in natural order.\n     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n     *\n     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n     *\n     * @internalapi\n     */\n    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {\n        var _this = this;\n        var fromState = PathUtils.makeTargetState(this.router.stateRegistry, fromPath);\n        var globals = this.router.globals;\n        var latestThing = function () { return globals.transitionHistory.peekTail(); };\n        var latest = latestThing();\n        var callbackQueue = new Queue(this.invalidCallbacks.slice());\n        var injector = new ResolveContext(fromPath).injector();\n        var checkForRedirect = function (result) {\n            if (!(result instanceof TargetState)) {\n                return;\n            }\n            var target = result;\n            // Recreate the TargetState, in case the state is now defined.\n            target = _this.target(target.identifier(), target.params(), target.options());\n            if (!target.valid()) {\n                return Rejection.invalid(target.error()).toPromise();\n            }\n            if (latestThing() !== latest) {\n                return Rejection.superseded().toPromise();\n            }\n            return _this.transitionTo(target.identifier(), target.params(), target.options());\n        };\n        function invokeNextCallback() {\n            var nextCallback = callbackQueue.dequeue();\n            if (nextCallback === undefined)\n                return Rejection.invalid(toState.error()).toPromise();\n            var callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });\n        }\n        return invokeNextCallback();\n    };\n    /**\n     * Registers an Invalid State handler\n     *\n     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n     * has been called with an invalid state reference parameter\n     *\n     * Example:\n     * ```js\n     * stateService.onInvalid(function(to, from, injector) {\n     *   if (to.name() === 'foo') {\n     *     let lazyLoader = injector.get('LazyLoadService');\n     *     return lazyLoader.load('foo')\n     *         .then(() => stateService.target('foo'));\n     *   }\n     * });\n     * ```\n     *\n     * @param {function} callback invoked when the toState is invalid\n     *   This function receives the (invalid) toState, the fromState, and an injector.\n     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n     *   If one is returned, it is treated as a redirect.\n     *\n     * @returns a function which deregisters the callback\n     */\n    StateService.prototype.onInvalid = function (callback) {\n        this.invalidCallbacks.push(callback);\n        return function deregisterListener() {\n            removeFrom(this.invalidCallbacks)(callback);\n        }.bind(this);\n    };\n    /**\n     * Reloads the current state\n     *\n     * A method that force reloads the current state, or a partial state hierarchy.\n     * All resolves are re-resolved, and components reinstantiated.\n     *\n     * #### Example:\n     * ```js\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * ```\n     *\n     * Note: `reload()` is just an alias for:\n     *\n     * ```js\n     * $state.transitionTo($state.current, $state.params, {\n     *   reload: true, inherit: false\n     * });\n     * ```\n     *\n     * @param reloadState A state name or a state object.\n     *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n     *\n     * #### Example:\n     * ```js\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n     * //and current state is 'contacts.detail.item'\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * ```\n     *\n     * @returns A promise representing the state of the new transition. See [[StateService.go]]\n     */\n    StateService.prototype.reload = function (reloadState) {\n        return this.transitionTo(this.current, this.params, {\n            reload: isDefined(reloadState) ? reloadState : true,\n            inherit: false,\n            notify: false,\n        });\n    };\n    /**\n     * Transition to a different state and/or parameters\n     *\n     * Convenience method for transitioning to a new state.\n     *\n     * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n     * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n     * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n     * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n     * inherit from the current parameter values (because of `inherit: true`).\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to Absolute state name, state object, or relative state path (relative to current state).\n     *\n     * Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to the parent state\n     * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n     * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n     *\n     * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n     *\n     *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n     *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n     *\n     * @param options Transition options\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     */\n    StateService.prototype.go = function (to, params, options) {\n        var defautGoOpts = { relative: this.$current, inherit: true };\n        var transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n        return this.transitionTo(to, params, transOpts);\n    };\n    /**\n     * Creates a [[TargetState]]\n     *\n     * This is a factory method for creating a TargetState\n     *\n     * This may be returned from a Transition Hook to redirect a transition, for example.\n     */\n    StateService.prototype.target = function (identifier, params, options) {\n        if (options === void 0) { options = {}; }\n        // If we're reloading, find the state object to reload from\n        if (isObject(options.reload) && !options.reload.name)\n            throw new Error('Invalid reload state object');\n        var reg = this.router.stateRegistry;\n        options.reloadState =\n            options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);\n        if (options.reload && !options.reloadState)\n            throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        return new TargetState(this.router.stateRegistry, identifier, params, options);\n    };\n    StateService.prototype.getCurrentPath = function () {\n        var _this = this;\n        var globals = this.router.globals;\n        var latestSuccess = globals.successfulTransitions.peekTail();\n        var rootPath = function () { return [new PathNode(_this.router.stateRegistry.root())]; };\n        return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n    };\n    /**\n     * Low-level method for transitioning to a new state.\n     *\n     * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to State name or state object.\n     * @param toParams A map of the parameters that will be sent to the state,\n     *      will populate $stateParams.\n     * @param options Transition options\n     *\n     * @returns A promise representing the state of the new transition. See [[go]]\n     */\n    StateService.prototype.transitionTo = function (to, toParams, options) {\n        var _this = this;\n        if (toParams === void 0) { toParams = {}; }\n        if (options === void 0) { options = {}; }\n        var router = this.router;\n        var globals = router.globals;\n        options = defaults(options, defaultTransOpts);\n        var getCurrent = function () { return globals.transition; };\n        options = extend(options, { current: getCurrent });\n        var ref = this.target(to, toParams, options);\n        var currentPath = this.getCurrentPath();\n        if (!ref.exists())\n            return this._handleInvalidTargetState(currentPath, ref);\n        if (!ref.valid())\n            return silentRejection(ref.error());\n        /**\n         * Special handling for Ignored, Aborted, and Redirected transitions\n         *\n         * The semantics for the transition.run() promise and the StateService.transitionTo()\n         * promise differ. For instance, the run() promise may be rejected because it was\n         * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n         * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n         */\n        var rejectedTransitionHandler = function (trans) { return function (error) {\n            if (error instanceof Rejection) {\n                var isLatest = router.globals.lastStartedTransitionId === trans.$id;\n                if (error.type === RejectType.IGNORED) {\n                    isLatest && router.urlRouter.update();\n                    // Consider ignored `Transition.run()` as a successful `transitionTo`\n                    return services.$q.when(globals.current);\n                }\n                var detail = error.detail;\n                if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n                    // by returning the promise for the new (redirect) `Transition.run()`.\n                    var redirect = trans.redirect(detail);\n                    return redirect.run().catch(rejectedTransitionHandler(redirect));\n                }\n                if (error.type === RejectType.ABORTED) {\n                    isLatest && router.urlRouter.update();\n                    return services.$q.reject(error);\n                }\n            }\n            var errorHandler = _this.defaultErrorHandler();\n            errorHandler(error);\n            return services.$q.reject(error);\n        }; };\n        var transition = this.router.transitionService.create(currentPath, ref);\n        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n        silenceUncaughtInPromise(transitionToPromise); // issue #2676\n        // Return a promise for the transition, which also has the transition object on it.\n        return extend(transitionToPromise, { transition: transition });\n    };\n    /**\n     * Checks if the current state *is* the provided state\n     *\n     * Similar to [[includes]] but only checks for the full state name.\n     * If params is supplied then it will be tested for strict equality against the current\n     * active params object, so all params must match with none missing and no extras.\n     *\n     * #### Example:\n     * ```js\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     * ```\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * ```html\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * ```\n     *\n     * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns Returns true if it is the state.\n     */\n    StateService.prototype.is = function (stateOrName, params, options) {\n        options = defaults(options, { relative: this.$current });\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!isDefined(state))\n            return undefined;\n        if (this.$current !== state)\n            return false;\n        if (!params)\n            return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return Param.equals(schema, Param.values(schema, params), this.params);\n    };\n    /**\n     * Checks if the current state *includes* the provided state\n     *\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * #### Example when `$state.$current.name === 'contacts.details.item'`\n     * ```js\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     * ```\n     *\n     * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n     * ```js\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * ```\n     *\n     * @param stateOrName A partial name, relative name, glob pattern,\n     *   or state object to be searched for within the current state name.\n     * @param params A param object, e.g. `{sectionId: section.id}`,\n     *   that you'd like to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    StateService.prototype.includes = function (stateOrName, params, options) {\n        options = defaults(options, { relative: this.$current });\n        var glob = isString(stateOrName) && Glob.fromString(stateOrName);\n        if (glob) {\n            if (!glob.matches(this.$current.name))\n                return false;\n            stateOrName = this.$current.name;\n        }\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n        if (!isDefined(state))\n            return undefined;\n        if (!isDefined(include[state.name]))\n            return false;\n        if (!params)\n            return true;\n        var schema = state.parameters({ inherit: true, matchingKeys: params });\n        return Param.equals(schema, Param.values(schema, params), this.params);\n    };\n    /**\n     * Generates a URL for a state and parameters\n     *\n     * Returns the url for the given state populated with the given params.\n     *\n     * #### Example:\n     * ```js\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * ```\n     *\n     * @param stateOrName The state name or state object you'd like to generate a url from.\n     * @param params An object of parameter values to fill the state's required parameters.\n     * @param options Options object. The options are:\n     *\n     * @returns {string} compiled state url\n     */\n    StateService.prototype.href = function (stateOrName, params, options) {\n        var defaultHrefOpts = {\n            lossy: true,\n            inherit: true,\n            absolute: false,\n            relative: this.$current,\n        };\n        options = defaults(options, defaultHrefOpts);\n        params = params || {};\n        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n        if (!isDefined(state))\n            return null;\n        if (options.inherit)\n            params = this.params.$inherit(params, this.$current, state);\n        var nav = state && options.lossy ? state.navigable : state;\n        if (!nav || nav.url === undefined || nav.url === null) {\n            return null;\n        }\n        return this.router.urlRouter.href(nav.url, params, { absolute: options.absolute });\n    };\n    /**\n     * Sets or gets the default [[transitionTo]] error handler.\n     *\n     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n     * This includes errors caused by resolves and transition hooks.\n     *\n     * Note:\n     * This handler does not receive certain Transition rejections.\n     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n     *\n     * The built-in default error handler logs the error to the console.\n     *\n     * You can provide your own custom handler.\n     *\n     * #### Example:\n     * ```js\n     * stateService.defaultErrorHandler(function() {\n     *   // Do not log transitionTo errors\n     * });\n     * ```\n     *\n     * @param handler a global error handler function\n     * @returns the current global error handler\n     */\n    StateService.prototype.defaultErrorHandler = function (handler) {\n        return (this._defaultErrorHandler = handler || this._defaultErrorHandler);\n    };\n    StateService.prototype.get = function (stateOrName, base) {\n        var reg = this.router.stateRegistry;\n        if (arguments.length === 0)\n            return reg.get();\n        return reg.get(stateOrName, base || this.$current);\n    };\n    /**\n     * Lazy loads a state\n     *\n     * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n     *\n     * @param stateOrName the state that should be lazy loaded\n     * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n     * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n     * This noop transition is not actually run.\n     *\n     * @returns a promise to lazy load\n     */\n    StateService.prototype.lazyLoad = function (stateOrName, transition) {\n        var state = this.get(stateOrName);\n        if (!state || !state.lazyLoad)\n            throw new Error('Can not lazy load ' + stateOrName);\n        var currentPath = this.getCurrentPath();\n        var target = PathUtils.makeTargetState(this.router.stateRegistry, currentPath);\n        transition = transition || this.router.transitionService.create(currentPath, target);\n        return lazyLoadState(transition, state);\n    };\n    return StateService;\n}());\nexport { StateService };\n//# sourceMappingURL=stateService.js.map",
    "/** @internalapi @module vanilla */ /** */\nimport { isArray, isObject } from '../common/index';\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport var $q = {\n    /** Normalizes a value as a promise */\n    when: function (val) { return new Promise(function (resolve, reject) { return resolve(val); }); },\n    /** Normalizes a value as a promise rejection */\n    reject: function (val) {\n        return new Promise(function (resolve, reject) {\n            reject(val);\n        });\n    },\n    /** @returns a deferred object, which has `resolve` and `reject` functions */\n    defer: function () {\n        var deferred = {};\n        deferred.promise = new Promise(function (resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n    /** Like Promise.all(), but also supports object key/promise notation like $q */\n    all: function (promises) {\n        if (isArray(promises)) {\n            return Promise.all(promises);\n        }\n        if (isObject(promises)) {\n            // Convert promises map to promises array.\n            // When each promise resolves, map it to a tuple { key: key, val: val }\n            var chain = Object.keys(promises).map(function (key) { return promises[key].then(function (val) { return ({ key: key, val: val }); }); });\n            // Then wait for all promises to resolve, and convert them back to an object\n            return $q.all(chain).then(function (values) {\n                return values.reduce(function (acc, tuple) {\n                    acc[tuple.key] = tuple.val;\n                    return acc;\n                }, {});\n            });\n        }\n    },\n};\n//# sourceMappingURL=q.js.map",
    "/** @internalapi @module vanilla */ /** */\nimport { extend, assertPredicate, isFunction, isArray, isInjectable, } from '../common/index';\n// globally available injectables\nvar globals = {};\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport var $injector = {\n    /** Gets an object from DI based on a string token */\n    get: function (name) { return globals[name]; },\n    /** Returns true if an object named `name` exists in global DI */\n    has: function (name) { return $injector.get(name) != null; },\n    /**\n     * Injects a function\n     *\n     * @param fn the function to inject\n     * @param context the function's `this` binding\n     * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n     */\n    invoke: function (fn, context, locals) {\n        var all = extend({}, globals, locals || {});\n        var params = $injector.annotate(fn);\n        var ensureExist = assertPredicate(function (key) { return all.hasOwnProperty(key); }, function (key) { return \"DI can't find injectable: '\" + key + \"'\"; });\n        var args = params.filter(ensureExist).map(function (x) { return all[x]; });\n        if (isFunction(fn))\n            return fn.apply(context, args);\n        else\n            return fn.slice(-1)[0].apply(context, args);\n    },\n    /**\n     * Returns a function's dependencies\n     *\n     * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n     * @return an array of `string`s\n     */\n    annotate: function (fn) {\n        if (!isInjectable(fn))\n            throw new Error(\"Not an injectable function: \" + fn);\n        if (fn && fn.$inject)\n            return fn.$inject;\n        if (isArray(fn))\n            return fn.slice(0, -1);\n        var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n        return result || [];\n    },\n};\n//# sourceMappingURL=injector.js.map",
    "/** @internalapi @module vanilla */ /** */\nimport { identity, unnestR, isArray, splitEqual, splitHash, splitQuery, } from '../common';\nexport var keyValsToObjectR = function (accum, _a) {\n    var key = _a[0], val = _a[1];\n    if (!accum.hasOwnProperty(key)) {\n        accum[key] = val;\n    }\n    else if (isArray(accum[key])) {\n        accum[key].push(val);\n    }\n    else {\n        accum[key] = [accum[key], val];\n    }\n    return accum;\n};\nexport var getParams = function (queryString) {\n    return queryString\n        .split('&')\n        .filter(identity)\n        .map(splitEqual)\n        .reduce(keyValsToObjectR, {});\n};\nexport function parseUrl(url) {\n    var orEmptyString = function (x) { return x || ''; };\n    var _a = splitHash(url).map(orEmptyString), beforehash = _a[0], hash = _a[1];\n    var _b = splitQuery(beforehash).map(orEmptyString), path = _b[0], search = _b[1];\n    return { path: path, search: search, hash: hash, url: url };\n}\nexport var buildUrl = function (loc) {\n    var path = loc.path();\n    var searchObject = loc.search();\n    var hash = loc.hash();\n    var search = Object.keys(searchObject)\n        .map(function (key) {\n        var param = searchObject[key];\n        var vals = isArray(param) ? param : [param];\n        return vals.map(function (val) { return key + '=' + val; });\n    })\n        .reduce(unnestR, [])\n        .join('&');\n    return path + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n};\nexport function locationPluginFactory(name, isHtml5, serviceClass, configurationClass) {\n    return function (uiRouter) {\n        var service = (uiRouter.locationService = new serviceClass(uiRouter));\n        var configuration = (uiRouter.locationConfig = new configurationClass(uiRouter, isHtml5));\n        function dispose(router) {\n            router.dispose(service);\n            router.dispose(configuration);\n        }\n        return { name: name, service: service, configuration: configuration, dispose: dispose };\n    };\n}\n//# sourceMappingURL=utils.js.map",
    "/** @internalapi @module vanilla */ /** */\nimport { deregAll, isDefined, removeFrom, root } from '../common';\nimport { buildUrl, getParams, parseUrl } from './utils';\n/** A base `LocationServices` */\nvar BaseLocationServices = /** @class */ (function () {\n    function BaseLocationServices(router, fireAfterUpdate) {\n        var _this = this;\n        this.fireAfterUpdate = fireAfterUpdate;\n        this._listeners = [];\n        this._listener = function (evt) { return _this._listeners.forEach(function (cb) { return cb(evt); }); };\n        this.hash = function () { return parseUrl(_this._get()).hash; };\n        this.path = function () { return parseUrl(_this._get()).path; };\n        this.search = function () { return getParams(parseUrl(_this._get()).search); };\n        this._location = root.location;\n        this._history = root.history;\n    }\n    BaseLocationServices.prototype.url = function (url, replace) {\n        if (replace === void 0) { replace = true; }\n        if (isDefined(url) && url !== this._get()) {\n            this._set(null, null, url, replace);\n            if (this.fireAfterUpdate) {\n                this._listeners.forEach(function (cb) { return cb({ url: url }); });\n            }\n        }\n        return buildUrl(this);\n    };\n    BaseLocationServices.prototype.onChange = function (cb) {\n        var _this = this;\n        this._listeners.push(cb);\n        return function () { return removeFrom(_this._listeners, cb); };\n    };\n    BaseLocationServices.prototype.dispose = function (router) {\n        deregAll(this._listeners);\n    };\n    return BaseLocationServices;\n}());\nexport { BaseLocationServices };\n//# sourceMappingURL=baseLocationService.js.map",
    "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/** @internalapi @module vanilla */ /** */\nimport { root, trimHashVal } from '../common';\nimport { BaseLocationServices } from './baseLocationService';\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nvar HashLocationService = /** @class */ (function (_super) {\n    __extends(HashLocationService, _super);\n    function HashLocationService(router) {\n        var _this = _super.call(this, router, false) || this;\n        root.addEventListener('hashchange', _this._listener, false);\n        return _this;\n    }\n    HashLocationService.prototype._get = function () {\n        return trimHashVal(this._location.hash);\n    };\n    HashLocationService.prototype._set = function (state, title, url, replace) {\n        this._location.hash = url;\n    };\n    HashLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        root.removeEventListener('hashchange', this._listener);\n    };\n    return HashLocationService;\n}(BaseLocationServices));\nexport { HashLocationService };\n//# sourceMappingURL=hashLocationService.js.map",
    "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/** @internalapi @module vanilla */ /** */\nimport { BaseLocationServices } from './baseLocationService';\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nvar MemoryLocationService = /** @class */ (function (_super) {\n    __extends(MemoryLocationService, _super);\n    function MemoryLocationService(router) {\n        return _super.call(this, router, true) || this;\n    }\n    MemoryLocationService.prototype._get = function () {\n        return this._url;\n    };\n    MemoryLocationService.prototype._set = function (state, title, url, replace) {\n        this._url = url;\n    };\n    return MemoryLocationService;\n}(BaseLocationServices));\nexport { MemoryLocationService };\n//# sourceMappingURL=memoryLocationService.js.map",
    "var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BaseLocationServices } from './baseLocationService';\nimport { root, splitHash, splitQuery, stripLastPathElement } from '../common';\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nvar PushStateLocationService = /** @class */ (function (_super) {\n    __extends(PushStateLocationService, _super);\n    function PushStateLocationService(router) {\n        var _this = _super.call(this, router, true) || this;\n        _this._config = router.urlService.config;\n        root.addEventListener('popstate', _this._listener, false);\n        return _this;\n    }\n    /**\n     * Gets the base prefix without:\n     * - trailing slash\n     * - trailing filename\n     * - protocol and hostname\n     *\n     * If <base href='/base/'>, this returns '/base'.\n     * If <base href='/foo/base/'>, this returns '/foo/base'.\n     * If <base href='/base/index.html'>, this returns '/base'.\n     * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n     * If <base href='/base'>, this returns ''.\n     * If <base href='http://localhost:8080'>, this returns ''.\n     * If <base href='http://localhost:8080/'>, this returns ''.\n     *\n     * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n     */\n    PushStateLocationService.prototype._getBasePrefix = function () {\n        return stripLastPathElement(this._config.baseHref());\n    };\n    PushStateLocationService.prototype._get = function () {\n        var _a = this._location, pathname = _a.pathname, hash = _a.hash, search = _a.search;\n        search = splitQuery(search)[1]; // strip ? if found\n        hash = splitHash(hash)[1]; // strip # if found\n        var basePrefix = this._getBasePrefix();\n        var exactBaseHrefMatch = pathname === this._config.baseHref();\n        var startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n        pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n        return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n    };\n    PushStateLocationService.prototype._set = function (state, title, url, replace) {\n        var basePrefix = this._getBasePrefix();\n        var slash = url && url[0] !== '/' ? '/' : '';\n        var fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n        if (replace) {\n            this._history.replaceState(state, title, fullUrl);\n        }\n        else {\n            this._history.pushState(state, title, fullUrl);\n        }\n    };\n    PushStateLocationService.prototype.dispose = function (router) {\n        _super.prototype.dispose.call(this, router);\n        root.removeEventListener('popstate', this._listener);\n    };\n    return PushStateLocationService;\n}(BaseLocationServices));\nexport { PushStateLocationService };\n//# sourceMappingURL=pushStateLocationService.js.map",
    "import { isDefined } from '../common/predicates';\nimport { noop } from '../common/common';\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nvar MemoryLocationConfig = /** @class */ (function () {\n    function MemoryLocationConfig() {\n        var _this = this;\n        this.dispose = noop;\n        this._baseHref = '';\n        this._port = 80;\n        this._protocol = 'http';\n        this._host = 'localhost';\n        this._hashPrefix = '';\n        this.port = function () { return _this._port; };\n        this.protocol = function () { return _this._protocol; };\n        this.host = function () { return _this._host; };\n        this.baseHref = function () { return _this._baseHref; };\n        this.html5Mode = function () { return false; };\n        this.hashPrefix = function (newval) { return (isDefined(newval) ? (_this._hashPrefix = newval) : _this._hashPrefix); };\n    }\n    return MemoryLocationConfig;\n}());\nexport { MemoryLocationConfig };\n//# sourceMappingURL=memoryLocationConfig.js.map",
    "/** @internalapi @module vanilla */\n/** */\nimport { isDefined, isUndefined } from '../common/predicates';\n/** A `LocationConfig` that delegates to the browser's `location` object */\nvar BrowserLocationConfig = /** @class */ (function () {\n    function BrowserLocationConfig(router, _isHtml5) {\n        if (_isHtml5 === void 0) { _isHtml5 = false; }\n        this._isHtml5 = _isHtml5;\n        this._baseHref = undefined;\n        this._hashPrefix = '';\n    }\n    BrowserLocationConfig.prototype.port = function () {\n        if (location.port) {\n            return Number(location.port);\n        }\n        return this.protocol() === 'https' ? 443 : 80;\n    };\n    BrowserLocationConfig.prototype.protocol = function () {\n        return location.protocol.replace(/:/g, '');\n    };\n    BrowserLocationConfig.prototype.host = function () {\n        return location.hostname;\n    };\n    BrowserLocationConfig.prototype.html5Mode = function () {\n        return this._isHtml5;\n    };\n    BrowserLocationConfig.prototype.hashPrefix = function (newprefix) {\n        return isDefined(newprefix) ? (this._hashPrefix = newprefix) : this._hashPrefix;\n    };\n    BrowserLocationConfig.prototype.baseHref = function (href) {\n        if (isDefined(href))\n            this._baseHref = href;\n        if (isUndefined(this._baseHref))\n            this._baseHref = this.getBaseHref();\n        return this._baseHref;\n    };\n    BrowserLocationConfig.prototype.getBaseHref = function () {\n        var baseTag = document.getElementsByTagName('base')[0];\n        if (baseTag && baseTag.href) {\n            return baseTag.href.replace(/^(https?:)?\\/\\/[^/]*/, '');\n        }\n        return this._isHtml5 ? '/' : location.pathname || '/';\n    };\n    BrowserLocationConfig.prototype.dispose = function () { };\n    return BrowserLocationConfig;\n}());\nexport { BrowserLocationConfig };\n//# sourceMappingURL=browserLocationConfig.js.map",
    "/** @internalapi @module vanilla */ /** */\nimport { BrowserLocationConfig } from './browserLocationConfig';\nimport { HashLocationService } from './hashLocationService';\nimport { locationPluginFactory } from './utils';\nimport { PushStateLocationService } from './pushStateLocationService';\nimport { MemoryLocationService } from './memoryLocationService';\nimport { MemoryLocationConfig } from './memoryLocationConfig';\nimport { $injector } from './injector';\nimport { $q } from './q';\nimport { services } from '../common/coreservices';\nexport function servicesPlugin(router) {\n    services.$injector = $injector;\n    services.$q = $q;\n    return { name: 'vanilla.services', $q: $q, $injector: $injector, dispose: function () { return null; } };\n}\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport var hashLocationPlugin = locationPluginFactory('vanilla.hashBangLocation', false, HashLocationService, BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport var pushStateLocationPlugin = locationPluginFactory('vanilla.pushStateLocation', true, PushStateLocationService, BrowserLocationConfig);\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport var memoryLocationPlugin = locationPluginFactory('vanilla.memoryLocation', false, MemoryLocationService, MemoryLocationConfig);\n//# sourceMappingURL=plugins.js.map",
    "/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @preferred @publicapi @module core\n */ /** */\n/** @internalapi */\nvar UIRouterPluginBase = /** @class */ (function () {\n    function UIRouterPluginBase() {\n    }\n    UIRouterPluginBase.prototype.dispose = function (router) { };\n    return UIRouterPluginBase;\n}());\nexport { UIRouterPluginBase };\n//# sourceMappingURL=interface.js.map",
    "/** @publicapi @module common */ /** */\nexport * from './common/index';\nexport * from './params/index';\nexport * from './path/index';\nexport * from './resolve/index';\nexport * from './state/index';\nexport * from './transition/index';\nexport * from './url/index';\nexport * from './view/index';\nexport * from './globals';\nexport * from './router';\nexport * from './vanilla';\nexport * from './interface';\n//# sourceMappingURL=index.js.map",
    "/**\n * # React Specific API\n *\n *\n * UI-Router for React relies heavily on [`@uirouter/core`](http://github.com/ui-router/core).\n * The following APIs are extensions to the core ui-router APIs, specific to `ui-router-react`.\n *\n * @preferred\n * @reactapi\n * @module react\n */ /** */\n\nexport * from '@uirouter/core';\nexport * from './interface';\nexport * from './reactViews';\nexport * from './components/components';\n\nexport { UIRouterReact, StartMethodCalledMoreThanOnceError } from './core';\nexport { UIRouter } from './components/components';\n",
    "/**\n * @reactapi\n * @module components\n */ /** */\nimport * as React from 'react';\nimport { Component, Children } from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { UIRouterPlugin, servicesPlugin } from '@uirouter/core';\n\nimport { UIRouterReact, ReactStateDeclaration } from '../index';\n\nexport const {\n  /** @internalapi */\n  Provider: UIRouterProvider,\n  /**\n   * <UIRouterConsumer> component lets you access the UIRouter instance\n   * anywhere in the component tree, by simply wrapping your component and\n   * using the function-as-child pattern to pass the instance via props.\n   *\n   * #### Example:\n   * ```jsx\n   * <UIRouterConsumer>\n   *  {router => <MyComponent router={router} />}\n   * </UIRouterConsumer>\n   * ```\n   */\n  Consumer: UIRouterConsumer,\n} = React.createContext<UIRouterReact>(undefined);\n\nexport interface UIRouterProps {\n  plugins?: any[]; // should fix type\n  states?: ReactStateDeclaration[];\n  config?: (router: UIRouterReact) => void;\n  router?: UIRouterReact;\n}\n\nexport interface UIRouterState {\n  id?: number;\n  loaded?: boolean;\n  component?: string;\n  props?: any;\n}\n\n/** @hidden */\nexport const InstanceOrPluginsMissingError = new Error(`Router instance or plugins missing.\nYou must either provide a location plugin via the plugins prop:\n\n<UIRouter plugins={[pushStateLocationPlugin]} states={[···]}>\n  <UIView />\n</UIRouter>\n\nor initialize the router yourself and pass the instance via props:\n\nconst router = new UIRouterReact();\nrouter.plugin(pushStateLocationPlugin);\n···\n<UIRouter router={router}>\n  <UIView />\n</UIRouter>\n`);\n\n/** @hidden */\nexport const UIRouterInstanceUndefinedError = new Error(\n  `UIRouter instance is undefined. Did you forget to include the <UIRouter> as root component?`\n);\n\nexport class UIRouter extends Component<UIRouterProps, UIRouterState> {\n  static propTypes = {\n    plugins: PropTypes.arrayOf(PropTypes.func),\n    states: PropTypes.arrayOf(PropTypes.object),\n    config: PropTypes.func,\n    children: PropTypes.element.isRequired,\n    router: PropTypes.object,\n  };\n\n  router: UIRouterReact;\n\n  constructor(props, context) {\n    super(props, context);\n    // check if a router instance is provided\n    if (props.router) {\n      this.router = props.router;\n    } else if (props.plugins) {\n      this.router = new UIRouterReact();\n      this.router.plugin(servicesPlugin);\n      props.plugins.forEach(plugin => this.router.plugin(plugin));\n      if (props.config) props.config(this.router);\n      (props.states || []).forEach(state => this.router.stateRegistry.register(state));\n    } else {\n      throw InstanceOrPluginsMissingError;\n    }\n    this.router.start();\n  }\n\n  render() {\n    return <UIRouterProvider value={this.router}>{this.props.children}</UIRouterProvider>;\n  }\n}\n",
    "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n",
    "/**\n * @reactapi\n * @module components\n */ /** */\nimport * as React from 'react';\nimport {\n  Component,\n  ValidationMap,\n  createElement,\n  cloneElement,\n  isValidElement,\n  SFC,\n  ClassType,\n  StatelessComponent,\n  ComponentClass,\n  ClassicComponentClass,\n} from 'react';\nimport * as PropTypes from 'prop-types';\n\nimport { ActiveUIView, ViewContext, Transition, ResolveContext, StateParams, applyPairs } from '@uirouter/core';\n\nimport { UIRouterReact, UIRouterConsumer } from '../index';\nimport { ReactViewConfig } from '../reactViews';\nimport { UIRouterInstanceUndefinedError } from './UIRouter';\n\n/** @internalapi */\nlet id = 0;\n\n/** @internalapi */\nexport interface UIViewAddress {\n  context: ViewContext;\n  fqn: string;\n}\n\n/**\n * Interface for [[InjectedProps.resolves]]\n *\n * This Typescript interface shows what fields are available on the `resolves` field.\n */\nexport interface UIViewResolves {\n  /**\n   * Any key/value pair defined by a state's resolve\n   *\n   * If a state defines any [[ReactStateDeclaration.resolve]]s, they will be found on this object.\n   */\n  [key: string]: any;\n  /**\n   * The `StateParams` for the `Transition` that activated the component\n   *\n   * This is an alias for:\n   * ```js\n   * let $stateParams = $transition$.params(\"to\");\n   * ```\n   */\n  $stateParams: StateParams;\n  /** The `Transition` that activated the component */\n  $transition$: Transition;\n}\n\n/**\n * Function type for [[UIViewProps.render]]\n *\n * If the `render` function prop is provided, the `UIView` will use it instead of rendering the component by itself.\n * @internalapi\n */\nexport type RenderPropCallback = (\n  Component: StatelessComponent<any> | ComponentClass<any> | ClassicComponentClass<any>,\n  Props: any\n) => JSX.Element | null;\n\nexport interface UIViewInjectedProps {\n  transition?: Transition;\n  resolves?: UIViewResolves;\n  className?: string;\n  style?: Object;\n}\n\n/** Component Props for `UIView` */\nexport interface UIViewProps {\n  router?: UIRouterReact;\n  parentUIView?: UIViewAddress;\n  name?: string;\n  className?: string;\n  style?: Object;\n  render?: RenderPropCallback;\n}\n\n/** Component State for `UIView` */\nexport interface UIViewState {\n  id?: number;\n  loaded?: boolean;\n  component?: string | SFC<any> | ClassType<any, any, any> | ComponentClass<any>;\n  props?: any;\n}\n\nexport const TransitionPropCollisionError = new Error(\n  '`transition` cannot be used as resolve token. ' +\n    'Please rename your resolve to avoid conflicts with the router transition.'\n);\n\n/** @internalapi */\nexport const { Provider: UIViewProvider, Consumer: UIViewConsumer } = React.createContext<UIViewAddress>(undefined);\n\nclass View extends Component<UIViewProps, UIViewState> {\n  // This object contains all the metadata for this UIView\n  uiViewData: ActiveUIView;\n\n  // This object contains only the state context which created this <UIView/> component\n  // and the UIView's fully qualified name. This object is made available to children via `context`\n  uiViewAddress: UIViewAddress;\n\n  // Deregisters the UIView when it is unmounted\n  deregister: Function;\n\n  // Bind the rendered component instance in order to call its uiCanExit hook\n  componentInstance: any;\n  // Removes th Hook when the UIView is unmounted\n  removeHook: Function;\n\n  state: UIViewState = {\n    loaded: false,\n    component: 'div',\n    props: {},\n  };\n\n  static propTypes: ValidationMap<UIViewProps> = {\n    router: PropTypes.object.isRequired,\n    parentUIView: PropTypes.object,\n    name: PropTypes.string,\n    className: PropTypes.string,\n    style: PropTypes.object,\n    render: PropTypes.func,\n  };\n\n  render() {\n    let { children, render } = this.props;\n    let { component, props, loaded } = this.state;\n    // register reference of child component\n    // register new hook right after component has been rendered\n    let stateName: string = this.uiViewAddress && this.uiViewAddress.context && this.uiViewAddress.context.name;\n\n    // only class components can implement the\n    // uiCanExit hook and ref doesn't work on\n    // stateless function components\n    if (\n      typeof component !== 'string' &&\n      (!!component.render || (component.prototype && !!component.prototype.render))\n    ) {\n      props.ref = c => {\n        this.componentInstance = c;\n        this.registerUiCanExitHook(stateName);\n      };\n    }\n\n    // attach any style or className to the rendered component\n    // specified on the UIView itself\n    const { className, style } = this.props;\n    const styleProps = { className, style };\n    const childProps = { ...props, ...styleProps };\n\n    let child =\n      !loaded && isValidElement(children) ? cloneElement(children, childProps) : createElement(component, childProps);\n\n    // if a render function is passed use that,\n    // otherwise render the component normally\n    const ChildOrRenderFunction = typeof render !== 'undefined' && loaded ? render(component, childProps) : child;\n    return <UIViewProvider value={this.uiViewAddress}>{ChildOrRenderFunction}</UIViewProvider>;\n  }\n\n  componentWillMount() {\n    const router = this.props.router;\n    if (typeof router === 'undefined') {\n      throw UIRouterInstanceUndefinedError;\n    }\n\n    // Check the context for the parent UIView's fqn and State\n    let parent: UIViewAddress = this.props.parentUIView;\n    // Not found in context, this is a root UIView\n    parent = parent || { fqn: '', context: router.stateRegistry.root() };\n\n    let name = this.props.name || '$default';\n\n    this.uiViewData = {\n      $type: 'react',\n      id: ++id,\n      name: name,\n      fqn: parent.fqn ? parent.fqn + '.' + name : name,\n      creationContext: parent.context,\n      configUpdated: this.viewConfigUpdated.bind(this),\n      config: undefined,\n    } as ActiveUIView;\n\n    this.uiViewAddress = { fqn: this.uiViewData.fqn, context: undefined };\n\n    this.deregister = router.viewService.registerUIView(this.uiViewData);\n\n    this.setState({ id: this.uiViewData.id });\n  }\n\n  componentWillUnmount() {\n    this.deregister();\n  }\n\n  /**\n   * View config updated callback\n   *\n   * This is called by UI-Router during ViewService.sync().\n   * The `newConfig` parameter will contain view configuration (component, etc) when a\n   * state is activated and one of its views targets this `UIView`.\n   */\n  viewConfigUpdated(newConfig: ReactViewConfig) {\n    if (newConfig === this.uiViewData.config) {\n      return;\n    }\n\n    let trans: Transition;\n    let resolves = {};\n\n    if (newConfig) {\n      let viewContext: ViewContext = newConfig.viewDecl && newConfig.viewDecl.$context;\n      this.uiViewAddress = {\n        fqn: this.uiViewAddress.fqn,\n        context: viewContext,\n      };\n\n      let resolveContext = new ResolveContext(newConfig.path);\n      let injector = resolveContext.injector();\n\n      let stringTokens: string[] = resolveContext.getTokens().filter(x => typeof x === 'string');\n      if (stringTokens.indexOf('transition') !== -1) {\n        throw TransitionPropCollisionError;\n      }\n\n      trans = injector.get(Transition);\n      resolves = stringTokens.map(token => [token, injector.get(token)]).reduce(applyPairs, {});\n    }\n\n    this.uiViewData.config = newConfig;\n    const key = Date.now();\n    let props = { ...resolves, transition: trans, key };\n\n    let newComponent = newConfig && newConfig.viewDecl && newConfig.viewDecl.component;\n    this.setState({\n      component: newComponent || 'div',\n      props: newComponent ? props : {},\n      loaded: !!newComponent,\n    });\n  }\n\n  registerUiCanExitHook(stateName: string) {\n    typeof this.removeHook === 'function' && this.removeHook();\n    let criteria = { exiting: stateName };\n    let callback =\n      this.componentInstance &&\n      typeof this.componentInstance.uiCanExit === 'function' &&\n      this.componentInstance.uiCanExit;\n    if (stateName && callback) {\n      let transitions = this.props.router.transitionService;\n      this.removeHook = transitions.onBefore(criteria, callback, {});\n    }\n  }\n}\n\nexport class UIView extends React.Component<UIViewProps, any> {\n  static displayName = 'UIView';\n  static __internalViewComponent: React.ComponentClass<UIViewProps> = View;\n\n  render() {\n    return (\n      <UIRouterConsumer>\n        {router => (\n          <UIViewConsumer>\n            {parentUIView => <View {...this.props} router={router} parentUIView={parentUIView} />}\n          </UIViewConsumer>\n        )}\n      </UIRouterConsumer>\n    );\n  }\n}\n",
    "/**\n * @reactapi\n * @module react\n */ /** */\nimport { services, forEach, map, pick, PathNode, ViewConfig, ViewService, StateObject } from '@uirouter/core';\n\nimport { ReactViewDeclaration } from './interface';\n\n/**\n * This is a [[StateBuilder.builder]] function for react `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to ui-router-react.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\nexport function reactViewsBuilder(state: StateObject) {\n  let views = {},\n    viewsDefinitionObject;\n  if (!state.views) {\n    viewsDefinitionObject = { $default: pick(state, ['component']) };\n  } else {\n    viewsDefinitionObject = map(state.views, (val: any, key) => {\n      if (val.component) return val;\n      return { component: val };\n    });\n  }\n\n  forEach(viewsDefinitionObject, function(config, name) {\n    name = name || '$default'; // Account for views: { \"\": { template... } }\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = 'react';\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n/** @internalapi */\nlet id = 0;\n\n/** @internalapi */\nexport class ReactViewConfig implements ViewConfig {\n  loaded: boolean = true;\n  $id: number = id++;\n\n  constructor(public path: [PathNode], public viewDecl: ReactViewDeclaration) {}\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n",
    "/**\n * # Components\n *\n * UI-Router React Components and their APIs:\n * - [[UIRouter]]: Main router component\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: Adds a css class when a UISref's target state (or a child state) is active\n *\n * @preferred\n * @reactapi\n * @module components\n */ /** */\n\nexport * from './UIRouter';\nexport * from './UIView';\nexport * from './UISref';\nexport * from './UISrefActive';\n",
    "/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n",
    "/**\n * @reactapi\n * @module components\n */ /** */\nimport * as React from 'react';\nimport { Component, cloneElement, ValidationMap } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _classNames from 'classnames';\n\nimport { UIRouterReact, UISref, UIRouterConsumer } from '../index';\nimport { UIViewAddress } from './UIView';\nimport { UIRouterInstanceUndefinedError } from './UIRouter';\n\nimport { UIViewConsumer } from './UIView';\n\nlet classNames = _classNames;\n\nexport interface UISrefActiveProps {\n  parentUIView: UIViewAddress;\n  addStateInfoToParentActive: Function;\n  router: UIRouterReact;\n  class?: string;\n  exact?: Boolean;\n  children?: any;\n  className?: string;\n}\n\nexport interface UISrefActiveState {\n  state: { name?: string; [key: string]: any };\n  params: Object;\n  hash: string;\n}\n\nexport const StateNameMustBeAStringError = new Error('State name provided to <UISref {to}> must be a string.');\n\n/** @internalapi */\nexport const { Provider: UISrefActiveProvider, Consumer: UISrefActiveConsumer } = React.createContext<Function>(\n  undefined\n);\n\nclass SrefActive extends Component<UISrefActiveProps, any> {\n  // keep track of states to watch and their activeClasses\n  states: Array<UISrefActiveState> = [];\n  activeClasses: { [key: string]: string } = {};\n\n  // deregister the callback for state changed when unmounted\n  deregister: Function;\n\n  static propTypes = {\n    parentUIView: PropTypes.object,\n    addStateInfoToParentActive: PropTypes.func,\n    router: PropTypes.object.isRequired,\n    class: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n    className: PropTypes.string,\n  };\n\n  state = {\n    activeClasses: '',\n  };\n\n  componentWillMount() {\n    const router = this.props.router;\n    if (typeof router === 'undefined') {\n      throw UIRouterInstanceUndefinedError;\n    }\n    // register callback for state change\n    this.deregister = router.transitionService.onSuccess({}, () => this.updateActiveClasses());\n  }\n\n  componentWillUnmount() {\n    this.deregister();\n  }\n\n  addStateInfo = (stateName, stateParams) => {\n    const activeClass = this.props.class;\n    let deregister = this.addState(stateName, stateParams, activeClass);\n    const addStateInfo = this.props.addStateInfoToParentActive;\n    this.updateActiveClasses();\n\n    if (typeof addStateInfo === 'function') {\n      const parentDeregister = addStateInfo(stateName, stateParams);\n      return () => {\n        deregister();\n        parentDeregister();\n      };\n    }\n\n    return deregister;\n  };\n\n  addState = (stateName, stateParams, activeClass) => {\n    const { stateService } = this.props.router;\n    let parent = this.props.parentUIView;\n    let stateContext = (parent && parent.context) || this.props.router.stateRegistry.root();\n    let state = stateService.get(stateName, stateContext);\n    let stateHash = this.createStateHash(stateName, stateParams);\n    let stateInfo = {\n      state: state || { name: stateName },\n      params: stateParams,\n      hash: stateHash,\n    };\n    this.states.push(stateInfo);\n    this.activeClasses[stateHash] = activeClass;\n    return () => {\n      let idx = this.states.indexOf(stateInfo);\n      if (idx !== -1) this.states.splice(idx, 1);\n    };\n  };\n\n  createStateHash = (state: string, params: Object) => {\n    if (typeof state !== 'string') {\n      throw StateNameMustBeAStringError;\n    }\n    return params && typeof params === 'object' ? state + JSON.stringify(params) : state;\n  };\n\n  getActiveClasses = (): string => {\n    let activeClasses = [];\n    let { stateService } = this.props.router;\n    let { exact } = this.props;\n    this.states.forEach(s => {\n      let { state, params, hash } = s;\n      if (!exact && stateService.includes(state.name, params)) activeClasses.push(this.activeClasses[hash]);\n      if (exact && stateService.is(state.name, params)) activeClasses.push(this.activeClasses[hash]);\n    });\n    return classNames(activeClasses);\n  };\n\n  updateActiveClasses = (): void => {\n    const { activeClasses } = this.state;\n    const newActiveClasses = this.getActiveClasses();\n    if (activeClasses !== newActiveClasses) {\n      this.setState({\n        activeClasses: this.getActiveClasses(),\n      });\n    }\n  };\n\n  render() {\n    const { activeClasses } = this.state;\n    const { className } = this.props;\n    const children =\n      activeClasses.length > 0\n        ? cloneElement(\n            this.props.children,\n            Object.assign({}, this.props.children.props, {\n              className: classNames(className, this.props.children.props.className, activeClasses),\n            })\n          )\n        : this.props.children;\n    return <UISrefActiveProvider value={this.addStateInfo}>{children}</UISrefActiveProvider>;\n  }\n}\n\nexport const UISrefActive = props => (\n  <UIRouterConsumer>\n    {router => (\n      <UIViewConsumer>\n        {parentUIView => (\n          <UISrefActiveConsumer>\n            {addStateInfo => (\n              <SrefActive\n                {...props}\n                router={router}\n                parentUIView={parentUIView}\n                addStateInfoToParentActive={addStateInfo}\n              />\n            )}\n          </UISrefActiveConsumer>\n        )}\n      </UIViewConsumer>\n    )}\n  </UIRouterConsumer>\n);\n\n(UISrefActive as any).displayName = 'UISrefActive';\n",
    "var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n",
    "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n",
    "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n",
    "/**\n * @reactapi\n * @module components\n */ /** */\nimport * as React from 'react';\nimport { Component, createElement, cloneElement, isValidElement, ValidationMap } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _classNames from 'classnames';\n\nimport { extend, isFunction, TransitionOptions } from '@uirouter/core';\n\nimport { UIRouterReact, UIRouterConsumer } from '../index';\nimport { UIViewAddress, UIViewConsumer } from './UIView';\nimport { UIRouterInstanceUndefinedError } from './UIRouter';\nimport { UISrefActive, UISrefActiveConsumer } from './UISrefActive';\n\nlet classNames = _classNames;\n\nexport interface UISrefProps {\n  router: UIRouterReact;\n  addStateInfoToParentActive: Function;\n  parentUIView: UIViewAddress;\n  children?: any;\n  to: string;\n  params?: { [key: string]: any };\n  options?: TransitionOptions;\n  className?: string;\n}\n\nclass Sref extends Component<UISrefProps, any> {\n  // deregister function for parent UISrefActive\n  deregister: Function;\n  static propTypes = {\n    router: PropTypes.object.isRequired,\n    parentUIView: PropTypes.object,\n    addStateInfoToParentActive: PropTypes.func,\n    children: PropTypes.element.isRequired,\n    to: PropTypes.string.isRequired,\n    params: PropTypes.object,\n    options: PropTypes.object,\n    className: PropTypes.string,\n  };\n\n  componentWillMount() {\n    const addStateInfo = this.props.addStateInfoToParentActive;\n    this.deregister = typeof addStateInfo === 'function' ? addStateInfo(this.props.to, this.props.params) : () => {};\n    const router = this.props.router;\n    if (typeof router === 'undefined') {\n      throw UIRouterInstanceUndefinedError;\n    }\n  }\n\n  componentWillUnmount() {\n    this.deregister();\n  }\n\n  getOptions = () => {\n    let parent = this.props.parentUIView;\n    let parentContext = (parent && parent.context) || this.props.router.stateRegistry.root();\n    let defOpts = { relative: parentContext, inherit: true };\n    return extend(defOpts, this.props.options || {});\n  };\n\n  handleClick = e => {\n    const childOnClick = this.props.children.props.onClick;\n    if (isFunction(childOnClick)) {\n      childOnClick(e);\n    }\n\n    if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      let params = this.props.params || {};\n      let to = this.props.to;\n      let options = this.getOptions();\n      this.props.router.stateService.go(to, params, options);\n    }\n  };\n\n  render() {\n    let params = this.props.params || {},\n      to = this.props.to,\n      options = this.getOptions();\n    let childrenProps = this.props.children.props;\n    let props = Object.assign({}, childrenProps, {\n      onClick: this.handleClick,\n      href: this.props.router.stateService.href(to, params, options),\n      className: classNames(this.props.className, childrenProps.className),\n    });\n    return cloneElement(this.props.children, props);\n  }\n}\n\nexport const UISref = props => (\n  <UIRouterConsumer>\n    {router => (\n      <UIViewConsumer>\n        {parentUIView => (\n          <UISrefActiveConsumer>\n            {addStateInfo => (\n              <Sref {...props} router={router} parentUIView={parentUIView} addStateInfoToParentActive={addStateInfo} />\n            )}\n          </UISrefActiveConsumer>\n        )}\n      </UIViewConsumer>\n    )}\n  </UIRouterConsumer>\n);\n\n(UISref as any).displayName = 'UISref';\n",
    "/**\n * @reactapi\n * @module react\n */ /** */\nimport { UIRouter, PathNode, services } from '@uirouter/core';\nimport { ReactViewDeclaration, ReactStateDeclaration } from './interface';\nimport { ReactViewConfig, reactViewsBuilder } from './reactViews';\n\n/**\n * React View Config Factory\n *\n * Given a path and a [[ReactViewDeclaration]]\n * (the view declaration object found on the state declaration),\n * returns a [[ReactViewConfig]]\n *\n * The ReactViewConfig is an instance of a view,\n * which will be provided to the matching `UIView` Component's\n * [[UIView.viewConfigUpdated]] function.\n *\n * @internalapi\n */\nlet viewConfigFactory = (node: [PathNode], config: ReactViewDeclaration) => new ReactViewConfig(node, config);\n\n/** @hidden */\nexport const StartMethodCalledMoreThanOnceError = new Error(`\n  The Router.start() method has been called more than once.\n\n  The <UIRouter> component calls start() as final step of the initialization and you shouldn't need to call it manually.\n`);\n\n/**\n * The main UIRouter object\n *\n * This is the main UIRouter object.\n * There should be one instance of this object per running application.\n *\n * This class has references to all the other UIRouter services.\n */\nexport class UIRouterReact extends UIRouter {\n  started = false;\n  /**\n   * Creates a new UIRouter instance\n   *\n   * This can be used to manually bootstrap the router.\n   *\n   * #### Example:\n   * ```js\n   * import { UIRouterReact } from \"ui-router-ng2\";\n   * let routerInstance = new UIRouterReact();\n   * routerInstance.start();\n   * ```\n   */\n  constructor() {\n    super();\n    this.viewService._pluginapi._viewConfigFactory('react', viewConfigFactory);\n    this.stateRegistry.decorator('views', reactViewsBuilder);\n  }\n\n  /**\n   * Starts the router\n   *\n   * Calling this method enables listening to the URL for changes.\n   * It also performs the initial state synchronization from the URL.\n   */\n  start(): void {\n    // Throw error if user calls `start` more than once\n    if (this.started) {\n      throw StartMethodCalledMoreThanOnceError;\n    } else {\n      this.urlMatcherFactory.$get();\n      this.urlRouter.listen();\n      this.urlRouter.sync();\n      this.started = true;\n    }\n  }\n}\n"
  ],
  "sourceRoot": ""
}
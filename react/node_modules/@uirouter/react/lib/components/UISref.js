"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @reactapi
 * @module components
 */ /** */
var React = require("react");
var react_1 = require("react");
var PropTypes = require("prop-types");
var _classNames = require("classnames");
var core_1 = require("@uirouter/core");
var index_1 = require("../index");
var UIView_1 = require("./UIView");
var UIRouter_1 = require("./UIRouter");
var UISrefActive_1 = require("./UISrefActive");
var classNames = _classNames;
var Sref = /** @class */ (function (_super) {
    __extends(Sref, _super);
    function Sref() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getOptions = function () {
            var parent = _this.props.parentUIView;
            var parentContext = (parent && parent.context) || _this.props.router.stateRegistry.root();
            var defOpts = { relative: parentContext, inherit: true };
            return core_1.extend(defOpts, _this.props.options || {});
        };
        _this.handleClick = function (e) {
            var childOnClick = _this.props.children.props.onClick;
            if (core_1.isFunction(childOnClick)) {
                childOnClick(e);
            }
            if (!e.defaultPrevented && !(e.button == 1 || e.metaKey || e.ctrlKey)) {
                e.preventDefault();
                var params = _this.props.params || {};
                var to = _this.props.to;
                var options = _this.getOptions();
                _this.props.router.stateService.go(to, params, options);
            }
        };
        return _this;
    }
    Sref.prototype.componentWillMount = function () {
        var addStateInfo = this.props.addStateInfoToParentActive;
        this.deregister = typeof addStateInfo === 'function' ? addStateInfo(this.props.to, this.props.params) : function () { };
        var router = this.props.router;
        if (typeof router === 'undefined') {
            throw UIRouter_1.UIRouterInstanceUndefinedError;
        }
    };
    Sref.prototype.componentWillUnmount = function () {
        this.deregister();
    };
    Sref.prototype.render = function () {
        var params = this.props.params || {}, to = this.props.to, options = this.getOptions();
        var childrenProps = this.props.children.props;
        var props = Object.assign({}, childrenProps, {
            onClick: this.handleClick,
            href: this.props.router.stateService.href(to, params, options),
            className: classNames(this.props.className, childrenProps.className),
        });
        return react_1.cloneElement(this.props.children, props);
    };
    Sref.propTypes = {
        router: PropTypes.object.isRequired,
        parentUIView: PropTypes.object,
        addStateInfoToParentActive: PropTypes.func,
        children: PropTypes.element.isRequired,
        to: PropTypes.string.isRequired,
        params: PropTypes.object,
        options: PropTypes.object,
        className: PropTypes.string,
    };
    return Sref;
}(react_1.Component));
exports.UISref = function (props) { return (React.createElement(index_1.UIRouterConsumer, null, function (router) { return (React.createElement(UIView_1.UIViewConsumer, null, function (parentUIView) { return (React.createElement(UISrefActive_1.UISrefActiveConsumer, null, function (addStateInfo) { return (React.createElement(Sref, __assign({}, props, { router: router, parentUIView: parentUIView, addStateInfoToParentActive: addStateInfo }))); })); })); })); };
exports.UISref.displayName = 'UISref';
//# sourceMappingURL=UISref.js.map